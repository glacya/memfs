<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1013.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="421626"><g><title>`0x7FFCA89BCC70 (386 samples, 0.09%)</title><rect x="0.0000%" y="965" width="0.0916%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="386"/><text x="0.2500%" y="975.50"></text></g><g><title>`0x7FFCA64BE8DB (627 samples, 0.15%)</title><rect x="0.1248%" y="901" width="0.1487%" height="15" fill="rgb(217,0,24)" fg:x="526" fg:w="627"/><text x="0.3748%" y="911.50"></text></g><g><title>`0x7FFCA8A0D7F4 (624 samples, 0.15%)</title><rect x="0.1255%" y="885" width="0.1480%" height="15" fill="rgb(221,193,54)" fg:x="529" fg:w="624"/><text x="0.3755%" y="895.50"></text></g><g><title>`0x7FFCA7F1B91D (76 samples, 0.02%)</title><rect x="0.2830%" y="453" width="0.0180%" height="15" fill="rgb(248,212,6)" fg:x="1193" fg:w="76"/><text x="0.5330%" y="463.50"></text></g><g><title>`0x7FFCA648B43F (76 samples, 0.02%)</title><rect x="0.2830%" y="437" width="0.0180%" height="15" fill="rgb(208,68,35)" fg:x="1193" fg:w="76"/><text x="0.5330%" y="447.50"></text></g><g><title>`0x7FFCA8A0ED24 (75 samples, 0.02%)</title><rect x="0.2832%" y="421" width="0.0178%" height="15" fill="rgb(232,128,0)" fg:x="1194" fg:w="75"/><text x="0.5332%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::pal::windows::thread::Thread::new (77 samples, 0.02%)</title><rect x="0.2830%" y="469" width="0.0183%" height="15" fill="rgb(207,160,47)" fg:x="1193" fg:w="77"/><text x="0.5330%" y="479.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ops::function::FnOnce::call_once&lt;test_memfs_concurrency::test_correctness_only_one_should_succeed_when_removing_multiple_files_on_different_directory::closure_env$0,tuple$&lt;&gt; &gt; (105 samples, 0.02%)</title><rect x="0.2768%" y="581" width="0.0249%" height="15" fill="rgb(228,23,34)" fg:x="1167" fg:w="105"/><text x="0.5268%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::test_correctness_only_one_should_succeed_when_removing_multiple_files_on_different_directory::closure$0 (105 samples, 0.02%)</title><rect x="0.2768%" y="565" width="0.0249%" height="15" fill="rgb(218,30,26)" fg:x="1167" fg:w="105"/><text x="0.5268%" y="575.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::test_correctness_only_one_should_succeed_when_removing_multiple_files_on_different_directory (101 samples, 0.02%)</title><rect x="0.2777%" y="549" width="0.0240%" height="15" fill="rgb(220,122,19)" fg:x="1171" fg:w="101"/><text x="0.5277%" y="559.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::spawn (81 samples, 0.02%)</title><rect x="0.2825%" y="533" width="0.0192%" height="15" fill="rgb(250,228,42)" fg:x="1191" fg:w="81"/><text x="0.5325%" y="543.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::result::Result&lt;std::thread::JoinHandle&lt;i32&gt;,std::io::error::Error&gt; &gt;::expect(enum2$&lt;core::result::Result&lt;std::thread::JoinHandle&lt;i32&gt;,std::io::error::Error&gt; &gt;, ref$ (81 samples, 0.02%)</title><rect x="0.2825%" y="517" width="0.0192%" height="15" fill="rgb(240,193,28)" fg:x="1191" fg:w="81"/><text x="0.5325%" y="527.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::Builder::spawn_unchecked&lt;test_memfs_concurrency::test_correctness_only_one_should_succeed_when_removing_multiple_files_on_different_directory::closure_env$0,i32&gt; (80 samples, 0.02%)</title><rect x="0.2827%" y="501" width="0.0190%" height="15" fill="rgb(216,20,37)" fg:x="1192" fg:w="80"/><text x="0.5327%" y="511.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::Builder::spawn_unchecked_(std::thread::Builder, test_memfs_concurrency::test_correctness_only_one_should_succeed_when_removing_multiple_files_on_different_directory::closure_env$0, enum2$&lt;core::option::Option&lt;alloc::sync::Arc (80 samples, 0.02%)</title><rect x="0.2827%" y="485" width="0.0190%" height="15" fill="rgb(206,188,39)" fg:x="1192" fg:w="80"/><text x="0.5327%" y="495.50"></text></g><g><title>`0x7FFCA8A14695 (46 samples, 0.01%)</title><rect x="0.3138%" y="341" width="0.0109%" height="15" fill="rgb(217,207,13)" fg:x="1323" fg:w="46"/><text x="0.5638%" y="351.50"></text></g><g><title>`0x7FFCA899B90B (351 samples, 0.08%)</title><rect x="0.3090%" y="357" width="0.0832%" height="15" fill="rgb(231,73,38)" fg:x="1303" fg:w="351"/><text x="0.5590%" y="367.50"></text></g><g><title>`0x7FFCA897A16F (731 samples, 0.17%)</title><rect x="0.4051%" y="341" width="0.1734%" height="15" fill="rgb(225,20,46)" fg:x="1708" fg:w="731"/><text x="0.6551%" y="351.50"></text></g><g><title>`0x7FFCA897A176 (168 samples, 0.04%)</title><rect x="0.5785%" y="341" width="0.0398%" height="15" fill="rgb(210,31,41)" fg:x="2439" fg:w="168"/><text x="0.8285%" y="351.50"></text></g><g><title>`0x7FFCA899BF5E (946 samples, 0.22%)</title><rect x="0.4049%" y="357" width="0.2244%" height="15" fill="rgb(221,200,47)" fg:x="1707" fg:w="946"/><text x="0.6549%" y="367.50"></text></g><g><title>`0x7FFCA899B3C7 (1,371 samples, 0.33%)</title><rect x="0.3043%" y="373" width="0.3252%" height="15" fill="rgb(226,26,5)" fg:x="1283" fg:w="1371"/><text x="0.5543%" y="383.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::from_elem (1,410 samples, 0.33%)</title><rect x="0.3036%" y="453" width="0.3344%" height="15" fill="rgb(249,33,26)" fg:x="1280" fg:w="1410"/><text x="0.5536%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::spec_from_elem::impl$3::from_elem (1,410 samples, 0.33%)</title><rect x="0.3036%" y="437" width="0.3344%" height="15" fill="rgb(235,183,28)" fg:x="1280" fg:w="1410"/><text x="0.5536%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_zeroed_in (1,409 samples, 0.33%)</title><rect x="0.3038%" y="421" width="0.3342%" height="15" fill="rgb(221,5,38)" fg:x="1281" fg:w="1409"/><text x="0.5538%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_zeroed_in (1,409 samples, 0.33%)</title><rect x="0.3038%" y="405" width="0.3342%" height="15" fill="rgb(247,18,42)" fg:x="1281" fg:w="1409"/><text x="0.5538%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1,409 samples, 0.33%)</title><rect x="0.3038%" y="389" width="0.3342%" height="15" fill="rgb(241,131,45)" fg:x="1281" fg:w="1409"/><text x="0.5538%" y="399.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;memfs::memfs::MemFS,alloc::alloc::Global&gt;::new (1,463 samples, 0.35%)</title><rect x="0.3024%" y="485" width="0.3470%" height="15" fill="rgb(249,31,29)" fg:x="1275" fg:w="1463"/><text x="0.5524%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFS::new (1,463 samples, 0.35%)</title><rect x="0.3024%" y="469" width="0.3470%" height="15" fill="rgb(225,111,53)" fg:x="1275" fg:w="1463"/><text x="0.5524%" y="479.50"></text></g><g><title>`0x7FFCA8995BBB (116 samples, 0.03%)</title><rect x="0.6584%" y="197" width="0.0275%" height="15" fill="rgb(238,160,17)" fg:x="2776" fg:w="116"/><text x="0.9084%" y="207.50"></text></g><g><title>`0x7FFCA899095C (200 samples, 0.05%)</title><rect x="0.6899%" y="69" width="0.0474%" height="15" fill="rgb(214,148,48)" fg:x="2909" fg:w="200"/><text x="0.9399%" y="79.50"></text></g><g><title>`0x7FFCA8979B1A (199 samples, 0.05%)</title><rect x="0.6902%" y="53" width="0.0472%" height="15" fill="rgb(232,36,49)" fg:x="2910" fg:w="199"/><text x="0.9402%" y="63.50"></text></g><g><title>`0x7FFCA8A0D8B4 (199 samples, 0.05%)</title><rect x="0.6902%" y="37" width="0.0472%" height="15" fill="rgb(209,103,24)" fg:x="2910" fg:w="199"/><text x="0.9402%" y="47.50"></text></g><g><title>`0x7FFCA89744AF (211 samples, 0.05%)</title><rect x="0.6876%" y="165" width="0.0500%" height="15" fill="rgb(229,88,8)" fg:x="2899" fg:w="211"/><text x="0.9376%" y="175.50"></text></g><g><title>`0x7FFCA89947B1 (211 samples, 0.05%)</title><rect x="0.6876%" y="149" width="0.0500%" height="15" fill="rgb(213,181,19)" fg:x="2899" fg:w="211"/><text x="0.9376%" y="159.50"></text></g><g><title>`0x7FFCA8995B74 (211 samples, 0.05%)</title><rect x="0.6876%" y="133" width="0.0500%" height="15" fill="rgb(254,191,54)" fg:x="2899" fg:w="211"/><text x="0.9376%" y="143.50"></text></g><g><title>`0x7FFCA89965F6 (207 samples, 0.05%)</title><rect x="0.6885%" y="117" width="0.0491%" height="15" fill="rgb(241,83,37)" fg:x="2903" fg:w="207"/><text x="0.9385%" y="127.50"></text></g><g><title>`0x7FFCA898E412 (204 samples, 0.05%)</title><rect x="0.6892%" y="101" width="0.0484%" height="15" fill="rgb(233,36,39)" fg:x="2906" fg:w="204"/><text x="0.9392%" y="111.50"></text></g><g><title>`0x7FFCA898F35E (201 samples, 0.05%)</title><rect x="0.6899%" y="85" width="0.0477%" height="15" fill="rgb(226,3,54)" fg:x="2909" fg:w="201"/><text x="0.9399%" y="95.50"></text></g><g><title>`0x7FFCA8990F01 (215 samples, 0.05%)</title><rect x="0.6876%" y="181" width="0.0510%" height="15" fill="rgb(245,192,40)" fg:x="2899" fg:w="215"/><text x="0.9376%" y="191.50"></text></g><g><title>`0x7FFCA898E412 (144 samples, 0.03%)</title><rect x="0.7419%" y="101" width="0.0342%" height="15" fill="rgb(238,167,29)" fg:x="3128" fg:w="144"/><text x="0.9919%" y="111.50"></text></g><g><title>`0x7FFCA898F35E (142 samples, 0.03%)</title><rect x="0.7424%" y="85" width="0.0337%" height="15" fill="rgb(232,182,51)" fg:x="3130" fg:w="142"/><text x="0.9924%" y="95.50"></text></g><g><title>`0x7FFCA899095C (142 samples, 0.03%)</title><rect x="0.7424%" y="69" width="0.0337%" height="15" fill="rgb(231,60,39)" fg:x="3130" fg:w="142"/><text x="0.9924%" y="79.50"></text></g><g><title>`0x7FFCA8979B1A (142 samples, 0.03%)</title><rect x="0.7424%" y="53" width="0.0337%" height="15" fill="rgb(208,69,12)" fg:x="3130" fg:w="142"/><text x="0.9924%" y="63.50"></text></g><g><title>`0x7FFCA8A0D8B4 (142 samples, 0.03%)</title><rect x="0.7424%" y="37" width="0.0337%" height="15" fill="rgb(235,93,37)" fg:x="3130" fg:w="142"/><text x="0.9924%" y="47.50"></text></g><g><title>`0x7FFCA89744AF (159 samples, 0.04%)</title><rect x="0.7386%" y="165" width="0.0377%" height="15" fill="rgb(213,116,39)" fg:x="3114" fg:w="159"/><text x="0.9886%" y="175.50"></text></g><g><title>`0x7FFCA89947B1 (159 samples, 0.04%)</title><rect x="0.7386%" y="149" width="0.0377%" height="15" fill="rgb(222,207,29)" fg:x="3114" fg:w="159"/><text x="0.9886%" y="159.50"></text></g><g><title>`0x7FFCA8995B74 (159 samples, 0.04%)</title><rect x="0.7386%" y="133" width="0.0377%" height="15" fill="rgb(206,96,30)" fg:x="3114" fg:w="159"/><text x="0.9886%" y="143.50"></text></g><g><title>`0x7FFCA89965F6 (146 samples, 0.03%)</title><rect x="0.7417%" y="117" width="0.0346%" height="15" fill="rgb(218,138,4)" fg:x="3127" fg:w="146"/><text x="0.9917%" y="127.50"></text></g><g><title>`0x7FFCA8A176EF (376 samples, 0.09%)</title><rect x="0.6876%" y="197" width="0.0892%" height="15" fill="rgb(250,191,14)" fg:x="2899" fg:w="376"/><text x="0.9376%" y="207.50"></text></g><g><title>`0x7FFCA8990F76 (161 samples, 0.04%)</title><rect x="0.7386%" y="181" width="0.0382%" height="15" fill="rgb(239,60,40)" fg:x="3114" fg:w="161"/><text x="0.9886%" y="191.50"></text></g><g><title>`0x7FFCA89947B1 (515 samples, 0.12%)</title><rect x="0.6551%" y="213" width="0.1221%" height="15" fill="rgb(206,27,48)" fg:x="2762" fg:w="515"/><text x="0.9051%" y="223.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (517 samples, 0.12%)</title><rect x="0.6548%" y="245" width="0.1226%" height="15" fill="rgb(225,35,8)" fg:x="2761" fg:w="517"/><text x="0.9048%" y="255.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::alloc::dealloc (517 samples, 0.12%)</title><rect x="0.6548%" y="229" width="0.1226%" height="15" fill="rgb(250,213,24)" fg:x="2761" fg:w="517"/><text x="0.9048%" y="239.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::sync::Weak&lt;memfs::memfs::MemFS,ref$ (530 samples, 0.13%)</title><rect x="0.6520%" y="437" width="0.1257%" height="15" fill="rgb(247,123,22)" fg:x="2749" fg:w="530"/><text x="0.9020%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$46::drop(alloc::sync::Weak&lt;memfs::memfs::MemFS,ref$ (530 samples, 0.13%)</title><rect x="0.6520%" y="421" width="0.1257%" height="15" fill="rgb(231,138,38)" fg:x="2749" fg:w="530"/><text x="0.9020%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Weak&lt;memfs::memfs::MemFS,ref$&lt;alloc::alloc::Global&gt; &gt;::inner (530 samples, 0.13%)</title><rect x="0.6520%" y="405" width="0.1257%" height="15" fill="rgb(231,145,46)" fg:x="2749" fg:w="530"/><text x="0.9020%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::rc::is_dangling(alloc::sync::ArcInner (530 samples, 0.13%)</title><rect x="0.6520%" y="389" width="0.1257%" height="15" fill="rgb(251,118,11)" fg:x="2749" fg:w="530"/><text x="0.9020%" y="399.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::drop_slow&lt;crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt; (530 samples, 0.13%)</title><rect x="0.6520%" y="373" width="0.1257%" height="15" fill="rgb(217,147,25)" fg:x="2749" fg:w="530"/><text x="0.9020%" y="383.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec (520 samples, 0.12%)</title><rect x="0.6544%" y="357" width="0.1233%" height="15" fill="rgb(247,81,37)" fg:x="2759" fg:w="520"/><text x="0.9044%" y="367.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`crossbeam_queue::array_queue::impl$5::drop(crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec (520 samples, 0.12%)</title><rect x="0.6544%" y="341" width="0.1233%" height="15" fill="rgb(209,12,38)" fg:x="2759" fg:w="520"/><text x="0.9044%" y="351.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::mem::maybe_uninit::MaybeUninit&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;::assume_init_drop (518 samples, 0.12%)</title><rect x="0.6548%" y="325" width="0.1229%" height="15" fill="rgb(227,1,9)" fg:x="2761" fg:w="518"/><text x="0.9048%" y="335.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::vec::Vec (518 samples, 0.12%)</title><rect x="0.6548%" y="309" width="0.1229%" height="15" fill="rgb(248,47,43)" fg:x="2761" fg:w="518"/><text x="0.9048%" y="319.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (518 samples, 0.12%)</title><rect x="0.6548%" y="293" width="0.1229%" height="15" fill="rgb(221,10,30)" fg:x="2761" fg:w="518"/><text x="0.9048%" y="303.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (518 samples, 0.12%)</title><rect x="0.6548%" y="277" width="0.1229%" height="15" fill="rgb(210,229,1)" fg:x="2761" fg:w="518"/><text x="0.9048%" y="287.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (518 samples, 0.12%)</title><rect x="0.6548%" y="261" width="0.1229%" height="15" fill="rgb(222,148,37)" fg:x="2761" fg:w="518"/><text x="0.9048%" y="271.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;memfs::memfs::MemFS,alloc::alloc::Global&gt;::drop_slow&lt;memfs::memfs::MemFS,alloc::alloc::Global&gt; (533 samples, 0.13%)</title><rect x="0.6520%" y="453" width="0.1264%" height="15" fill="rgb(234,67,33)" fg:x="2749" fg:w="533"/><text x="0.9020%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::sync::Arc (535 samples, 0.13%)</title><rect x="0.6520%" y="485" width="0.1269%" height="15" fill="rgb(247,98,35)" fg:x="2749" fg:w="535"/><text x="0.9020%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$37::drop(alloc::sync::Arc (535 samples, 0.13%)</title><rect x="0.6520%" y="469" width="0.1269%" height="15" fill="rgb(247,138,52)" fg:x="2749" fg:w="535"/><text x="0.9020%" y="479.50"></text></g><g><title>`0x7FFCA6480905 (64 samples, 0.02%)</title><rect x="0.7839%" y="389" width="0.0152%" height="15" fill="rgb(213,79,30)" fg:x="3305" fg:w="64"/><text x="1.0339%" y="399.50"></text></g><g><title>`0x7FFCA8A0D6D4 (63 samples, 0.01%)</title><rect x="0.7841%" y="373" width="0.0149%" height="15" fill="rgb(246,177,23)" fg:x="3306" fg:w="63"/><text x="1.0341%" y="383.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::get_mut (85 samples, 0.02%)</title><rect x="0.7824%" y="453" width="0.0202%" height="15" fill="rgb(230,62,27)" fg:x="3299" fg:w="85"/><text x="1.0324%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::is_unique (85 samples, 0.02%)</title><rect x="0.7824%" y="437" width="0.0202%" height="15" fill="rgb(216,154,8)" fg:x="3299" fg:w="85"/><text x="1.0324%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::inner (85 samples, 0.02%)</title><rect x="0.7824%" y="421" width="0.0202%" height="15" fill="rgb(244,35,45)" fg:x="3299" fg:w="85"/><text x="1.0324%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;std::thread::Packet&lt;usize&gt; &gt; &gt;::as_ref (85 samples, 0.02%)</title><rect x="0.7824%" y="405" width="0.0202%" height="15" fill="rgb(251,115,12)" fg:x="3299" fg:w="85"/><text x="1.0324%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::JoinHandle&lt;usize&gt;::join(std::thread::JoinHandle (88 samples, 0.02%)</title><rect x="0.7824%" y="485" width="0.0209%" height="15" fill="rgb(240,54,50)" fg:x="3299" fg:w="88"/><text x="1.0324%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::JoinInner&lt;usize&gt;::join(std::thread::JoinInner (88 samples, 0.02%)</title><rect x="0.7824%" y="469" width="0.0209%" height="15" fill="rgb(233,84,52)" fg:x="3299" fg:w="88"/><text x="1.0324%" y="479.50"></text></g><g><title>`0x7FFCA648B43F (1,051 samples, 0.25%)</title><rect x="0.8114%" y="389" width="0.2493%" height="15" fill="rgb(207,117,47)" fg:x="3421" fg:w="1051"/><text x="1.0614%" y="399.50"></text></g><g><title>`0x7FFCA8A0ED24 (1,049 samples, 0.25%)</title><rect x="0.8119%" y="373" width="0.2488%" height="15" fill="rgb(249,43,39)" fg:x="3423" fg:w="1049"/><text x="1.0619%" y="383.50"></text></g><g><title>`0x7FFCA7F1B91D (1,060 samples, 0.25%)</title><rect x="0.8097%" y="405" width="0.2514%" height="15" fill="rgb(209,38,44)" fg:x="3414" fg:w="1060"/><text x="1.0597%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::pal::windows::thread::Thread::new (1,074 samples, 0.25%)</title><rect x="0.8095%" y="421" width="0.2547%" height="15" fill="rgb(236,212,23)" fg:x="3413" fg:w="1074"/><text x="1.0595%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::spawn (1,106 samples, 0.26%)</title><rect x="0.8033%" y="485" width="0.2623%" height="15" fill="rgb(242,79,21)" fg:x="3387" fg:w="1106"/><text x="1.0533%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::result::Result&lt;std::thread::JoinHandle&lt;usize&gt;,std::io::error::Error&gt; &gt;::expect(enum2$&lt;core::result::Result&lt;std::thread::JoinHandle&lt;usize&gt;,std::io::error::Error&gt; &gt;, ref$ (1,106 samples, 0.26%)</title><rect x="0.8033%" y="469" width="0.2623%" height="15" fill="rgb(211,96,35)" fg:x="3387" fg:w="1106"/><text x="1.0533%" y="479.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::Builder::spawn_unchecked&lt;test_memfs_concurrency::helper_all_should_succeed_when_lseek_on_single_file_descriptor::closure_env$0,usize&gt; (1,105 samples, 0.26%)</title><rect x="0.8036%" y="453" width="0.2621%" height="15" fill="rgb(253,215,40)" fg:x="3388" fg:w="1105"/><text x="1.0536%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::Builder::spawn_unchecked_(std::thread::Builder, test_memfs_concurrency::helper_all_should_succeed_when_lseek_on_single_file_descriptor::closure_env$0, enum2$&lt;core::option::Option&lt;alloc::sync::Arc (1,104 samples, 0.26%)</title><rect x="0.8038%" y="437" width="0.2618%" height="15" fill="rgb(211,81,21)" fg:x="3389" fg:w="1104"/><text x="1.0538%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ops::function::FnOnce::call_once&lt;test_memfs_concurrency::test_throughput_measure_on_lseek_on_single_file_descriptor::closure_env$0,tuple$&lt;&gt; &gt; (3,222 samples, 0.76%)</title><rect x="0.3017%" y="581" width="0.7642%" height="15" fill="rgb(208,190,38)" fg:x="1272" fg:w="3222"/><text x="0.5517%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::test_throughput_measure_on_lseek_on_single_file_descriptor::closure$0 (3,222 samples, 0.76%)</title><rect x="0.3017%" y="565" width="0.7642%" height="15" fill="rgb(235,213,38)" fg:x="1272" fg:w="3222"/><text x="0.5517%" y="575.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::test_throughput_measure_on_lseek_on_single_file_descriptor (3,222 samples, 0.76%)</title><rect x="0.3017%" y="549" width="0.7642%" height="15" fill="rgb(237,122,38)" fg:x="1272" fg:w="3222"/><text x="0.5517%" y="559.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::throughput_reporter(uint128_t (*) (3,222 samples, 0.76%)</title><rect x="0.3017%" y="533" width="0.7642%" height="15" fill="rgb(244,218,35)" fg:x="1272" fg:w="3222"/><text x="0.5517%" y="543.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ops::function::Fn::call(uint128_t (**) (3,221 samples, 0.76%)</title><rect x="0.3019%" y="517" width="0.7639%" height="15" fill="rgb(240,68,47)" fg:x="1273" fg:w="3221"/><text x="0.5519%" y="527.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::helper_all_should_succeed_when_lseek_on_single_file_descriptor (3,221 samples, 0.76%)</title><rect x="0.3019%" y="501" width="0.7639%" height="15" fill="rgb(210,16,53)" fg:x="1273" fg:w="3221"/><text x="0.5519%" y="511.50"></text></g><g><title>`0x7FFCA8A146B7 (46 samples, 0.01%)</title><rect x="1.1330%" y="341" width="0.0109%" height="15" fill="rgb(235,124,12)" fg:x="4777" fg:w="46"/><text x="1.3830%" y="351.50"></text></g><g><title>`0x7FFCA899B90B (331 samples, 0.08%)</title><rect x="1.0739%" y="357" width="0.0785%" height="15" fill="rgb(224,169,11)" fg:x="4528" fg:w="331"/><text x="1.3239%" y="367.50"></text></g><g><title>`0x7FFCA897A16F (709 samples, 0.17%)</title><rect x="1.1641%" y="341" width="0.1682%" height="15" fill="rgb(250,166,2)" fg:x="4908" fg:w="709"/><text x="1.4141%" y="351.50"></text></g><g><title>`0x7FFCA897A176 (162 samples, 0.04%)</title><rect x="1.3322%" y="341" width="0.0384%" height="15" fill="rgb(242,216,29)" fg:x="5617" fg:w="162"/><text x="1.5822%" y="351.50"></text></g><g><title>`0x7FFCA899BF5E (930 samples, 0.22%)</title><rect x="1.1641%" y="357" width="0.2206%" height="15" fill="rgb(230,116,27)" fg:x="4908" fg:w="930"/><text x="1.4141%" y="367.50"></text></g><g><title>`0x7FFCA899B3C7 (1,332 samples, 0.32%)</title><rect x="1.0690%" y="373" width="0.3159%" height="15" fill="rgb(228,99,48)" fg:x="4507" fg:w="1332"/><text x="1.3190%" y="383.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::from_elem (1,376 samples, 0.33%)</title><rect x="1.0682%" y="453" width="0.3264%" height="15" fill="rgb(253,11,6)" fg:x="4504" fg:w="1376"/><text x="1.3182%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::spec_from_elem::impl$3::from_elem (1,375 samples, 0.33%)</title><rect x="1.0685%" y="437" width="0.3261%" height="15" fill="rgb(247,143,39)" fg:x="4505" fg:w="1375"/><text x="1.3185%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_zeroed_in (1,375 samples, 0.33%)</title><rect x="1.0685%" y="421" width="0.3261%" height="15" fill="rgb(236,97,10)" fg:x="4505" fg:w="1375"/><text x="1.3185%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_zeroed_in (1,375 samples, 0.33%)</title><rect x="1.0685%" y="405" width="0.3261%" height="15" fill="rgb(233,208,19)" fg:x="4505" fg:w="1375"/><text x="1.3185%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1,375 samples, 0.33%)</title><rect x="1.0685%" y="389" width="0.3261%" height="15" fill="rgb(216,164,2)" fg:x="4505" fg:w="1375"/><text x="1.3185%" y="399.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;memfs::memfs::MemFS,alloc::alloc::Global&gt;::new (1,417 samples, 0.34%)</title><rect x="1.0666%" y="485" width="0.3361%" height="15" fill="rgb(220,129,5)" fg:x="4497" fg:w="1417"/><text x="1.3166%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFS::new (1,417 samples, 0.34%)</title><rect x="1.0666%" y="469" width="0.3361%" height="15" fill="rgb(242,17,10)" fg:x="4497" fg:w="1417"/><text x="1.3166%" y="479.50"></text></g><g><title>`0x7FFCA8995BBB (105 samples, 0.02%)</title><rect x="1.4117%" y="197" width="0.0249%" height="15" fill="rgb(242,107,0)" fg:x="5952" fg:w="105"/><text x="1.6617%" y="207.50"></text></g><g><title>`0x7FFCA89744AF (167 samples, 0.04%)</title><rect x="1.4390%" y="165" width="0.0396%" height="15" fill="rgb(251,28,31)" fg:x="6067" fg:w="167"/><text x="1.6890%" y="175.50"></text></g><g><title>`0x7FFCA89947B1 (167 samples, 0.04%)</title><rect x="1.4390%" y="149" width="0.0396%" height="15" fill="rgb(233,223,10)" fg:x="6067" fg:w="167"/><text x="1.6890%" y="159.50"></text></g><g><title>`0x7FFCA8995B74 (167 samples, 0.04%)</title><rect x="1.4390%" y="133" width="0.0396%" height="15" fill="rgb(215,21,27)" fg:x="6067" fg:w="167"/><text x="1.6890%" y="143.50"></text></g><g><title>`0x7FFCA89965F6 (160 samples, 0.04%)</title><rect x="1.4406%" y="117" width="0.0379%" height="15" fill="rgb(232,23,21)" fg:x="6074" fg:w="160"/><text x="1.6906%" y="127.50"></text></g><g><title>`0x7FFCA898E412 (158 samples, 0.04%)</title><rect x="1.4411%" y="101" width="0.0375%" height="15" fill="rgb(244,5,23)" fg:x="6076" fg:w="158"/><text x="1.6911%" y="111.50"></text></g><g><title>`0x7FFCA898F35E (156 samples, 0.04%)</title><rect x="1.4416%" y="85" width="0.0370%" height="15" fill="rgb(226,81,46)" fg:x="6078" fg:w="156"/><text x="1.6916%" y="95.50"></text></g><g><title>`0x7FFCA899095C (156 samples, 0.04%)</title><rect x="1.4416%" y="69" width="0.0370%" height="15" fill="rgb(247,70,30)" fg:x="6078" fg:w="156"/><text x="1.6916%" y="79.50"></text></g><g><title>`0x7FFCA8979B1A (156 samples, 0.04%)</title><rect x="1.4416%" y="53" width="0.0370%" height="15" fill="rgb(212,68,19)" fg:x="6078" fg:w="156"/><text x="1.6916%" y="63.50"></text></g><g><title>`0x7FFCA8A0D8B4 (156 samples, 0.04%)</title><rect x="1.4416%" y="37" width="0.0370%" height="15" fill="rgb(240,187,13)" fg:x="6078" fg:w="156"/><text x="1.6916%" y="47.50"></text></g><g><title>`0x7FFCA8990F01 (173 samples, 0.04%)</title><rect x="1.4390%" y="181" width="0.0410%" height="15" fill="rgb(223,113,26)" fg:x="6067" fg:w="173"/><text x="1.6890%" y="191.50"></text></g><g><title>`0x7FFCA89744AF (216 samples, 0.05%)</title><rect x="1.4800%" y="165" width="0.0512%" height="15" fill="rgb(206,192,2)" fg:x="6240" fg:w="216"/><text x="1.7300%" y="175.50"></text></g><g><title>`0x7FFCA89947B1 (216 samples, 0.05%)</title><rect x="1.4800%" y="149" width="0.0512%" height="15" fill="rgb(241,108,4)" fg:x="6240" fg:w="216"/><text x="1.7300%" y="159.50"></text></g><g><title>`0x7FFCA8995B74 (216 samples, 0.05%)</title><rect x="1.4800%" y="133" width="0.0512%" height="15" fill="rgb(247,173,49)" fg:x="6240" fg:w="216"/><text x="1.7300%" y="143.50"></text></g><g><title>`0x7FFCA89965F6 (203 samples, 0.05%)</title><rect x="1.4831%" y="117" width="0.0481%" height="15" fill="rgb(224,114,35)" fg:x="6253" fg:w="203"/><text x="1.7331%" y="127.50"></text></g><g><title>`0x7FFCA898E412 (200 samples, 0.05%)</title><rect x="1.4838%" y="101" width="0.0474%" height="15" fill="rgb(245,159,27)" fg:x="6256" fg:w="200"/><text x="1.7338%" y="111.50"></text></g><g><title>`0x7FFCA898F35E (197 samples, 0.05%)</title><rect x="1.4845%" y="85" width="0.0467%" height="15" fill="rgb(245,172,44)" fg:x="6259" fg:w="197"/><text x="1.7345%" y="95.50"></text></g><g><title>`0x7FFCA899095C (197 samples, 0.05%)</title><rect x="1.4845%" y="69" width="0.0467%" height="15" fill="rgb(236,23,11)" fg:x="6259" fg:w="197"/><text x="1.7345%" y="79.50"></text></g><g><title>`0x7FFCA8979B1A (197 samples, 0.05%)</title><rect x="1.4845%" y="53" width="0.0467%" height="15" fill="rgb(205,117,38)" fg:x="6259" fg:w="197"/><text x="1.7345%" y="63.50"></text></g><g><title>`0x7FFCA8A0D8B4 (197 samples, 0.05%)</title><rect x="1.4845%" y="37" width="0.0467%" height="15" fill="rgb(237,72,25)" fg:x="6259" fg:w="197"/><text x="1.7345%" y="47.50"></text></g><g><title>`0x7FFCA8A176EF (391 samples, 0.09%)</title><rect x="1.4390%" y="197" width="0.0927%" height="15" fill="rgb(244,70,9)" fg:x="6067" fg:w="391"/><text x="1.6890%" y="207.50"></text></g><g><title>`0x7FFCA8990F76 (218 samples, 0.05%)</title><rect x="1.4800%" y="181" width="0.0517%" height="15" fill="rgb(217,125,39)" fg:x="6240" fg:w="218"/><text x="1.7300%" y="191.50"></text></g><g><title>`0x7FFCA89947B1 (526 samples, 0.12%)</title><rect x="1.4074%" y="213" width="0.1248%" height="15" fill="rgb(235,36,10)" fg:x="5934" fg:w="526"/><text x="1.6574%" y="223.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (528 samples, 0.13%)</title><rect x="1.4074%" y="245" width="0.1252%" height="15" fill="rgb(251,123,47)" fg:x="5934" fg:w="528"/><text x="1.6574%" y="255.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::alloc::dealloc (528 samples, 0.13%)</title><rect x="1.4074%" y="229" width="0.1252%" height="15" fill="rgb(221,13,13)" fg:x="5934" fg:w="528"/><text x="1.6574%" y="239.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::sync::Weak&lt;memfs::memfs::MemFS,ref$ (536 samples, 0.13%)</title><rect x="1.4057%" y="437" width="0.1271%" height="15" fill="rgb(238,131,9)" fg:x="5927" fg:w="536"/><text x="1.6557%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$46::drop(alloc::sync::Weak&lt;memfs::memfs::MemFS,ref$ (536 samples, 0.13%)</title><rect x="1.4057%" y="421" width="0.1271%" height="15" fill="rgb(211,50,8)" fg:x="5927" fg:w="536"/><text x="1.6557%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Weak&lt;memfs::memfs::MemFS,ref$&lt;alloc::alloc::Global&gt; &gt;::inner (536 samples, 0.13%)</title><rect x="1.4057%" y="405" width="0.1271%" height="15" fill="rgb(245,182,24)" fg:x="5927" fg:w="536"/><text x="1.6557%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::rc::is_dangling(alloc::sync::ArcInner (536 samples, 0.13%)</title><rect x="1.4057%" y="389" width="0.1271%" height="15" fill="rgb(242,14,37)" fg:x="5927" fg:w="536"/><text x="1.6557%" y="399.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::drop_slow&lt;crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt; (536 samples, 0.13%)</title><rect x="1.4057%" y="373" width="0.1271%" height="15" fill="rgb(246,228,12)" fg:x="5927" fg:w="536"/><text x="1.6557%" y="383.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec (533 samples, 0.13%)</title><rect x="1.4065%" y="357" width="0.1264%" height="15" fill="rgb(213,55,15)" fg:x="5930" fg:w="533"/><text x="1.6565%" y="367.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`crossbeam_queue::array_queue::impl$5::drop(crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec (533 samples, 0.13%)</title><rect x="1.4065%" y="341" width="0.1264%" height="15" fill="rgb(209,9,3)" fg:x="5930" fg:w="533"/><text x="1.6565%" y="351.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::mem::maybe_uninit::MaybeUninit&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;::assume_init_drop (530 samples, 0.13%)</title><rect x="1.4072%" y="325" width="0.1257%" height="15" fill="rgb(230,59,30)" fg:x="5933" fg:w="530"/><text x="1.6572%" y="335.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::vec::Vec (530 samples, 0.13%)</title><rect x="1.4072%" y="309" width="0.1257%" height="15" fill="rgb(209,121,21)" fg:x="5933" fg:w="530"/><text x="1.6572%" y="319.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (530 samples, 0.13%)</title><rect x="1.4072%" y="293" width="0.1257%" height="15" fill="rgb(220,109,13)" fg:x="5933" fg:w="530"/><text x="1.6572%" y="303.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (529 samples, 0.13%)</title><rect x="1.4074%" y="277" width="0.1255%" height="15" fill="rgb(232,18,1)" fg:x="5934" fg:w="529"/><text x="1.6574%" y="287.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (529 samples, 0.13%)</title><rect x="1.4074%" y="261" width="0.1255%" height="15" fill="rgb(215,41,42)" fg:x="5934" fg:w="529"/><text x="1.6574%" y="271.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;memfs::memfs::MemFS,alloc::alloc::Global&gt;::drop_slow&lt;memfs::memfs::MemFS,alloc::alloc::Global&gt; (545 samples, 0.13%)</title><rect x="1.4057%" y="453" width="0.1293%" height="15" fill="rgb(224,123,36)" fg:x="5927" fg:w="545"/><text x="1.6557%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::sync::Arc (546 samples, 0.13%)</title><rect x="1.4057%" y="485" width="0.1295%" height="15" fill="rgb(240,125,3)" fg:x="5927" fg:w="546"/><text x="1.6557%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$37::drop(alloc::sync::Arc (546 samples, 0.13%)</title><rect x="1.4057%" y="469" width="0.1295%" height="15" fill="rgb(205,98,50)" fg:x="5927" fg:w="546"/><text x="1.6557%" y="479.50"></text></g><g><title>`0x7FFCA6480905 (61 samples, 0.01%)</title><rect x="1.5476%" y="389" width="0.0145%" height="15" fill="rgb(205,185,37)" fg:x="6525" fg:w="61"/><text x="1.7976%" y="399.50"></text></g><g><title>`0x7FFCA8A0D6D4 (61 samples, 0.01%)</title><rect x="1.5476%" y="373" width="0.0145%" height="15" fill="rgb(238,207,15)" fg:x="6525" fg:w="61"/><text x="1.7976%" y="383.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;std::thread::Packet&lt;usize&gt; &gt; &gt;::as_ref (87 samples, 0.02%)</title><rect x="1.5452%" y="405" width="0.0206%" height="15" fill="rgb(213,199,42)" fg:x="6515" fg:w="87"/><text x="1.7952%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::get_mut (90 samples, 0.02%)</title><rect x="1.5447%" y="453" width="0.0213%" height="15" fill="rgb(235,201,11)" fg:x="6513" fg:w="90"/><text x="1.7947%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::is_unique (90 samples, 0.02%)</title><rect x="1.5447%" y="437" width="0.0213%" height="15" fill="rgb(207,46,11)" fg:x="6513" fg:w="90"/><text x="1.7947%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::inner (88 samples, 0.02%)</title><rect x="1.5452%" y="421" width="0.0209%" height="15" fill="rgb(241,35,35)" fg:x="6515" fg:w="88"/><text x="1.7952%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::JoinHandle&lt;usize&gt;::join(std::thread::JoinHandle (98 samples, 0.02%)</title><rect x="1.5447%" y="485" width="0.0232%" height="15" fill="rgb(243,32,47)" fg:x="6513" fg:w="98"/><text x="1.7947%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::JoinInner&lt;usize&gt;::join(std::thread::JoinInner (98 samples, 0.02%)</title><rect x="1.5447%" y="469" width="0.0232%" height="15" fill="rgb(247,202,23)" fg:x="6513" fg:w="98"/><text x="1.7947%" y="479.50"></text></g><g><title>`0x7FFCA648B43F (708 samples, 0.17%)</title><rect x="1.5730%" y="389" width="0.1679%" height="15" fill="rgb(219,102,11)" fg:x="6632" fg:w="708"/><text x="1.8230%" y="399.50"></text></g><g><title>`0x7FFCA8A0ED24 (705 samples, 0.17%)</title><rect x="1.5737%" y="373" width="0.1672%" height="15" fill="rgb(243,110,44)" fg:x="6635" fg:w="705"/><text x="1.8237%" y="383.50"></text></g><g><title>`0x7FFCA7F1B91D (711 samples, 0.17%)</title><rect x="1.5725%" y="405" width="0.1686%" height="15" fill="rgb(222,74,54)" fg:x="6630" fg:w="711"/><text x="1.8225%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::pal::windows::thread::Thread::new (722 samples, 0.17%)</title><rect x="1.5718%" y="421" width="0.1712%" height="15" fill="rgb(216,99,12)" fg:x="6627" fg:w="722"/><text x="1.8218%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::spawn (742 samples, 0.18%)</title><rect x="1.5680%" y="485" width="0.1760%" height="15" fill="rgb(226,22,26)" fg:x="6611" fg:w="742"/><text x="1.8180%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::result::Result&lt;std::thread::JoinHandle&lt;usize&gt;,std::io::error::Error&gt; &gt;::expect(enum2$&lt;core::result::Result&lt;std::thread::JoinHandle&lt;usize&gt;,std::io::error::Error&gt; &gt;, ref$ (742 samples, 0.18%)</title><rect x="1.5680%" y="469" width="0.1760%" height="15" fill="rgb(217,163,10)" fg:x="6611" fg:w="742"/><text x="1.8180%" y="479.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::Builder::spawn_unchecked&lt;test_memfs_concurrency::helper_all_should_succeed_when_read_and_write_from_single_file_through_multiple_file_descriptors::closure_env$0,usize&gt; (741 samples, 0.18%)</title><rect x="1.5682%" y="453" width="0.1757%" height="15" fill="rgb(213,25,53)" fg:x="6612" fg:w="741"/><text x="1.8182%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::Builder::spawn_unchecked_(std::thread::Builder, test_memfs_concurrency::helper_all_should_succeed_when_read_and_write_from_single_file_through_multiple_file_descriptors::closure_env$0, enum2$&lt;core::option::Option&lt;alloc::sync::Arc (740 samples, 0.18%)</title><rect x="1.5685%" y="437" width="0.1755%" height="15" fill="rgb(252,105,26)" fg:x="6613" fg:w="740"/><text x="1.8185%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ops::function::FnOnce::call_once&lt;test_memfs_concurrency::test_throughput_measure_on_reads_and_writes_on_single_file::closure_env$0,tuple$&lt;&gt; &gt; (2,862 samples, 0.68%)</title><rect x="1.0659%" y="581" width="0.6788%" height="15" fill="rgb(220,39,43)" fg:x="4494" fg:w="2862"/><text x="1.3159%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::test_throughput_measure_on_reads_and_writes_on_single_file::closure$0 (2,862 samples, 0.68%)</title><rect x="1.0659%" y="565" width="0.6788%" height="15" fill="rgb(229,68,48)" fg:x="4494" fg:w="2862"/><text x="1.3159%" y="575.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::test_throughput_measure_on_reads_and_writes_on_single_file (2,862 samples, 0.68%)</title><rect x="1.0659%" y="549" width="0.6788%" height="15" fill="rgb(252,8,32)" fg:x="4494" fg:w="2862"/><text x="1.3159%" y="559.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::throughput_reporter(uint128_t (*) (2,862 samples, 0.68%)</title><rect x="1.0659%" y="533" width="0.6788%" height="15" fill="rgb(223,20,43)" fg:x="4494" fg:w="2862"/><text x="1.3159%" y="543.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ops::function::Fn::call(uint128_t (**) (2,860 samples, 0.68%)</title><rect x="1.0663%" y="517" width="0.6783%" height="15" fill="rgb(229,81,49)" fg:x="4496" fg:w="2860"/><text x="1.3163%" y="527.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::helper_all_should_succeed_when_read_and_write_from_single_file_through_multiple_file_descriptors (2,860 samples, 0.68%)</title><rect x="1.0663%" y="501" width="0.6783%" height="15" fill="rgb(236,28,36)" fg:x="4496" fg:w="2860"/><text x="1.3163%" y="511.50"></text></g><g><title>`0x7FFCA899B90B (333 samples, 0.08%)</title><rect x="1.7537%" y="357" width="0.0790%" height="15" fill="rgb(249,185,26)" fg:x="7394" fg:w="333"/><text x="2.0037%" y="367.50"></text></g><g><title>`0x7FFCA899BEDA (44 samples, 0.01%)</title><rect x="1.8350%" y="357" width="0.0104%" height="15" fill="rgb(249,174,33)" fg:x="7737" fg:w="44"/><text x="2.0850%" y="367.50"></text></g><g><title>`0x7FFCA897A16F (668 samples, 0.16%)</title><rect x="1.8455%" y="341" width="0.1584%" height="15" fill="rgb(233,201,37)" fg:x="7781" fg:w="668"/><text x="2.0955%" y="351.50"></text></g><g><title>`0x7FFCA897A176 (143 samples, 0.03%)</title><rect x="2.0039%" y="341" width="0.0339%" height="15" fill="rgb(221,78,26)" fg:x="8449" fg:w="143"/><text x="2.2539%" y="351.50"></text></g><g><title>`0x7FFCA897A364 (43 samples, 0.01%)</title><rect x="2.0383%" y="341" width="0.0102%" height="15" fill="rgb(250,127,30)" fg:x="8594" fg:w="43"/><text x="2.2883%" y="351.50"></text></g><g><title>`0x7FFCA897A4EB (43 samples, 0.01%)</title><rect x="2.0383%" y="325" width="0.0102%" height="15" fill="rgb(230,49,44)" fg:x="8594" fg:w="43"/><text x="2.2883%" y="335.50"></text></g><g><title>`0x7FFCA899BF5E (869 samples, 0.21%)</title><rect x="1.8455%" y="357" width="0.2061%" height="15" fill="rgb(229,67,23)" fg:x="7781" fg:w="869"/><text x="2.0955%" y="367.50"></text></g><g><title>`0x7FFCA899B3C7 (1,281 samples, 0.30%)</title><rect x="1.7482%" y="373" width="0.3038%" height="15" fill="rgb(249,83,47)" fg:x="7371" fg:w="1281"/><text x="1.9982%" y="383.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::from_elem (1,330 samples, 0.32%)</title><rect x="1.7468%" y="453" width="0.3154%" height="15" fill="rgb(215,43,3)" fg:x="7365" fg:w="1330"/><text x="1.9968%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::spec_from_elem::impl$3::from_elem (1,328 samples, 0.31%)</title><rect x="1.7473%" y="437" width="0.3150%" height="15" fill="rgb(238,154,13)" fg:x="7367" fg:w="1328"/><text x="1.9973%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_zeroed_in (1,328 samples, 0.31%)</title><rect x="1.7473%" y="421" width="0.3150%" height="15" fill="rgb(219,56,2)" fg:x="7367" fg:w="1328"/><text x="1.9973%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_zeroed_in (1,328 samples, 0.31%)</title><rect x="1.7473%" y="405" width="0.3150%" height="15" fill="rgb(233,0,4)" fg:x="7367" fg:w="1328"/><text x="1.9973%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1,328 samples, 0.31%)</title><rect x="1.7473%" y="389" width="0.3150%" height="15" fill="rgb(235,30,7)" fg:x="7367" fg:w="1328"/><text x="1.9973%" y="399.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;memfs::memfs::MemFS,alloc::alloc::Global&gt;::new (1,370 samples, 0.32%)</title><rect x="1.7456%" y="485" width="0.3249%" height="15" fill="rgb(250,79,13)" fg:x="7360" fg:w="1370"/><text x="1.9956%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFS::new (1,370 samples, 0.32%)</title><rect x="1.7456%" y="469" width="0.3249%" height="15" fill="rgb(211,146,34)" fg:x="7360" fg:w="1370"/><text x="1.9956%" y="479.50"></text></g><g><title>`0x7FFCA8995BBB (96 samples, 0.02%)</title><rect x="2.0810%" y="197" width="0.0228%" height="15" fill="rgb(228,22,38)" fg:x="8774" fg:w="96"/><text x="2.3310%" y="207.50"></text></g><g><title>`0x7FFCA899095C (228 samples, 0.05%)</title><rect x="2.1097%" y="69" width="0.0541%" height="15" fill="rgb(235,168,5)" fg:x="8895" fg:w="228"/><text x="2.3597%" y="79.50"></text></g><g><title>`0x7FFCA8979B1A (228 samples, 0.05%)</title><rect x="2.1097%" y="53" width="0.0541%" height="15" fill="rgb(221,155,16)" fg:x="8895" fg:w="228"/><text x="2.3597%" y="63.50"></text></g><g><title>`0x7FFCA8A0D8B4 (228 samples, 0.05%)</title><rect x="2.1097%" y="37" width="0.0541%" height="15" fill="rgb(215,215,53)" fg:x="8895" fg:w="228"/><text x="2.3597%" y="47.50"></text></g><g><title>`0x7FFCA898E412 (232 samples, 0.06%)</title><rect x="2.1090%" y="101" width="0.0550%" height="15" fill="rgb(223,4,10)" fg:x="8892" fg:w="232"/><text x="2.3590%" y="111.50"></text></g><g><title>`0x7FFCA898F35E (229 samples, 0.05%)</title><rect x="2.1097%" y="85" width="0.0543%" height="15" fill="rgb(234,103,6)" fg:x="8895" fg:w="229"/><text x="2.3597%" y="95.50"></text></g><g><title>`0x7FFCA89744AF (243 samples, 0.06%)</title><rect x="2.1066%" y="165" width="0.0576%" height="15" fill="rgb(227,97,0)" fg:x="8882" fg:w="243"/><text x="2.3566%" y="175.50"></text></g><g><title>`0x7FFCA89947B1 (243 samples, 0.06%)</title><rect x="2.1066%" y="149" width="0.0576%" height="15" fill="rgb(234,150,53)" fg:x="8882" fg:w="243"/><text x="2.3566%" y="159.50"></text></g><g><title>`0x7FFCA8995B74 (243 samples, 0.06%)</title><rect x="2.1066%" y="133" width="0.0576%" height="15" fill="rgb(228,201,54)" fg:x="8882" fg:w="243"/><text x="2.3566%" y="143.50"></text></g><g><title>`0x7FFCA89965F6 (236 samples, 0.06%)</title><rect x="2.1083%" y="117" width="0.0560%" height="15" fill="rgb(222,22,37)" fg:x="8889" fg:w="236"/><text x="2.3583%" y="127.50"></text></g><g><title>`0x7FFCA8990F01 (248 samples, 0.06%)</title><rect x="2.1066%" y="181" width="0.0588%" height="15" fill="rgb(237,53,32)" fg:x="8882" fg:w="248"/><text x="2.3566%" y="191.50"></text></g><g><title>`0x7FFCA89744AF (121 samples, 0.03%)</title><rect x="2.1654%" y="165" width="0.0287%" height="15" fill="rgb(233,25,53)" fg:x="9130" fg:w="121"/><text x="2.4154%" y="175.50"></text></g><g><title>`0x7FFCA89947B1 (121 samples, 0.03%)</title><rect x="2.1654%" y="149" width="0.0287%" height="15" fill="rgb(210,40,34)" fg:x="9130" fg:w="121"/><text x="2.4154%" y="159.50"></text></g><g><title>`0x7FFCA8995B74 (121 samples, 0.03%)</title><rect x="2.1654%" y="133" width="0.0287%" height="15" fill="rgb(241,220,44)" fg:x="9130" fg:w="121"/><text x="2.4154%" y="143.50"></text></g><g><title>`0x7FFCA89965F6 (115 samples, 0.03%)</title><rect x="2.1668%" y="117" width="0.0273%" height="15" fill="rgb(235,28,35)" fg:x="9136" fg:w="115"/><text x="2.4168%" y="127.50"></text></g><g><title>`0x7FFCA898E412 (113 samples, 0.03%)</title><rect x="2.1673%" y="101" width="0.0268%" height="15" fill="rgb(210,56,17)" fg:x="9138" fg:w="113"/><text x="2.4173%" y="111.50"></text></g><g><title>`0x7FFCA898F35E (113 samples, 0.03%)</title><rect x="2.1673%" y="85" width="0.0268%" height="15" fill="rgb(224,130,29)" fg:x="9138" fg:w="113"/><text x="2.4173%" y="95.50"></text></g><g><title>`0x7FFCA899095C (113 samples, 0.03%)</title><rect x="2.1673%" y="69" width="0.0268%" height="15" fill="rgb(235,212,8)" fg:x="9138" fg:w="113"/><text x="2.4173%" y="79.50"></text></g><g><title>`0x7FFCA8979B1A (113 samples, 0.03%)</title><rect x="2.1673%" y="53" width="0.0268%" height="15" fill="rgb(223,33,50)" fg:x="9138" fg:w="113"/><text x="2.4173%" y="63.50"></text></g><g><title>`0x7FFCA8A0D8B4 (113 samples, 0.03%)</title><rect x="2.1673%" y="37" width="0.0268%" height="15" fill="rgb(219,149,13)" fg:x="9138" fg:w="113"/><text x="2.4173%" y="47.50"></text></g><g><title>`0x7FFCA8A176EF (370 samples, 0.09%)</title><rect x="2.1066%" y="197" width="0.0878%" height="15" fill="rgb(250,156,29)" fg:x="8882" fg:w="370"/><text x="2.3566%" y="207.50"></text></g><g><title>`0x7FFCA8990F76 (122 samples, 0.03%)</title><rect x="2.1654%" y="181" width="0.0289%" height="15" fill="rgb(216,193,19)" fg:x="9130" fg:w="122"/><text x="2.4154%" y="191.50"></text></g><g><title>`0x7FFCA89947B1 (491 samples, 0.12%)</title><rect x="2.0784%" y="213" width="0.1165%" height="15" fill="rgb(216,135,14)" fg:x="8763" fg:w="491"/><text x="2.3284%" y="223.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::drop_slow&lt;crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt; (495 samples, 0.12%)</title><rect x="2.0781%" y="373" width="0.1174%" height="15" fill="rgb(241,47,5)" fg:x="8762" fg:w="495"/><text x="2.3281%" y="383.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec (495 samples, 0.12%)</title><rect x="2.0781%" y="357" width="0.1174%" height="15" fill="rgb(233,42,35)" fg:x="8762" fg:w="495"/><text x="2.3281%" y="367.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`crossbeam_queue::array_queue::impl$5::drop(crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec (495 samples, 0.12%)</title><rect x="2.0781%" y="341" width="0.1174%" height="15" fill="rgb(231,13,6)" fg:x="8762" fg:w="495"/><text x="2.3281%" y="351.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::mem::maybe_uninit::MaybeUninit&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;::assume_init_drop (494 samples, 0.12%)</title><rect x="2.0784%" y="325" width="0.1172%" height="15" fill="rgb(207,181,40)" fg:x="8763" fg:w="494"/><text x="2.3284%" y="335.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::vec::Vec (494 samples, 0.12%)</title><rect x="2.0784%" y="309" width="0.1172%" height="15" fill="rgb(254,173,49)" fg:x="8763" fg:w="494"/><text x="2.3284%" y="319.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (494 samples, 0.12%)</title><rect x="2.0784%" y="293" width="0.1172%" height="15" fill="rgb(221,1,38)" fg:x="8763" fg:w="494"/><text x="2.3284%" y="303.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (494 samples, 0.12%)</title><rect x="2.0784%" y="277" width="0.1172%" height="15" fill="rgb(206,124,46)" fg:x="8763" fg:w="494"/><text x="2.3284%" y="287.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (494 samples, 0.12%)</title><rect x="2.0784%" y="261" width="0.1172%" height="15" fill="rgb(249,21,11)" fg:x="8763" fg:w="494"/><text x="2.3284%" y="271.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (494 samples, 0.12%)</title><rect x="2.0784%" y="245" width="0.1172%" height="15" fill="rgb(222,201,40)" fg:x="8763" fg:w="494"/><text x="2.3284%" y="255.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::alloc::dealloc (494 samples, 0.12%)</title><rect x="2.0784%" y="229" width="0.1172%" height="15" fill="rgb(235,61,29)" fg:x="8763" fg:w="494"/><text x="2.3284%" y="239.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::sync::Weak&lt;memfs::memfs::MemFS,ref$ (496 samples, 0.12%)</title><rect x="2.0781%" y="437" width="0.1176%" height="15" fill="rgb(219,207,3)" fg:x="8762" fg:w="496"/><text x="2.3281%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$46::drop(alloc::sync::Weak&lt;memfs::memfs::MemFS,ref$ (496 samples, 0.12%)</title><rect x="2.0781%" y="421" width="0.1176%" height="15" fill="rgb(222,56,46)" fg:x="8762" fg:w="496"/><text x="2.3281%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Weak&lt;memfs::memfs::MemFS,ref$&lt;alloc::alloc::Global&gt; &gt;::inner (496 samples, 0.12%)</title><rect x="2.0781%" y="405" width="0.1176%" height="15" fill="rgb(239,76,54)" fg:x="8762" fg:w="496"/><text x="2.3281%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::rc::is_dangling(alloc::sync::ArcInner (496 samples, 0.12%)</title><rect x="2.0781%" y="389" width="0.1176%" height="15" fill="rgb(231,124,27)" fg:x="8762" fg:w="496"/><text x="2.3281%" y="399.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::sync::Arc (508 samples, 0.12%)</title><rect x="2.0781%" y="485" width="0.1205%" height="15" fill="rgb(249,195,6)" fg:x="8762" fg:w="508"/><text x="2.3281%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$37::drop(alloc::sync::Arc (508 samples, 0.12%)</title><rect x="2.0781%" y="469" width="0.1205%" height="15" fill="rgb(237,174,47)" fg:x="8762" fg:w="508"/><text x="2.3281%" y="479.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;memfs::memfs::MemFS,alloc::alloc::Global&gt;::drop_slow&lt;memfs::memfs::MemFS,alloc::alloc::Global&gt; (508 samples, 0.12%)</title><rect x="2.0781%" y="453" width="0.1205%" height="15" fill="rgb(206,201,31)" fg:x="8762" fg:w="508"/><text x="2.3281%" y="463.50"></text></g><g><title>`0x7FFCA6480905 (47 samples, 0.01%)</title><rect x="2.2095%" y="389" width="0.0111%" height="15" fill="rgb(231,57,52)" fg:x="9316" fg:w="47"/><text x="2.4595%" y="399.50"></text></g><g><title>`0x7FFCA8A0D6D4 (46 samples, 0.01%)</title><rect x="2.2098%" y="373" width="0.0109%" height="15" fill="rgb(248,177,22)" fg:x="9317" fg:w="46"/><text x="2.4598%" y="383.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::get_mut (78 samples, 0.02%)</title><rect x="2.2079%" y="453" width="0.0185%" height="15" fill="rgb(215,211,37)" fg:x="9309" fg:w="78"/><text x="2.4579%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::is_unique (78 samples, 0.02%)</title><rect x="2.2079%" y="437" width="0.0185%" height="15" fill="rgb(241,128,51)" fg:x="9309" fg:w="78"/><text x="2.4579%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::inner (77 samples, 0.02%)</title><rect x="2.2081%" y="421" width="0.0183%" height="15" fill="rgb(227,165,31)" fg:x="9310" fg:w="77"/><text x="2.4581%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;std::thread::Packet&lt;usize&gt; &gt; &gt;::as_ref (77 samples, 0.02%)</title><rect x="2.2081%" y="405" width="0.0183%" height="15" fill="rgb(228,167,24)" fg:x="9310" fg:w="77"/><text x="2.4581%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::JoinHandle&lt;usize&gt;::join(std::thread::JoinHandle (83 samples, 0.02%)</title><rect x="2.2079%" y="485" width="0.0197%" height="15" fill="rgb(228,143,12)" fg:x="9309" fg:w="83"/><text x="2.4579%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::JoinInner&lt;usize&gt;::join(std::thread::JoinInner (83 samples, 0.02%)</title><rect x="2.2079%" y="469" width="0.0197%" height="15" fill="rgb(249,149,8)" fg:x="9309" fg:w="83"/><text x="2.4579%" y="479.50"></text></g><g><title>`0x7FFCA7F1B91D (1,049 samples, 0.25%)</title><rect x="2.2325%" y="405" width="0.2488%" height="15" fill="rgb(243,35,44)" fg:x="9413" fg:w="1049"/><text x="2.4825%" y="415.50"></text></g><g><title>`0x7FFCA648B43F (1,047 samples, 0.25%)</title><rect x="2.2330%" y="389" width="0.2483%" height="15" fill="rgb(246,89,9)" fg:x="9415" fg:w="1047"/><text x="2.4830%" y="399.50"></text></g><g><title>`0x7FFCA8A0ED24 (1,045 samples, 0.25%)</title><rect x="2.2335%" y="373" width="0.2478%" height="15" fill="rgb(233,213,13)" fg:x="9417" fg:w="1045"/><text x="2.4835%" y="383.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::pal::windows::thread::Thread::new (1,065 samples, 0.25%)</title><rect x="2.2318%" y="421" width="0.2526%" height="15" fill="rgb(233,141,41)" fg:x="9410" fg:w="1065"/><text x="2.4818%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::spawn (1,106 samples, 0.26%)</title><rect x="2.2276%" y="485" width="0.2623%" height="15" fill="rgb(239,167,4)" fg:x="9392" fg:w="1106"/><text x="2.4776%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::result::Result&lt;std::thread::JoinHandle&lt;usize&gt;,std::io::error::Error&gt; &gt;::expect(enum2$&lt;core::result::Result&lt;std::thread::JoinHandle&lt;usize&gt;,std::io::error::Error&gt; &gt;, ref$ (1,106 samples, 0.26%)</title><rect x="2.2276%" y="469" width="0.2623%" height="15" fill="rgb(209,217,16)" fg:x="9392" fg:w="1106"/><text x="2.4776%" y="479.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::Builder::spawn_unchecked&lt;test_memfs_concurrency::helper_all_should_succeed_when_reading_from_single_file_through_multiple_file_descriptors::closure_env$0,usize&gt; (1,103 samples, 0.26%)</title><rect x="2.2283%" y="453" width="0.2616%" height="15" fill="rgb(219,88,35)" fg:x="9395" fg:w="1103"/><text x="2.4783%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::Builder::spawn_unchecked_(std::thread::Builder, test_memfs_concurrency::helper_all_should_succeed_when_reading_from_single_file_through_multiple_file_descriptors::closure_env$0, enum2$&lt;core::option::Option&lt;alloc::sync::Arc (1,101 samples, 0.26%)</title><rect x="2.2288%" y="437" width="0.2611%" height="15" fill="rgb(220,193,23)" fg:x="9397" fg:w="1101"/><text x="2.4788%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ops::function::FnOnce::call_once&lt;test_memfs_concurrency::test_throughput_measure_on_reads_on_single_file::closure_env$0,tuple$&lt;&gt; &gt; (3,143 samples, 0.75%)</title><rect x="1.7447%" y="581" width="0.7454%" height="15" fill="rgb(230,90,52)" fg:x="7356" fg:w="3143"/><text x="1.9947%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::test_throughput_measure_on_reads_on_single_file::closure$0 (3,143 samples, 0.75%)</title><rect x="1.7447%" y="565" width="0.7454%" height="15" fill="rgb(252,106,19)" fg:x="7356" fg:w="3143"/><text x="1.9947%" y="575.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::test_throughput_measure_on_reads_on_single_file (3,143 samples, 0.75%)</title><rect x="1.7447%" y="549" width="0.7454%" height="15" fill="rgb(206,74,20)" fg:x="7356" fg:w="3143"/><text x="1.9947%" y="559.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::throughput_reporter(uint128_t (*) (3,143 samples, 0.75%)</title><rect x="1.7447%" y="533" width="0.7454%" height="15" fill="rgb(230,138,44)" fg:x="7356" fg:w="3143"/><text x="1.9947%" y="543.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ops::function::Fn::call(uint128_t (**) (3,142 samples, 0.75%)</title><rect x="1.7449%" y="517" width="0.7452%" height="15" fill="rgb(235,182,43)" fg:x="7357" fg:w="3142"/><text x="1.9949%" y="527.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::helper_all_should_succeed_when_reading_from_single_file_through_multiple_file_descriptors (3,142 samples, 0.75%)</title><rect x="1.7449%" y="501" width="0.7452%" height="15" fill="rgb(242,16,51)" fg:x="7357" fg:w="3142"/><text x="1.9949%" y="511.50"></text></g><g><title>`0x7FFCA899B90B (345 samples, 0.08%)</title><rect x="2.4989%" y="357" width="0.0818%" height="15" fill="rgb(248,9,4)" fg:x="10536" fg:w="345"/><text x="2.7489%" y="367.50"></text></g><g><title>`0x7FFCA899BEDA (54 samples, 0.01%)</title><rect x="2.5824%" y="357" width="0.0128%" height="15" fill="rgb(210,31,22)" fg:x="10888" fg:w="54"/><text x="2.8324%" y="367.50"></text></g><g><title>`0x7FFCA8990B31 (53 samples, 0.01%)</title><rect x="2.5826%" y="341" width="0.0126%" height="15" fill="rgb(239,54,39)" fg:x="10889" fg:w="53"/><text x="2.8326%" y="351.50"></text></g><g><title>`0x7FFCA897A16F (665 samples, 0.16%)</title><rect x="2.5957%" y="341" width="0.1577%" height="15" fill="rgb(230,99,41)" fg:x="10944" fg:w="665"/><text x="2.8457%" y="351.50"></text></g><g><title>`0x7FFCA897A176 (146 samples, 0.03%)</title><rect x="2.7534%" y="341" width="0.0346%" height="15" fill="rgb(253,106,12)" fg:x="11609" fg:w="146"/><text x="3.0034%" y="351.50"></text></g><g><title>`0x7FFCA897A364 (43 samples, 0.01%)</title><rect x="2.7883%" y="341" width="0.0102%" height="15" fill="rgb(213,46,41)" fg:x="11756" fg:w="43"/><text x="3.0383%" y="351.50"></text></g><g><title>`0x7FFCA897A4EB (43 samples, 0.01%)</title><rect x="2.7883%" y="325" width="0.0102%" height="15" fill="rgb(215,133,35)" fg:x="11756" fg:w="43"/><text x="3.0383%" y="335.50"></text></g><g><title>`0x7FFCA899B3C7 (1,303 samples, 0.31%)</title><rect x="2.4927%" y="373" width="0.3090%" height="15" fill="rgb(213,28,5)" fg:x="10510" fg:w="1303"/><text x="2.7427%" y="383.50"></text></g><g><title>`0x7FFCA899BF5E (869 samples, 0.21%)</title><rect x="2.5957%" y="357" width="0.2061%" height="15" fill="rgb(215,77,49)" fg:x="10944" fg:w="869"/><text x="2.8457%" y="367.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::from_elem (1,342 samples, 0.32%)</title><rect x="2.4920%" y="453" width="0.3183%" height="15" fill="rgb(248,100,22)" fg:x="10507" fg:w="1342"/><text x="2.7420%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::spec_from_elem::impl$3::from_elem (1,342 samples, 0.32%)</title><rect x="2.4920%" y="437" width="0.3183%" height="15" fill="rgb(208,67,9)" fg:x="10507" fg:w="1342"/><text x="2.7420%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_zeroed_in (1,342 samples, 0.32%)</title><rect x="2.4920%" y="421" width="0.3183%" height="15" fill="rgb(219,133,21)" fg:x="10507" fg:w="1342"/><text x="2.7420%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_zeroed_in (1,342 samples, 0.32%)</title><rect x="2.4920%" y="405" width="0.3183%" height="15" fill="rgb(246,46,29)" fg:x="10507" fg:w="1342"/><text x="2.7420%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1,342 samples, 0.32%)</title><rect x="2.4920%" y="389" width="0.3183%" height="15" fill="rgb(246,185,52)" fg:x="10507" fg:w="1342"/><text x="2.7420%" y="399.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;memfs::memfs::MemFS,alloc::alloc::Global&gt;::new (1,382 samples, 0.33%)</title><rect x="2.4906%" y="485" width="0.3278%" height="15" fill="rgb(252,136,11)" fg:x="10501" fg:w="1382"/><text x="2.7406%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFS::new (1,382 samples, 0.33%)</title><rect x="2.4906%" y="469" width="0.3278%" height="15" fill="rgb(219,138,53)" fg:x="10501" fg:w="1382"/><text x="2.7406%" y="479.50"></text></g><g><title>`0x7FFCA8995BBB (88 samples, 0.02%)</title><rect x="2.8312%" y="197" width="0.0209%" height="15" fill="rgb(211,51,23)" fg:x="11937" fg:w="88"/><text x="3.0812%" y="207.50"></text></g><g><title>`0x7FFCA899095C (267 samples, 0.06%)</title><rect x="2.8587%" y="69" width="0.0633%" height="15" fill="rgb(247,221,28)" fg:x="12053" fg:w="267"/><text x="3.1087%" y="79.50"></text></g><g><title>`0x7FFCA8979B1A (267 samples, 0.06%)</title><rect x="2.8587%" y="53" width="0.0633%" height="15" fill="rgb(251,222,45)" fg:x="12053" fg:w="267"/><text x="3.1087%" y="63.50"></text></g><g><title>`0x7FFCA8A0D8B4 (267 samples, 0.06%)</title><rect x="2.8587%" y="37" width="0.0633%" height="15" fill="rgb(217,162,53)" fg:x="12053" fg:w="267"/><text x="3.1087%" y="47.50"></text></g><g><title>`0x7FFCA8995B74 (278 samples, 0.07%)</title><rect x="2.8563%" y="133" width="0.0659%" height="15" fill="rgb(229,93,14)" fg:x="12043" fg:w="278"/><text x="3.1063%" y="143.50"></text></g><g><title>`0x7FFCA89965F6 (274 samples, 0.06%)</title><rect x="2.8573%" y="117" width="0.0650%" height="15" fill="rgb(209,67,49)" fg:x="12047" fg:w="274"/><text x="3.1073%" y="127.50"></text></g><g><title>`0x7FFCA898E412 (270 samples, 0.06%)</title><rect x="2.8582%" y="101" width="0.0640%" height="15" fill="rgb(213,87,29)" fg:x="12051" fg:w="270"/><text x="3.1082%" y="111.50"></text></g><g><title>`0x7FFCA898F35E (269 samples, 0.06%)</title><rect x="2.8585%" y="85" width="0.0638%" height="15" fill="rgb(205,151,52)" fg:x="12052" fg:w="269"/><text x="3.1085%" y="95.50"></text></g><g><title>`0x7FFCA89744AF (279 samples, 0.07%)</title><rect x="2.8563%" y="165" width="0.0662%" height="15" fill="rgb(253,215,39)" fg:x="12043" fg:w="279"/><text x="3.1063%" y="175.50"></text></g><g><title>`0x7FFCA89947B1 (279 samples, 0.07%)</title><rect x="2.8563%" y="149" width="0.0662%" height="15" fill="rgb(221,220,41)" fg:x="12043" fg:w="279"/><text x="3.1063%" y="159.50"></text></g><g><title>`0x7FFCA8990F01 (283 samples, 0.07%)</title><rect x="2.8563%" y="181" width="0.0671%" height="15" fill="rgb(218,133,21)" fg:x="12043" fg:w="283"/><text x="3.1063%" y="191.50"></text></g><g><title>`0x7FFCA899095C (52 samples, 0.01%)</title><rect x="2.9263%" y="69" width="0.0123%" height="15" fill="rgb(221,193,43)" fg:x="12338" fg:w="52"/><text x="3.1763%" y="79.50"></text></g><g><title>`0x7FFCA8979B1A (52 samples, 0.01%)</title><rect x="2.9263%" y="53" width="0.0123%" height="15" fill="rgb(240,128,52)" fg:x="12338" fg:w="52"/><text x="3.1763%" y="63.50"></text></g><g><title>`0x7FFCA8A0D8B4 (52 samples, 0.01%)</title><rect x="2.9263%" y="37" width="0.0123%" height="15" fill="rgb(253,114,12)" fg:x="12338" fg:w="52"/><text x="3.1763%" y="47.50"></text></g><g><title>`0x7FFCA898E412 (53 samples, 0.01%)</title><rect x="2.9263%" y="101" width="0.0126%" height="15" fill="rgb(215,223,47)" fg:x="12338" fg:w="53"/><text x="3.1763%" y="111.50"></text></g><g><title>`0x7FFCA898F35E (53 samples, 0.01%)</title><rect x="2.9263%" y="85" width="0.0126%" height="15" fill="rgb(248,225,23)" fg:x="12338" fg:w="53"/><text x="3.1763%" y="95.50"></text></g><g><title>`0x7FFCA89744AF (66 samples, 0.02%)</title><rect x="2.9237%" y="165" width="0.0157%" height="15" fill="rgb(250,108,0)" fg:x="12327" fg:w="66"/><text x="3.1737%" y="175.50"></text></g><g><title>`0x7FFCA89947B1 (66 samples, 0.02%)</title><rect x="2.9237%" y="149" width="0.0157%" height="15" fill="rgb(228,208,7)" fg:x="12327" fg:w="66"/><text x="3.1737%" y="159.50"></text></g><g><title>`0x7FFCA8995B74 (66 samples, 0.02%)</title><rect x="2.9237%" y="133" width="0.0157%" height="15" fill="rgb(244,45,10)" fg:x="12327" fg:w="66"/><text x="3.1737%" y="143.50"></text></g><g><title>`0x7FFCA89965F6 (58 samples, 0.01%)</title><rect x="2.9256%" y="117" width="0.0138%" height="15" fill="rgb(207,125,25)" fg:x="12335" fg:w="58"/><text x="3.1756%" y="127.50"></text></g><g><title>`0x7FFCA8990F76 (69 samples, 0.02%)</title><rect x="2.9237%" y="181" width="0.0164%" height="15" fill="rgb(210,195,18)" fg:x="12327" fg:w="69"/><text x="3.1737%" y="191.50"></text></g><g><title>`0x7FFCA89947B1 (466 samples, 0.11%)</title><rect x="2.8298%" y="213" width="0.1105%" height="15" fill="rgb(249,80,12)" fg:x="11931" fg:w="466"/><text x="3.0798%" y="223.50"></text></g><g><title>`0x7FFCA8A176EF (354 samples, 0.08%)</title><rect x="2.8563%" y="197" width="0.0840%" height="15" fill="rgb(221,65,9)" fg:x="12043" fg:w="354"/><text x="3.1063%" y="207.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::sync::Weak&lt;memfs::memfs::MemFS,ref$ (490 samples, 0.12%)</title><rect x="2.8243%" y="437" width="0.1162%" height="15" fill="rgb(235,49,36)" fg:x="11908" fg:w="490"/><text x="3.0743%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$46::drop(alloc::sync::Weak&lt;memfs::memfs::MemFS,ref$ (490 samples, 0.12%)</title><rect x="2.8243%" y="421" width="0.1162%" height="15" fill="rgb(225,32,20)" fg:x="11908" fg:w="490"/><text x="3.0743%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Weak&lt;memfs::memfs::MemFS,ref$&lt;alloc::alloc::Global&gt; &gt;::inner (490 samples, 0.12%)</title><rect x="2.8243%" y="405" width="0.1162%" height="15" fill="rgb(215,141,46)" fg:x="11908" fg:w="490"/><text x="3.0743%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::rc::is_dangling(alloc::sync::ArcInner (490 samples, 0.12%)</title><rect x="2.8243%" y="389" width="0.1162%" height="15" fill="rgb(250,160,47)" fg:x="11908" fg:w="490"/><text x="3.0743%" y="399.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::drop_slow&lt;crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt; (490 samples, 0.12%)</title><rect x="2.8243%" y="373" width="0.1162%" height="15" fill="rgb(216,222,40)" fg:x="11908" fg:w="490"/><text x="3.0743%" y="383.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec (469 samples, 0.11%)</title><rect x="2.8293%" y="357" width="0.1112%" height="15" fill="rgb(234,217,39)" fg:x="11929" fg:w="469"/><text x="3.0793%" y="367.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`crossbeam_queue::array_queue::impl$5::drop(crossbeam_queue::array_queue::ArrayQueue&lt;alloc::vec::Vec (469 samples, 0.11%)</title><rect x="2.8293%" y="341" width="0.1112%" height="15" fill="rgb(207,178,40)" fg:x="11929" fg:w="469"/><text x="3.0793%" y="351.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::mem::maybe_uninit::MaybeUninit&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;::assume_init_drop (468 samples, 0.11%)</title><rect x="2.8295%" y="325" width="0.1110%" height="15" fill="rgb(221,136,13)" fg:x="11930" fg:w="468"/><text x="3.0795%" y="335.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::vec::Vec (468 samples, 0.11%)</title><rect x="2.8295%" y="309" width="0.1110%" height="15" fill="rgb(249,199,10)" fg:x="11930" fg:w="468"/><text x="3.0795%" y="319.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (468 samples, 0.11%)</title><rect x="2.8295%" y="293" width="0.1110%" height="15" fill="rgb(249,222,13)" fg:x="11930" fg:w="468"/><text x="3.0795%" y="303.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (468 samples, 0.11%)</title><rect x="2.8295%" y="277" width="0.1110%" height="15" fill="rgb(244,185,38)" fg:x="11930" fg:w="468"/><text x="3.0795%" y="287.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (468 samples, 0.11%)</title><rect x="2.8295%" y="261" width="0.1110%" height="15" fill="rgb(236,202,9)" fg:x="11930" fg:w="468"/><text x="3.0795%" y="271.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (468 samples, 0.11%)</title><rect x="2.8295%" y="245" width="0.1110%" height="15" fill="rgb(250,229,37)" fg:x="11930" fg:w="468"/><text x="3.0795%" y="255.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::alloc::dealloc (468 samples, 0.11%)</title><rect x="2.8295%" y="229" width="0.1110%" height="15" fill="rgb(206,174,23)" fg:x="11930" fg:w="468"/><text x="3.0795%" y="239.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::sync::Arc (510 samples, 0.12%)</title><rect x="2.8243%" y="485" width="0.1210%" height="15" fill="rgb(211,33,43)" fg:x="11908" fg:w="510"/><text x="3.0743%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$37::drop(alloc::sync::Arc (510 samples, 0.12%)</title><rect x="2.8243%" y="469" width="0.1210%" height="15" fill="rgb(245,58,50)" fg:x="11908" fg:w="510"/><text x="3.0743%" y="479.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;memfs::memfs::MemFS,alloc::alloc::Global&gt;::drop_slow&lt;memfs::memfs::MemFS,alloc::alloc::Global&gt; (510 samples, 0.12%)</title><rect x="2.8243%" y="453" width="0.1210%" height="15" fill="rgb(244,68,36)" fg:x="11908" fg:w="510"/><text x="3.0743%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::result::Result&lt;usize,memfs::utils::MemFSErr&gt; &gt;::unwrap(enum2$&lt;core::result::Result (49 samples, 0.01%)</title><rect x="2.9460%" y="485" width="0.0116%" height="15" fill="rgb(232,229,15)" fg:x="12421" fg:w="49"/><text x="3.1960%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFS::open(ref$ (49 samples, 0.01%)</title><rect x="2.9460%" y="469" width="0.0116%" height="15" fill="rgb(254,30,23)" fg:x="12421" fg:w="49"/><text x="3.1960%" y="479.50"></text></g><g><title>`0x7FFCA6480905 (51 samples, 0.01%)</title><rect x="2.9593%" y="389" width="0.0121%" height="15" fill="rgb(235,160,14)" fg:x="12477" fg:w="51"/><text x="3.2093%" y="399.50"></text></g><g><title>`0x7FFCA8A0D6D4 (51 samples, 0.01%)</title><rect x="2.9593%" y="373" width="0.0121%" height="15" fill="rgb(212,155,44)" fg:x="12477" fg:w="51"/><text x="3.2093%" y="383.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::get_mut (72 samples, 0.02%)</title><rect x="2.9576%" y="453" width="0.0171%" height="15" fill="rgb(226,2,50)" fg:x="12470" fg:w="72"/><text x="3.2076%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::is_unique (72 samples, 0.02%)</title><rect x="2.9576%" y="437" width="0.0171%" height="15" fill="rgb(234,177,6)" fg:x="12470" fg:w="72"/><text x="3.2076%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::inner (71 samples, 0.02%)</title><rect x="2.9578%" y="421" width="0.0168%" height="15" fill="rgb(217,24,9)" fg:x="12471" fg:w="71"/><text x="3.2078%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;std::thread::Packet&lt;usize&gt; &gt; &gt;::as_ref (71 samples, 0.02%)</title><rect x="2.9578%" y="405" width="0.0168%" height="15" fill="rgb(220,13,46)" fg:x="12471" fg:w="71"/><text x="3.2078%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::JoinHandle&lt;usize&gt;::join(std::thread::JoinHandle (76 samples, 0.02%)</title><rect x="2.9576%" y="485" width="0.0180%" height="15" fill="rgb(239,221,27)" fg:x="12470" fg:w="76"/><text x="3.2076%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::JoinInner&lt;usize&gt;::join(std::thread::JoinInner (76 samples, 0.02%)</title><rect x="2.9576%" y="469" width="0.0180%" height="15" fill="rgb(222,198,25)" fg:x="12470" fg:w="76"/><text x="3.2076%" y="479.50"></text></g><g><title>`0x7FFCA648B43F (1,084 samples, 0.26%)</title><rect x="2.9789%" y="389" width="0.2571%" height="15" fill="rgb(211,99,13)" fg:x="12560" fg:w="1084"/><text x="3.2289%" y="399.50"></text></g><g><title>`0x7FFCA8A0ED24 (1,082 samples, 0.26%)</title><rect x="2.9794%" y="373" width="0.2566%" height="15" fill="rgb(232,111,31)" fg:x="12562" fg:w="1082"/><text x="3.2294%" y="383.50"></text></g><g><title>`0x7FFCA7F1B91D (1,090 samples, 0.26%)</title><rect x="2.9780%" y="405" width="0.2585%" height="15" fill="rgb(245,82,37)" fg:x="12556" fg:w="1090"/><text x="3.2280%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::pal::windows::thread::Thread::new (1,100 samples, 0.26%)</title><rect x="2.9780%" y="421" width="0.2609%" height="15" fill="rgb(227,149,46)" fg:x="12556" fg:w="1100"/><text x="3.2280%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::spawn (1,138 samples, 0.27%)</title><rect x="2.9756%" y="485" width="0.2699%" height="15" fill="rgb(218,36,50)" fg:x="12546" fg:w="1138"/><text x="3.2256%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::result::Result&lt;std::thread::JoinHandle&lt;usize&gt;,std::io::error::Error&gt; &gt;::expect(enum2$&lt;core::result::Result&lt;std::thread::JoinHandle&lt;usize&gt;,std::io::error::Error&gt; &gt;, ref$ (1,138 samples, 0.27%)</title><rect x="2.9756%" y="469" width="0.2699%" height="15" fill="rgb(226,80,48)" fg:x="12546" fg:w="1138"/><text x="3.2256%" y="479.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::Builder::spawn_unchecked&lt;test_memfs_concurrency::helper_all_should_succeed_when_writing_on_multiple_files_without_o_append::closure_env$0,usize&gt; (1,136 samples, 0.27%)</title><rect x="2.9761%" y="453" width="0.2694%" height="15" fill="rgb(238,224,15)" fg:x="12548" fg:w="1136"/><text x="3.2261%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::Builder::spawn_unchecked_(std::thread::Builder, test_memfs_concurrency::helper_all_should_succeed_when_writing_on_multiple_files_without_o_append::closure_env$0, enum2$&lt;core::option::Option&lt;alloc::sync::Arc (1,136 samples, 0.27%)</title><rect x="2.9761%" y="437" width="0.2694%" height="15" fill="rgb(241,136,10)" fg:x="12548" fg:w="1136"/><text x="3.2261%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$29::deref (12,522 samples, 2.97%)</title><rect x="0.2765%" y="805" width="2.9699%" height="15" fill="rgb(208,32,45)" fg:x="1166" fg:w="12522"/><text x="0.5265%" y="815.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc::inner (12,522 samples, 2.97%)</title><rect x="0.2765%" y="789" width="2.9699%" height="15" fill="rgb(207,135,9)" fg:x="1166" fg:w="12522"/><text x="0.5265%" y="799.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::non_null::NonNull::as_ref (12,522 samples, 2.97%)</title><rect x="0.2765%" y="773" width="2.9699%" height="15" fill="rgb(206,86,44)" fg:x="1166" fg:w="12522"/><text x="0.5265%" y="783.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;test::run_test::closure_env$1,tuple$&lt;&gt; &gt; (12,522 samples, 2.97%)</title><rect x="0.2765%" y="757" width="2.9699%" height="15" fill="rgb(245,177,15)" fg:x="1166" fg:w="12522"/><text x="0.5265%" y="767.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test::run_test::closure$1 (12,522 samples, 2.97%)</title><rect x="0.2765%" y="741" width="2.9699%" height="15" fill="rgb(206,64,50)" fg:x="1166" fg:w="12522"/><text x="0.5265%" y="751.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place (12,522 samples, 2.97%)</title><rect x="0.2765%" y="725" width="2.9699%" height="15" fill="rgb(234,36,40)" fg:x="1166" fg:w="12522"/><text x="0.5265%" y="735.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sync::poison::mutex::impl$14::drop (12,522 samples, 2.97%)</title><rect x="0.2765%" y="709" width="2.9699%" height="15" fill="rgb(213,64,8)" fg:x="1166" fg:w="12522"/><text x="0.5265%" y="719.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sync::poison::Flag::done (12,522 samples, 2.97%)</title><rect x="0.2765%" y="693" width="2.9699%" height="15" fill="rgb(210,75,36)" fg:x="1166" fg:w="12522"/><text x="0.5265%" y="703.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test::run_test::closure$0 (12,522 samples, 2.97%)</title><rect x="0.2765%" y="677" width="2.9699%" height="15" fill="rgb(229,88,21)" fg:x="1166" fg:w="12522"/><text x="0.5265%" y="687.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test::run_test_in_process (12,522 samples, 2.97%)</title><rect x="0.2765%" y="661" width="2.9699%" height="15" fill="rgb(252,204,47)" fg:x="1166" fg:w="12522"/><text x="0.5265%" y="671.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::panic::catch_unwind (12,521 samples, 2.97%)</title><rect x="0.2768%" y="645" width="2.9697%" height="15" fill="rgb(208,77,27)" fg:x="1167" fg:w="12521"/><text x="0.5268%" y="655.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::panicking::try (12,521 samples, 2.97%)</title><rect x="0.2768%" y="629" width="2.9697%" height="15" fill="rgb(221,76,26)" fg:x="1167" fg:w="12521"/><text x="0.5268%" y="639.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::panicking::try::do_call (12,521 samples, 2.97%)</title><rect x="0.2768%" y="613" width="2.9697%" height="15" fill="rgb(225,139,18)" fg:x="1167" fg:w="12521"/><text x="0.5268%" y="623.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test::__rust_begin_short_backtrace&lt;enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::string::String&gt; &gt;,enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::string::String&gt; &gt; (*)()&gt; (12,521 samples, 2.97%)</title><rect x="0.2768%" y="597" width="2.9697%" height="15" fill="rgb(230,137,11)" fg:x="1167" fg:w="12521"/><text x="0.5268%" y="607.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ops::function::FnOnce::call_once&lt;test_memfs_concurrency::test_throughput_measure_on_writes_on_multiple_files_without_o_append::closure_env$0,tuple$&lt;&gt; &gt; (3,189 samples, 0.76%)</title><rect x="2.4901%" y="581" width="0.7564%" height="15" fill="rgb(212,28,1)" fg:x="10499" fg:w="3189"/><text x="2.7401%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::test_throughput_measure_on_writes_on_multiple_files_without_o_append::closure$0 (3,189 samples, 0.76%)</title><rect x="2.4901%" y="565" width="0.7564%" height="15" fill="rgb(248,164,17)" fg:x="10499" fg:w="3189"/><text x="2.7401%" y="575.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::test_throughput_measure_on_writes_on_multiple_files_without_o_append (3,189 samples, 0.76%)</title><rect x="2.4901%" y="549" width="0.7564%" height="15" fill="rgb(222,171,42)" fg:x="10499" fg:w="3189"/><text x="2.7401%" y="559.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::throughput_reporter(uint128_t (*) (3,189 samples, 0.76%)</title><rect x="2.4901%" y="533" width="0.7564%" height="15" fill="rgb(243,84,45)" fg:x="10499" fg:w="3189"/><text x="2.7401%" y="543.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ops::function::Fn::call(uint128_t (**) (3,188 samples, 0.76%)</title><rect x="2.4904%" y="517" width="0.7561%" height="15" fill="rgb(252,49,23)" fg:x="10500" fg:w="3188"/><text x="2.7404%" y="527.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::helper_all_should_succeed_when_writing_on_multiple_files_without_o_append (3,188 samples, 0.76%)</title><rect x="2.4904%" y="501" width="0.7561%" height="15" fill="rgb(215,19,7)" fg:x="10500" fg:w="3188"/><text x="2.7404%" y="511.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;test::run_test::closure_env$1,tuple$&lt;&gt; &gt;,tuple$&lt;&gt; &gt; (12,524 samples, 2.97%)</title><rect x="0.2765%" y="837" width="2.9704%" height="15" fill="rgb(238,81,41)" fg:x="1166" fg:w="12524"/><text x="0.5265%" y="847.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::impl$0::spawn_unchecked_::closure$1 (12,524 samples, 2.97%)</title><rect x="0.2765%" y="821" width="2.9704%" height="15" fill="rgb(210,199,37)" fg:x="1166" fg:w="12524"/><text x="0.5265%" y="831.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand_chacha::guts::refill_wide::impl_avx2 (51 samples, 0.01%)</title><rect x="3.3255%" y="421" width="0.0121%" height="15" fill="rgb(244,192,49)" fg:x="14021" fg:w="51"/><text x="3.5755%" y="431.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (50 samples, 0.01%)</title><rect x="3.3257%" y="405" width="0.0119%" height="15" fill="rgb(226,211,11)" fg:x="14022" fg:w="50"/><text x="3.5757%" y="415.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (50 samples, 0.01%)</title><rect x="3.3257%" y="389" width="0.0119%" height="15" fill="rgb(236,162,54)" fg:x="14022" fg:w="50"/><text x="3.5757%" y="399.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (46 samples, 0.01%)</title><rect x="3.3266%" y="373" width="0.0109%" height="15" fill="rgb(220,229,9)" fg:x="14026" fg:w="46"/><text x="3.5766%" y="383.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place (345 samples, 0.08%)</title><rect x="3.2560%" y="725" width="0.0818%" height="15" fill="rgb(250,87,22)" fg:x="13728" fg:w="345"/><text x="3.5060%" y="735.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng (345 samples, 0.08%)</title><rect x="3.2560%" y="709" width="0.0818%" height="15" fill="rgb(239,43,17)" fg:x="13728" fg:w="345"/><text x="3.5060%" y="719.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::rc::impl$32::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng (345 samples, 0.08%)</title><rect x="3.2560%" y="693" width="0.0818%" height="15" fill="rgb(231,177,25)" fg:x="13728" fg:w="345"/><text x="3.5060%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (337 samples, 0.08%)</title><rect x="3.2579%" y="677" width="0.0799%" height="15" fill="rgb(219,179,1)" fg:x="13736" fg:w="337"/><text x="3.5079%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcInner&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (318 samples, 0.08%)</title><rect x="3.2624%" y="661" width="0.0754%" height="15" fill="rgb(238,219,53)" fg:x="13755" fg:w="318"/><text x="3.5124%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand::rng::Rng::random_range&lt;rand::rngs::thread::ThreadRng,usize,core::ops::range::Range&lt;usize&gt; &gt;(rand::rngs::thread::ThreadRng*, core::ops::range::Range (314 samples, 0.07%)</title><rect x="3.2633%" y="645" width="0.0745%" height="15" fill="rgb(232,167,36)" fg:x="13759" fg:w="314"/><text x="3.5133%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand::distr::uniform::impl$8::sample_single(core::ops::range::Range (257 samples, 0.06%)</title><rect x="3.2768%" y="629" width="0.0610%" height="15" fill="rgb(244,19,51)" fg:x="13816" fg:w="257"/><text x="3.5268%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand::distr::uniform::int::impl$1::sample_single (257 samples, 0.06%)</title><rect x="3.2768%" y="613" width="0.0610%" height="15" fill="rgb(224,6,22)" fg:x="13816" fg:w="257"/><text x="3.5268%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand::distr::uniform::int::impl$23::sample_single (235 samples, 0.06%)</title><rect x="3.2821%" y="597" width="0.0557%" height="15" fill="rgb(224,145,5)" fg:x="13838" fg:w="235"/><text x="3.5321%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand::distr::uniform::int::impl$23::sample_single_inclusive (235 samples, 0.06%)</title><rect x="3.2821%" y="581" width="0.0557%" height="15" fill="rgb(234,130,49)" fg:x="13838" fg:w="235"/><text x="3.5321%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand::rng::Rng::random (188 samples, 0.04%)</title><rect x="3.2932%" y="565" width="0.0446%" height="15" fill="rgb(254,6,2)" fg:x="13885" fg:w="188"/><text x="3.5432%" y="575.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand::distr::integer::impl$2::sample (188 samples, 0.04%)</title><rect x="3.2932%" y="549" width="0.0446%" height="15" fill="rgb(208,96,46)" fg:x="13885" fg:w="188"/><text x="3.5432%" y="559.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand::rngs::thread::impl$3::next_u32 (188 samples, 0.04%)</title><rect x="3.2932%" y="533" width="0.0446%" height="15" fill="rgb(239,3,39)" fg:x="13885" fg:w="188"/><text x="3.5432%" y="543.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand::rngs::reseeding::impl$1::next_u32(rand::rngs::reseeding::ReseedingRng (188 samples, 0.04%)</title><rect x="3.2932%" y="517" width="0.0446%" height="15" fill="rgb(233,210,1)" fg:x="13885" fg:w="188"/><text x="3.5432%" y="527.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore (188 samples, 0.04%)</title><rect x="3.2932%" y="501" width="0.0446%" height="15" fill="rgb(244,137,37)" fg:x="13885" fg:w="188"/><text x="3.5432%" y="511.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (56 samples, 0.01%)</title><rect x="3.3245%" y="485" width="0.0133%" height="15" fill="rgb(240,136,2)" fg:x="14017" fg:w="56"/><text x="3.5745%" y="495.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand::rngs::reseeding::impl$4::generate(rand::rngs::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (56 samples, 0.01%)</title><rect x="3.3245%" y="469" width="0.0133%" height="15" fill="rgb(239,18,37)" fg:x="14017" fg:w="56"/><text x="3.5745%" y="479.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (54 samples, 0.01%)</title><rect x="3.3250%" y="453" width="0.0128%" height="15" fill="rgb(218,185,22)" fg:x="14019" fg:w="54"/><text x="3.5750%" y="463.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand_chacha::guts::ChaCha::refill4 (54 samples, 0.01%)</title><rect x="3.3250%" y="437" width="0.0128%" height="15" fill="rgb(225,218,4)" fg:x="14019" fg:w="54"/><text x="3.5750%" y="447.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;dashmap::DashMap (56 samples, 0.01%)</title><rect x="3.3561%" y="693" width="0.0133%" height="15" fill="rgb(230,182,32)" fg:x="14150" fg:w="56"/><text x="3.6061%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(dashmap::mapref::one::Ref (5,554 samples, 1.32%)</title><rect x="3.3693%" y="693" width="1.3173%" height="15" fill="rgb(242,56,43)" fg:x="14206" fg:w="5554"/><text x="3.6193%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (5,554 samples, 1.32%)</title><rect x="3.3693%" y="677" width="1.3173%" height="15" fill="rgb(233,99,24)" fg:x="14206" fg:w="5554"/><text x="3.6193%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`lock_api::rwlock::impl$18::drop(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (5,554 samples, 1.32%)</title><rect x="3.3693%" y="661" width="1.3173%" height="15" fill="rgb(234,209,42)" fg:x="14206" fg:w="5554"/><text x="3.6193%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::unlock_shared (5,554 samples, 1.32%)</title><rect x="3.3693%" y="645" width="1.3173%" height="15" fill="rgb(227,7,12)" fg:x="14206" fg:w="5554"/><text x="3.6193%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$1::build_hasher (72 samples, 0.02%)</title><rect x="4.7352%" y="661" width="0.0171%" height="15" fill="rgb(245,203,43)" fg:x="19965" fg:w="72"/><text x="4.9852%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (45 samples, 0.01%)</title><rect x="4.8325%" y="597" width="0.0107%" height="15" fill="rgb(238,205,33)" fg:x="20375" fg:w="45"/><text x="5.0825%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (294 samples, 0.07%)</title><rect x="4.7798%" y="613" width="0.0697%" height="15" fill="rgb(231,56,7)" fg:x="20153" fg:w="294"/><text x="5.0298%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (47 samples, 0.01%)</title><rect x="4.8538%" y="597" width="0.0111%" height="15" fill="rgb(244,186,29)" fg:x="20465" fg:w="47"/><text x="5.1038%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (85 samples, 0.02%)</title><rect x="4.8496%" y="613" width="0.0202%" height="15" fill="rgb(234,111,31)" fg:x="20447" fg:w="85"/><text x="5.0996%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (143 samples, 0.03%)</title><rect x="4.8797%" y="597" width="0.0339%" height="15" fill="rgb(241,149,10)" fg:x="20574" fg:w="143"/><text x="5.1297%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::DashMap&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState&gt;::hash_u64 (850 samples, 0.20%)</title><rect x="4.7274%" y="677" width="0.2016%" height="15" fill="rgb(249,206,44)" fg:x="19932" fg:w="850"/><text x="4.9774%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$4::finish (745 samples, 0.18%)</title><rect x="4.7523%" y="661" width="0.1767%" height="15" fill="rgb(251,153,30)" fg:x="20037" fg:w="745"/><text x="5.0023%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$4::finish (745 samples, 0.18%)</title><rect x="4.7523%" y="645" width="0.1767%" height="15" fill="rgb(239,152,38)" fg:x="20037" fg:w="745"/><text x="5.0023%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (745 samples, 0.18%)</title><rect x="4.7523%" y="629" width="0.1767%" height="15" fill="rgb(249,139,47)" fg:x="20037" fg:w="745"/><text x="5.0023%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::d_rounds (250 samples, 0.06%)</title><rect x="4.8697%" y="613" width="0.0593%" height="15" fill="rgb(244,64,35)" fg:x="20532" fg:w="250"/><text x="5.1197%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::wrapping_add (65 samples, 0.02%)</title><rect x="4.9136%" y="597" width="0.0154%" height="15" fill="rgb(216,46,15)" fg:x="20717" fg:w="65"/><text x="5.1636%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$11::checked_add (911 samples, 0.22%)</title><rect x="5.4750%" y="613" width="0.2161%" height="15" fill="rgb(250,74,19)" fg:x="23084" fg:w="911"/><text x="5.7250%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hint::spin_loop (447 samples, 0.11%)</title><rect x="5.6977%" y="581" width="0.1060%" height="15" fill="rgb(249,42,33)" fg:x="24023" fg:w="447"/><text x="5.9477%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::core_arch::x86::sse2::_mm_pause (447 samples, 0.11%)</title><rect x="5.6977%" y="565" width="0.1060%" height="15" fill="rgb(242,149,17)" fg:x="24023" fg:w="447"/><text x="5.9477%" y="575.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::RawRwLock::lock_shared_slow (2,429 samples, 0.58%)</title><rect x="5.2694%" y="629" width="0.5761%" height="15" fill="rgb(244,29,21)" fg:x="22217" fg:w="2429"/><text x="5.5194%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`parking_lot_core::spinwait::SpinWait::spin_no_yield (645 samples, 0.15%)</title><rect x="5.6925%" y="613" width="0.1530%" height="15" fill="rgb(220,130,37)" fg:x="24001" fg:w="645"/><text x="5.9425%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`parking_lot_core::spinwait::cpu_relax (623 samples, 0.15%)</title><rect x="5.6977%" y="597" width="0.1478%" height="15" fill="rgb(211,67,2)" fg:x="24023" fg:w="623"/><text x="5.9477%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::iter::range::impl$6::next(core::ops::range::Range (176 samples, 0.04%)</title><rect x="5.8037%" y="581" width="0.0417%" height="15" fill="rgb(235,68,52)" fg:x="24470" fg:w="176"/><text x="6.0537%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (176 samples, 0.04%)</title><rect x="5.8037%" y="565" width="0.0417%" height="15" fill="rgb(246,142,3)" fg:x="24470" fg:w="176"/><text x="6.0537%" y="575.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$11::checked_add (2,805 samples, 0.67%)</title><rect x="5.8455%" y="613" width="0.6653%" height="15" fill="rgb(241,25,7)" fg:x="24646" fg:w="2805"/><text x="6.0955%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::intrinsics::unlikely (2,804 samples, 0.67%)</title><rect x="5.8457%" y="597" width="0.6650%" height="15" fill="rgb(242,119,39)" fg:x="24647" fg:w="2804"/><text x="6.0957%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_yield_read_shard(dashmap::DashMap (6,671 samples, 1.58%)</title><rect x="4.9290%" y="677" width="1.5822%" height="15" fill="rgb(241,98,45)" fg:x="20782" fg:w="6671"/><text x="5.1790%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::slice::impl$0::get_unchecked(ref$&lt;slice2$&lt;crossbeam_utils::cache_padded::CachePadded&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (6,655 samples, 1.58%)</title><rect x="4.9328%" y="661" width="1.5784%" height="15" fill="rgb(254,28,30)" fg:x="20798" fg:w="6655"/><text x="5.1828%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::lock_shared (6,627 samples, 1.57%)</title><rect x="4.9394%" y="645" width="1.5718%" height="15" fill="rgb(241,142,54)" fg:x="20826" fg:w="6627"/><text x="5.1894%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::RawRwLock::try_lock_shared_fast (2,807 samples, 0.67%)</title><rect x="5.8455%" y="629" width="0.6658%" height="15" fill="rgb(222,85,15)" fg:x="24646" fg:w="2807"/><text x="6.0955%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTableInner::probe_seq (579 samples, 0.14%)</title><rect x="6.8615%" y="645" width="0.1373%" height="15" fill="rgb(210,85,47)" fg:x="28930" fg:w="579"/><text x="7.1115%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::h2 (119 samples, 0.03%)</title><rect x="7.0012%" y="645" width="0.0282%" height="15" fill="rgb(224,206,25)" fg:x="29519" fg:w="119"/><text x="7.2512%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::impl$8::find::closure$0(hashbrown::raw::inner::impl$8::find::closure_env$0&lt;tuple$&lt;usize,dashmap::util::SharedValue&lt;memfs::memfs::MemFSFileDescriptor&gt; &gt;,hashbrown::raw::inner::alloc::inner::Global,dashmap::impl$4::_get::closure_env$0 (49 samples, 0.01%)</title><rect x="7.0295%" y="645" width="0.0116%" height="15" fill="rgb(243,201,19)" fg:x="29638" fg:w="49"/><text x="7.2795%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_get&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState,usize&gt;(dashmap::DashMap (10,382 samples, 2.46%)</title><rect x="4.6866%" y="693" width="2.4624%" height="15" fill="rgb(236,59,4)" fg:x="19760" fg:w="10382"/><text x="4.9366%" y="703.50">te..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue&lt;memfs::memfs::MemFSFileDescriptor&gt; &gt;,hashbrown::raw::inner::alloc::inner::Global&gt;::find(unsigned long long, dashmap::impl$4::_get::closure_env$0 (2,685 samples, 0.64%)</title><rect x="6.5122%" y="677" width="0.6368%" height="15" fill="rgb(254,179,45)" fg:x="27457" fg:w="2685"/><text x="6.7622%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (2,685 samples, 0.64%)</title><rect x="6.5122%" y="661" width="0.6368%" height="15" fill="rgb(226,14,10)" fg:x="27457" fg:w="2685"/><text x="6.7622%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::sse2::Group::match_byte (455 samples, 0.11%)</title><rect x="7.0411%" y="645" width="0.1079%" height="15" fill="rgb(244,27,41)" fg:x="29687" fg:w="455"/><text x="7.2911%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (455 samples, 0.11%)</title><rect x="7.0411%" y="629" width="0.1079%" height="15" fill="rgb(235,35,32)" fg:x="29687" fg:w="455"/><text x="7.2911%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;enum2$ (1,294 samples, 0.31%)</title><rect x="7.1703%" y="677" width="0.3069%" height="15" fill="rgb(218,68,31)" fg:x="30232" fg:w="1294"/><text x="7.4203%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;enum2$&lt;memfs::memfs::MemFSEntry&gt;,alloc::alloc::Global&gt;::inner (1,294 samples, 0.31%)</title><rect x="7.1703%" y="661" width="0.3069%" height="15" fill="rgb(207,120,37)" fg:x="30232" fg:w="1294"/><text x="7.4203%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;enum2$&lt;memfs::memfs::MemFSEntry&gt; &gt; &gt;::as_ref (1,294 samples, 0.31%)</title><rect x="7.1703%" y="645" width="0.3069%" height="15" fill="rgb(227,98,0)" fg:x="30232" fg:w="1294"/><text x="7.4203%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::result::Result&lt;usize,memfs::utils::MemFSErr&gt; &gt;::is_ok (17,524 samples, 4.16%)</title><rect x="3.3378%" y="725" width="4.1563%" height="15" fill="rgb(207,7,3)" fg:x="14073" fg:w="17524"/><text x="3.5878%" y="735.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFS::lseek (17,520 samples, 4.16%)</title><rect x="3.3387%" y="709" width="4.1553%" height="15" fill="rgb(206,98,19)" fg:x="14077" fg:w="17520"/><text x="3.5887%" y="719.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFSFileDescriptor::seek_file (1,455 samples, 0.35%)</title><rect x="7.1490%" y="693" width="0.3451%" height="15" fill="rgb(217,5,26)" fg:x="30142" fg:w="1455"/><text x="7.3990%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::AtomicUsize::load (51 samples, 0.01%)</title><rect x="7.4820%" y="677" width="0.0121%" height="15" fill="rgb(235,190,38)" fg:x="31546" fg:w="51"/><text x="7.7320%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::atomic_load (51 samples, 0.01%)</title><rect x="7.4820%" y="661" width="0.0121%" height="15" fill="rgb(247,86,24)" fg:x="31546" fg:w="51"/><text x="7.7320%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;::and_then(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; (*)(enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng (70 samples, 0.02%)</title><rect x="7.5055%" y="645" width="0.0166%" height="15" fill="rgb(205,101,16)" fg:x="31645" fg:w="70"/><text x="7.7555%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ops::function::FnOnce::call_once(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (70 samples, 0.02%)</title><rect x="7.5055%" y="629" width="0.0166%" height="15" fill="rgb(246,168,33)" fg:x="31645" fg:w="70"/><text x="7.7555%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand::rngs::thread::THREAD_RNG_KEY::__init (70 samples, 0.02%)</title><rect x="7.5055%" y="613" width="0.0166%" height="15" fill="rgb(231,114,1)" fg:x="31645" fg:w="70"/><text x="7.7555%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand::rngs::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;::new (53 samples, 0.01%)</title><rect x="7.5095%" y="597" width="0.0126%" height="15" fill="rgb(207,184,53)" fg:x="31662" fg:w="53"/><text x="7.7595%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand::rngs::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;::new (46 samples, 0.01%)</title><rect x="7.5112%" y="581" width="0.0109%" height="15" fill="rgb(224,95,51)" fg:x="31669" fg:w="46"/><text x="7.7612%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand_core::SeedableRng::try_from_rng (45 samples, 0.01%)</title><rect x="7.5114%" y="565" width="0.0107%" height="15" fill="rgb(212,188,45)" fg:x="31670" fg:w="45"/><text x="7.7614%" y="575.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::const_ptr::impl$0::as_ref(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng (73 samples, 0.02%)</title><rect x="7.5052%" y="677" width="0.0173%" height="15" fill="rgb(223,154,38)" fg:x="31644" fg:w="73"/><text x="7.7552%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::initialize&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt;,alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*)()&gt;(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (72 samples, 0.02%)</title><rect x="7.5055%" y="661" width="0.0171%" height="15" fill="rgb(251,22,52)" fg:x="31645" fg:w="72"/><text x="7.7555%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;std::thread::Packet (18,073 samples, 4.29%)</title><rect x="3.2493%" y="805" width="4.2865%" height="15" fill="rgb(229,209,22)" fg:x="13700" fg:w="18073"/><text x="3.4993%" y="815.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::inner (18,073 samples, 4.29%)</title><rect x="3.2493%" y="789" width="4.2865%" height="15" fill="rgb(234,138,34)" fg:x="13700" fg:w="18073"/><text x="3.4993%" y="799.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;std::thread::Packet&lt;usize&gt; &gt; &gt;::as_ref (18,073 samples, 4.29%)</title><rect x="3.2493%" y="773" width="4.2865%" height="15" fill="rgb(212,95,11)" fg:x="13700" fg:w="18073"/><text x="3.4993%" y="783.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;test_memfs_concurrency::helper_all_should_succeed_when_lseek_on_single_file_descriptor::closure_env$0,usize&gt; (18,071 samples, 4.29%)</title><rect x="3.2498%" y="757" width="4.2860%" height="15" fill="rgb(240,179,47)" fg:x="13702" fg:w="18071"/><text x="3.4998%" y="767.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::helper_all_should_succeed_when_lseek_on_single_file_descriptor::closure$0 (18,071 samples, 4.29%)</title><rect x="3.2498%" y="741" width="4.2860%" height="15" fill="rgb(240,163,11)" fg:x="13702" fg:w="18071"/><text x="3.4998%" y="751.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand::rngs::thread::rng (176 samples, 0.04%)</title><rect x="7.4941%" y="725" width="0.0417%" height="15" fill="rgb(236,37,12)" fg:x="31597" fg:w="176"/><text x="7.7441%" y="735.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (159 samples, 0.04%)</title><rect x="7.4981%" y="709" width="0.0377%" height="15" fill="rgb(232,164,16)" fg:x="31614" fg:w="159"/><text x="7.7481%" y="719.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (159 samples, 0.04%)</title><rect x="7.4981%" y="693" width="0.0377%" height="15" fill="rgb(244,205,15)" fg:x="31614" fg:w="159"/><text x="7.7481%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`rand::rngs::thread::rng::closure$0(rand::rngs::thread::rng::closure_env$0, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng (56 samples, 0.01%)</title><rect x="7.5225%" y="677" width="0.0133%" height="15" fill="rgb(223,117,47)" fg:x="31717" fg:w="56"/><text x="7.7725%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::rc::impl$33::clone(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng (56 samples, 0.01%)</title><rect x="7.5225%" y="661" width="0.0133%" height="15" fill="rgb(244,107,35)" fg:x="31717" fg:w="56"/><text x="7.7725%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::rc::RcInnerPtr::inc_strong(alloc::rc::RcInner&lt;core::cell::UnsafeCell&lt;rand::rngs::reseeding::ReseedingRng (56 samples, 0.01%)</title><rect x="7.5225%" y="645" width="0.0133%" height="15" fill="rgb(205,140,8)" fg:x="31717" fg:w="56"/><text x="7.7725%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::intrinsics::unlikely (56 samples, 0.01%)</title><rect x="7.5225%" y="629" width="0.0133%" height="15" fill="rgb(228,84,46)" fg:x="31717" fg:w="56"/><text x="7.7725%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;test_memfs_concurrency::helper_all_should_succeed_when_lseek_on_single_file_descriptor::closure_env$0,usize&gt;,tuple$&lt;&gt; &gt;(std::thread::impl$0::spawn_unchecked_::closure_env$1 (18,128 samples, 4.30%)</title><rect x="3.2470%" y="837" width="4.2995%" height="15" fill="rgb(254,188,9)" fg:x="13690" fg:w="18128"/><text x="3.4970%" y="847.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1 (18,120 samples, 4.30%)</title><rect x="3.2489%" y="821" width="4.2976%" height="15" fill="rgb(206,112,54)" fg:x="13698" fg:w="18120"/><text x="3.4989%" y="831.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::RawRwLock::lock_exclusive_slow (60 samples, 0.01%)</title><rect x="7.7474%" y="645" width="0.0142%" height="15" fill="rgb(216,84,49)" fg:x="32665" fg:w="60"/><text x="7.9974%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue&lt;memfs::memfs::MemFSFileDescriptor&gt; &gt;,hashbrown::raw::inner::alloc::inner::Global&gt;::reserve(unsigned long long, dashmap::impl$4::_entry::closure_env$1 (61 samples, 0.01%)</title><rect x="7.7474%" y="661" width="0.0145%" height="15" fill="rgb(214,194,35)" fg:x="32665" fg:w="61"/><text x="7.9974%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_entry&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState&gt;(dashmap::DashMap (73 samples, 0.02%)</title><rect x="7.7450%" y="693" width="0.0173%" height="15" fill="rgb(249,28,3)" fg:x="32655" fg:w="73"/><text x="7.9950%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue&lt;memfs::memfs::MemFSFileDescriptor&gt; &gt;,hashbrown::raw::inner::alloc::inner::Global&gt;::find_or_find_insert_slot(unsigned long long, dashmap::impl$4::_entry::closure_env$0&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState&gt;, dashmap::impl$4::_entry::closure_env$1 (64 samples, 0.02%)</title><rect x="7.7472%" y="677" width="0.0152%" height="15" fill="rgb(222,56,52)" fg:x="32664" fg:w="64"/><text x="7.9972%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,memfs::utils::MemFSErr&gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;tuple$ (93 samples, 0.02%)</title><rect x="7.7407%" y="725" width="0.0221%" height="15" fill="rgb(245,217,50)" fg:x="32637" fg:w="93"/><text x="7.9907%" y="735.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFS::close (93 samples, 0.02%)</title><rect x="7.7407%" y="709" width="0.0221%" height="15" fill="rgb(213,201,24)" fg:x="32637" fg:w="93"/><text x="7.9907%" y="719.50"></text></g><g><title>`0x7FFCA899478C (64 samples, 0.02%)</title><rect x="7.9568%" y="597" width="0.0152%" height="15" fill="rgb(248,116,28)" fg:x="33548" fg:w="64"/><text x="8.2068%" y="607.50"></text></g><g><title>`0x7FFCA8995B11 (47 samples, 0.01%)</title><rect x="8.0270%" y="581" width="0.0111%" height="15" fill="rgb(219,72,43)" fg:x="33844" fg:w="47"/><text x="8.2770%" y="591.50"></text></g><g><title>`0x7FFCA8995BA1 (94 samples, 0.02%)</title><rect x="8.0560%" y="581" width="0.0223%" height="15" fill="rgb(209,138,14)" fg:x="33966" fg:w="94"/><text x="8.3060%" y="591.50"></text></g><g><title>`0x7FFCA8A1743A (156 samples, 0.04%)</title><rect x="8.1169%" y="581" width="0.0370%" height="15" fill="rgb(222,18,33)" fg:x="34223" fg:w="156"/><text x="8.3669%" y="591.50"></text></g><g><title>`0x7FFCA8A1744B (81 samples, 0.02%)</title><rect x="8.1613%" y="581" width="0.0192%" height="15" fill="rgb(213,199,7)" fg:x="34410" fg:w="81"/><text x="8.4113%" y="591.50"></text></g><g><title>`0x7FFCA8A17468 (85 samples, 0.02%)</title><rect x="8.1900%" y="581" width="0.0202%" height="15" fill="rgb(250,110,10)" fg:x="34531" fg:w="85"/><text x="8.4400%" y="591.50"></text></g><g><title>`0x7FFCA8A17473 (104 samples, 0.02%)</title><rect x="8.2118%" y="581" width="0.0247%" height="15" fill="rgb(248,123,6)" fg:x="34623" fg:w="104"/><text x="8.4618%" y="591.50"></text></g><g><title>`0x7FFCA8A1753A (102 samples, 0.02%)</title><rect x="8.2870%" y="581" width="0.0242%" height="15" fill="rgb(206,91,31)" fg:x="34940" fg:w="102"/><text x="8.5370%" y="591.50"></text></g><g><title>`0x7FFCA8A1757A (94 samples, 0.02%)</title><rect x="8.3166%" y="581" width="0.0223%" height="15" fill="rgb(211,154,13)" fg:x="35065" fg:w="94"/><text x="8.5666%" y="591.50"></text></g><g><title>`0x7FFCA89947B1 (1,525 samples, 0.36%)</title><rect x="7.9872%" y="597" width="0.3617%" height="15" fill="rgb(225,148,7)" fg:x="33676" fg:w="1525"/><text x="8.2372%" y="607.50"></text></g><g><title>`0x7FFCA64AB65D (84 samples, 0.02%)</title><rect x="8.3844%" y="565" width="0.0199%" height="15" fill="rgb(220,160,43)" fg:x="35351" fg:w="84"/><text x="8.6344%" y="575.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(dashmap::mapref::one::Ref (2,421 samples, 0.57%)</title><rect x="7.8427%" y="693" width="0.5742%" height="15" fill="rgb(213,52,39)" fg:x="33067" fg:w="2421"/><text x="8.0927%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (2,421 samples, 0.57%)</title><rect x="7.8427%" y="677" width="0.5742%" height="15" fill="rgb(243,137,7)" fg:x="33067" fg:w="2421"/><text x="8.0927%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`lock_api::rwlock::impl$18::drop(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (2,421 samples, 0.57%)</title><rect x="7.8427%" y="661" width="0.5742%" height="15" fill="rgb(230,79,13)" fg:x="33067" fg:w="2421"/><text x="8.0927%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::unlock_shared (2,421 samples, 0.57%)</title><rect x="7.8427%" y="645" width="0.5742%" height="15" fill="rgb(247,105,23)" fg:x="33067" fg:w="2421"/><text x="8.0927%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::AtomicUsize::fetch_sub (2,002 samples, 0.47%)</title><rect x="7.9421%" y="629" width="0.4748%" height="15" fill="rgb(223,179,41)" fg:x="33486" fg:w="2002"/><text x="8.1921%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::atomic_sub (2,002 samples, 0.47%)</title><rect x="7.9421%" y="613" width="0.4748%" height="15" fill="rgb(218,9,34)" fg:x="33486" fg:w="2002"/><text x="8.1921%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (251 samples, 0.06%)</title><rect x="8.3574%" y="597" width="0.0595%" height="15" fill="rgb(222,106,8)" fg:x="35237" fg:w="251"/><text x="8.6074%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::alloc::windows::impl$0::dealloc (241 samples, 0.06%)</title><rect x="8.3598%" y="581" width="0.0572%" height="15" fill="rgb(211,220,0)" fg:x="35247" fg:w="241"/><text x="8.6098%" y="591.50"></text></g><g><title>`0x7FFCA7F15EF0 (53 samples, 0.01%)</title><rect x="8.4044%" y="565" width="0.0126%" height="15" fill="rgb(229,52,16)" fg:x="35435" fg:w="53"/><text x="8.6544%" y="575.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::impls::impl$5::hash (64 samples, 0.02%)</title><rect x="8.4397%" y="661" width="0.0152%" height="15" fill="rgb(212,155,18)" fg:x="35584" fg:w="64"/><text x="8.6897%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$1::build_hasher (166 samples, 0.04%)</title><rect x="8.4549%" y="661" width="0.0394%" height="15" fill="rgb(242,21,14)" fg:x="35648" fg:w="166"/><text x="8.7049%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::SipHasher13::new_with_keys (114 samples, 0.03%)</title><rect x="8.4672%" y="645" width="0.0270%" height="15" fill="rgb(222,19,48)" fg:x="35700" fg:w="114"/><text x="8.7172%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (114 samples, 0.03%)</title><rect x="8.4672%" y="629" width="0.0270%" height="15" fill="rgb(232,45,27)" fg:x="35700" fg:w="114"/><text x="8.7172%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (114 samples, 0.03%)</title><rect x="8.4672%" y="613" width="0.0270%" height="15" fill="rgb(249,103,42)" fg:x="35700" fg:w="114"/><text x="8.7172%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (53 samples, 0.01%)</title><rect x="8.5602%" y="581" width="0.0126%" height="15" fill="rgb(246,81,33)" fg:x="36092" fg:w="53"/><text x="8.8102%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (68 samples, 0.02%)</title><rect x="8.5578%" y="597" width="0.0161%" height="15" fill="rgb(252,33,42)" fg:x="36082" fg:w="68"/><text x="8.8078%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (241 samples, 0.06%)</title><rect x="8.5230%" y="613" width="0.0572%" height="15" fill="rgb(209,212,41)" fg:x="35935" fg:w="241"/><text x="8.7730%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (77 samples, 0.02%)</title><rect x="8.5801%" y="613" width="0.0183%" height="15" fill="rgb(207,154,6)" fg:x="36176" fg:w="77"/><text x="8.8301%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (83 samples, 0.02%)</title><rect x="8.6086%" y="597" width="0.0197%" height="15" fill="rgb(223,64,47)" fg:x="36296" fg:w="83"/><text x="8.8586%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::DashMap&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState&gt;::hash_u64 (859 samples, 0.20%)</title><rect x="8.4397%" y="677" width="0.2037%" height="15" fill="rgb(211,161,38)" fg:x="35584" fg:w="859"/><text x="8.6897%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$4::finish (629 samples, 0.15%)</title><rect x="8.4943%" y="661" width="0.1492%" height="15" fill="rgb(219,138,40)" fg:x="35814" fg:w="629"/><text x="8.7443%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$4::finish (629 samples, 0.15%)</title><rect x="8.4943%" y="645" width="0.1492%" height="15" fill="rgb(241,228,46)" fg:x="35814" fg:w="629"/><text x="8.7443%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (629 samples, 0.15%)</title><rect x="8.4943%" y="629" width="0.1492%" height="15" fill="rgb(223,209,38)" fg:x="35814" fg:w="629"/><text x="8.7443%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::d_rounds (190 samples, 0.05%)</title><rect x="8.5984%" y="613" width="0.0451%" height="15" fill="rgb(236,164,45)" fg:x="36253" fg:w="190"/><text x="8.8484%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::wrapping_add (64 samples, 0.02%)</title><rect x="8.6283%" y="597" width="0.0152%" height="15" fill="rgb(231,15,5)" fg:x="36379" fg:w="64"/><text x="8.8783%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$11::checked_add (88 samples, 0.02%)</title><rect x="8.6804%" y="613" width="0.0209%" height="15" fill="rgb(252,35,15)" fg:x="36599" fg:w="88"/><text x="8.9304%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::intrinsics::unlikely (86 samples, 0.02%)</title><rect x="8.6809%" y="597" width="0.0204%" height="15" fill="rgb(248,181,18)" fg:x="36601" fg:w="86"/><text x="8.9309%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_yield_read_shard(dashmap::DashMap (246 samples, 0.06%)</title><rect x="8.6434%" y="677" width="0.0583%" height="15" fill="rgb(233,39,42)" fg:x="36443" fg:w="246"/><text x="8.8934%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::slice::impl$0::get_unchecked(ref$&lt;slice2$&lt;crossbeam_utils::cache_padded::CachePadded&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (232 samples, 0.06%)</title><rect x="8.6468%" y="661" width="0.0550%" height="15" fill="rgb(238,110,33)" fg:x="36457" fg:w="232"/><text x="8.8968%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::lock_shared (203 samples, 0.05%)</title><rect x="8.6536%" y="645" width="0.0481%" height="15" fill="rgb(233,195,10)" fg:x="36486" fg:w="203"/><text x="8.9036%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::RawRwLock::try_lock_shared_fast (90 samples, 0.02%)</title><rect x="8.6804%" y="629" width="0.0213%" height="15" fill="rgb(254,105,3)" fg:x="36599" fg:w="90"/><text x="8.9304%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::h2 (189 samples, 0.04%)</title><rect x="8.7272%" y="645" width="0.0448%" height="15" fill="rgb(221,225,9)" fg:x="36796" fg:w="189"/><text x="8.9772%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_get&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState,usize&gt;(dashmap::DashMap (1,566 samples, 0.37%)</title><rect x="8.4169%" y="693" width="0.3714%" height="15" fill="rgb(224,227,45)" fg:x="35488" fg:w="1566"/><text x="8.6669%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue&lt;memfs::memfs::MemFSFileDescriptor&gt; &gt;,hashbrown::raw::inner::alloc::inner::Global&gt;::find(unsigned long long, dashmap::impl$4::_get::closure_env$0 (365 samples, 0.09%)</title><rect x="8.7018%" y="677" width="0.0866%" height="15" fill="rgb(229,198,43)" fg:x="36689" fg:w="365"/><text x="8.9518%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (365 samples, 0.09%)</title><rect x="8.7018%" y="661" width="0.0866%" height="15" fill="rgb(206,209,35)" fg:x="36689" fg:w="365"/><text x="8.9518%" y="671.50"></text></g><g><title>`0x7FFC92DA2301 (3,872 samples, 0.92%)</title><rect x="9.0357%" y="677" width="0.9183%" height="15" fill="rgb(245,195,53)" fg:x="38097" fg:w="3872"/><text x="9.2857%" y="687.50"></text></g><g><title>`0x7FFC92DA2308 (1,991 samples, 0.47%)</title><rect x="9.9541%" y="677" width="0.4722%" height="15" fill="rgb(240,92,26)" fg:x="41969" fg:w="1991"/><text x="10.2041%" y="687.50"></text></g><g><title>`0x7FFC92DA230F (70 samples, 0.02%)</title><rect x="10.4263%" y="677" width="0.0166%" height="15" fill="rgb(207,40,23)" fg:x="43960" fg:w="70"/><text x="10.6763%" y="687.50"></text></g><g><title>`0x7FFC92DA2354 (17,815 samples, 4.23%)</title><rect x="10.4491%" y="677" width="4.2253%" height="15" fill="rgb(223,111,35)" fg:x="44056" fg:w="17815"/><text x="10.6991%" y="687.50">`0x7F..</text></g><g><title>`0x7FFC92DA2359 (15,461 samples, 3.67%)</title><rect x="14.6744%" y="677" width="3.6670%" height="15" fill="rgb(229,147,28)" fg:x="61871" fg:w="15461"/><text x="14.9244%" y="687.50">`0x7..</text></g><g><title>`0x7FFC92DA235E (16,628 samples, 3.94%)</title><rect x="18.3414%" y="677" width="3.9438%" height="15" fill="rgb(211,29,28)" fg:x="77332" fg:w="16628"/><text x="18.5914%" y="687.50">`0x7..</text></g><g><title>`0x7FFC92DA2363 (15,012 samples, 3.56%)</title><rect x="22.2852%" y="677" width="3.5605%" height="15" fill="rgb(228,72,33)" fg:x="93960" fg:w="15012"/><text x="22.5352%" y="687.50">`0x7..</text></g><g><title>`0x7FFC92DA2367 (995 samples, 0.24%)</title><rect x="25.8457%" y="677" width="0.2360%" height="15" fill="rgb(205,214,31)" fg:x="108972" fg:w="995"/><text x="26.0957%" y="687.50"></text></g><g><title>`0x7FFC92DA236C (186 samples, 0.04%)</title><rect x="26.0816%" y="677" width="0.0441%" height="15" fill="rgb(224,111,15)" fg:x="109967" fg:w="186"/><text x="26.3316%" y="687.50"></text></g><g><title>`0x7FFC92DA2371 (203 samples, 0.05%)</title><rect x="26.1258%" y="677" width="0.0481%" height="15" fill="rgb(253,21,26)" fg:x="110153" fg:w="203"/><text x="26.3758%" y="687.50"></text></g><g><title>`0x7FFC92DA2376 (212 samples, 0.05%)</title><rect x="26.1739%" y="677" width="0.0503%" height="15" fill="rgb(245,139,43)" fg:x="110356" fg:w="212"/><text x="26.4239%" y="687.50"></text></g><g><title>`0x7FFC92DA237E (16,969 samples, 4.02%)</title><rect x="26.2242%" y="677" width="4.0247%" height="15" fill="rgb(252,170,7)" fg:x="110568" fg:w="16969"/><text x="26.4742%" y="687.50">`0x7..</text></g><g><title>`0x7FFC92DA2386 (15,482 samples, 3.67%)</title><rect x="30.2488%" y="677" width="3.6720%" height="15" fill="rgb(231,118,14)" fg:x="127537" fg:w="15482"/><text x="30.4988%" y="687.50">`0x7..</text></g><g><title>`0x7FFC92DA238E (16,901 samples, 4.01%)</title><rect x="33.9208%" y="677" width="4.0085%" height="15" fill="rgb(238,83,0)" fg:x="143019" fg:w="16901"/><text x="34.1708%" y="687.50">`0x7..</text></g><g><title>`0x7FFC92DA2396 (15,402 samples, 3.65%)</title><rect x="37.9293%" y="677" width="3.6530%" height="15" fill="rgb(221,39,39)" fg:x="159920" fg:w="15402"/><text x="38.1793%" y="687.50">`0x7..</text></g><g><title>`0x7FFC92DA239E (950 samples, 0.23%)</title><rect x="41.5824%" y="677" width="0.2253%" height="15" fill="rgb(222,119,46)" fg:x="175322" fg:w="950"/><text x="41.8324%" y="687.50"></text></g><g><title>`0x7FFC92DA23A6 (177 samples, 0.04%)</title><rect x="41.8077%" y="677" width="0.0420%" height="15" fill="rgb(222,165,49)" fg:x="176272" fg:w="177"/><text x="42.0577%" y="687.50"></text></g><g><title>`0x7FFC92DA23AE (208 samples, 0.05%)</title><rect x="41.8496%" y="677" width="0.0493%" height="15" fill="rgb(219,113,52)" fg:x="176449" fg:w="208"/><text x="42.0996%" y="687.50"></text></g><g><title>`0x7FFC92DA23B6 (302 samples, 0.07%)</title><rect x="41.8990%" y="677" width="0.0716%" height="15" fill="rgb(214,7,15)" fg:x="176657" fg:w="302"/><text x="42.1490%" y="687.50"></text></g><g><title>`0x7FFC92DA23FF (842 samples, 0.20%)</title><rect x="41.9851%" y="677" width="0.1997%" height="15" fill="rgb(235,32,4)" fg:x="177020" fg:w="842"/><text x="42.2351%" y="687.50"></text></g><g><title>`0x7FFC92DA2409 (52 samples, 0.01%)</title><rect x="42.1848%" y="677" width="0.0123%" height="15" fill="rgb(238,90,54)" fg:x="177862" fg:w="52"/><text x="42.4348%" y="687.50"></text></g><g><title>`0x7FFC92DA2413 (1,270 samples, 0.30%)</title><rect x="42.1971%" y="677" width="0.3012%" height="15" fill="rgb(213,208,19)" fg:x="177914" fg:w="1270"/><text x="42.4471%" y="687.50"></text></g><g><title>`0x7FFC92DA241D (74 samples, 0.02%)</title><rect x="42.4983%" y="677" width="0.0176%" height="15" fill="rgb(233,156,4)" fg:x="179184" fg:w="74"/><text x="42.7483%" y="687.50"></text></g><g><title>`0x7FFC92DA2427 (1,334 samples, 0.32%)</title><rect x="42.5159%" y="677" width="0.3164%" height="15" fill="rgb(207,194,5)" fg:x="179258" fg:w="1334"/><text x="42.7659%" y="687.50"></text></g><g><title>`0x7FFC92DA2431 (81 samples, 0.02%)</title><rect x="42.8323%" y="677" width="0.0192%" height="15" fill="rgb(206,111,30)" fg:x="180592" fg:w="81"/><text x="43.0823%" y="687.50"></text></g><g><title>`0x7FFC92DA243B (1,201 samples, 0.28%)</title><rect x="42.8515%" y="677" width="0.2848%" height="15" fill="rgb(243,70,54)" fg:x="180673" fg:w="1201"/><text x="43.1015%" y="687.50"></text></g><g><title>`0x7FFC92DA2445 (47 samples, 0.01%)</title><rect x="43.1363%" y="677" width="0.0111%" height="15" fill="rgb(242,28,8)" fg:x="181874" fg:w="47"/><text x="43.3863%" y="687.50"></text></g><g><title>`0x7FFC92DA244C (1,350 samples, 0.32%)</title><rect x="43.1475%" y="677" width="0.3202%" height="15" fill="rgb(219,106,18)" fg:x="181921" fg:w="1350"/><text x="43.3975%" y="687.50"></text></g><g><title>`0x7FFC92DA2453 (60 samples, 0.01%)</title><rect x="43.4677%" y="677" width="0.0142%" height="15" fill="rgb(244,222,10)" fg:x="183271" fg:w="60"/><text x="43.7177%" y="687.50"></text></g><g><title>`0x7FFC92DA245A (1,267 samples, 0.30%)</title><rect x="43.4819%" y="677" width="0.3005%" height="15" fill="rgb(236,179,52)" fg:x="183331" fg:w="1267"/><text x="43.7319%" y="687.50"></text></g><g><title>`0x7FFC92DA2468 (1,441 samples, 0.34%)</title><rect x="43.7919%" y="677" width="0.3418%" height="15" fill="rgb(213,23,39)" fg:x="184638" fg:w="1441"/><text x="44.0419%" y="687.50"></text></g><g><title>`0x7FFCA899A9C7 (58 samples, 0.01%)</title><rect x="44.1688%" y="549" width="0.0138%" height="15" fill="rgb(238,48,10)" fg:x="186227" fg:w="58"/><text x="44.4188%" y="559.50"></text></g><g><title>`0x7FFCA899A9D9 (44 samples, 0.01%)</title><rect x="44.1844%" y="549" width="0.0104%" height="15" fill="rgb(251,196,23)" fg:x="186293" fg:w="44"/><text x="44.4344%" y="559.50"></text></g><g><title>`0x7FFCA899B283 (53 samples, 0.01%)</title><rect x="44.2283%" y="549" width="0.0126%" height="15" fill="rgb(250,152,24)" fg:x="186478" fg:w="53"/><text x="44.4783%" y="559.50"></text></g><g><title>`0x7FFCA899B2A6 (85 samples, 0.02%)</title><rect x="44.2451%" y="549" width="0.0202%" height="15" fill="rgb(209,150,17)" fg:x="186549" fg:w="85"/><text x="44.4951%" y="559.50"></text></g><g><title>`0x7FFCA899B385 (57 samples, 0.01%)</title><rect x="44.2966%" y="549" width="0.0135%" height="15" fill="rgb(234,202,34)" fg:x="186766" fg:w="57"/><text x="44.5466%" y="559.50"></text></g><g><title>`0x7FFCA899B3C2 (63 samples, 0.01%)</title><rect x="44.3253%" y="549" width="0.0149%" height="15" fill="rgb(253,148,53)" fg:x="186887" fg:w="63"/><text x="44.5753%" y="559.50"></text></g><g><title>`0x7FFCA899B6A6 (72 samples, 0.02%)</title><rect x="44.3744%" y="533" width="0.0171%" height="15" fill="rgb(218,129,16)" fg:x="187094" fg:w="72"/><text x="44.6244%" y="543.50"></text></g><g><title>`0x7FFCA899B6C3 (79 samples, 0.02%)</title><rect x="44.3960%" y="533" width="0.0187%" height="15" fill="rgb(216,85,19)" fg:x="187185" fg:w="79"/><text x="44.6460%" y="543.50"></text></g><g><title>`0x7FFCA899B6E3 (74 samples, 0.02%)</title><rect x="44.4176%" y="533" width="0.0176%" height="15" fill="rgb(235,228,7)" fg:x="187276" fg:w="74"/><text x="44.6676%" y="543.50"></text></g><g><title>`0x7FFCA899B73C (85 samples, 0.02%)</title><rect x="44.4460%" y="533" width="0.0202%" height="15" fill="rgb(245,175,0)" fg:x="187396" fg:w="85"/><text x="44.6960%" y="543.50"></text></g><g><title>`0x7FFCA899B748 (120 samples, 0.03%)</title><rect x="44.4662%" y="533" width="0.0285%" height="15" fill="rgb(208,168,36)" fg:x="187481" fg:w="120"/><text x="44.7162%" y="543.50"></text></g><g><title>`0x7FFCA899B7A2 (94 samples, 0.02%)</title><rect x="44.5127%" y="533" width="0.0223%" height="15" fill="rgb(246,171,24)" fg:x="187677" fg:w="94"/><text x="44.7627%" y="543.50"></text></g><g><title>`0x7FFCA899B813 (50 samples, 0.01%)</title><rect x="44.5511%" y="533" width="0.0119%" height="15" fill="rgb(215,142,24)" fg:x="187839" fg:w="50"/><text x="44.8011%" y="543.50"></text></g><g><title>`0x7FFCA899B862 (45 samples, 0.01%)</title><rect x="44.5784%" y="533" width="0.0107%" height="15" fill="rgb(250,187,7)" fg:x="187954" fg:w="45"/><text x="44.8284%" y="543.50"></text></g><g><title>`0x7FFCA8974452 (123 samples, 0.03%)</title><rect x="44.6336%" y="517" width="0.0292%" height="15" fill="rgb(228,66,33)" fg:x="188187" fg:w="123"/><text x="44.8836%" y="527.50"></text></g><g><title>`0x7FFCA899B86B (441 samples, 0.10%)</title><rect x="44.5890%" y="533" width="0.1046%" height="15" fill="rgb(234,215,21)" fg:x="187999" fg:w="441"/><text x="44.8390%" y="543.50"></text></g><g><title>`0x7FFCA899B8A4 (252 samples, 0.06%)</title><rect x="44.7190%" y="533" width="0.0598%" height="15" fill="rgb(222,191,20)" fg:x="188547" fg:w="252"/><text x="44.9690%" y="543.50"></text></g><g><title>`0x7FFCA897A4EB (491 samples, 0.12%)</title><rect x="44.8025%" y="517" width="0.1165%" height="15" fill="rgb(245,79,54)" fg:x="188899" fg:w="491"/><text x="45.0525%" y="527.50"></text></g><g><title>`0x7FFCA899BA28 (533 samples, 0.13%)</title><rect x="44.7928%" y="533" width="0.1264%" height="15" fill="rgb(240,10,37)" fg:x="188858" fg:w="533"/><text x="45.0428%" y="543.50"></text></g><g><title>`0x7FFCA897A4EB (58 samples, 0.01%)</title><rect x="44.9223%" y="501" width="0.0138%" height="15" fill="rgb(214,192,32)" fg:x="189404" fg:w="58"/><text x="45.1723%" y="511.50"></text></g><g><title>`0x7FFCA897A364 (59 samples, 0.01%)</title><rect x="44.9223%" y="517" width="0.0140%" height="15" fill="rgb(209,36,54)" fg:x="189404" fg:w="59"/><text x="45.1723%" y="527.50"></text></g><g><title>`0x7FFCA899BF5E (95 samples, 0.02%)</title><rect x="44.9204%" y="533" width="0.0225%" height="15" fill="rgb(220,10,11)" fg:x="189396" fg:w="95"/><text x="45.1704%" y="543.50"></text></g><g><title>`0x7FFCA899B3C7 (2,542 samples, 0.60%)</title><rect x="44.3402%" y="549" width="0.6029%" height="15" fill="rgb(221,106,17)" fg:x="186950" fg:w="2542"/><text x="44.5902%" y="559.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (3,591 samples, 0.85%)</title><rect x="44.1588%" y="613" width="0.8517%" height="15" fill="rgb(251,142,44)" fg:x="186185" fg:w="3591"/><text x="44.4088%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (3,591 samples, 0.85%)</title><rect x="44.1588%" y="597" width="0.8517%" height="15" fill="rgb(238,13,15)" fg:x="186185" fg:w="3591"/><text x="44.4088%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (3,591 samples, 0.85%)</title><rect x="44.1588%" y="581" width="0.8517%" height="15" fill="rgb(208,107,27)" fg:x="186185" fg:w="3591"/><text x="44.4088%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (3,591 samples, 0.85%)</title><rect x="44.1588%" y="565" width="0.8517%" height="15" fill="rgb(205,136,37)" fg:x="186185" fg:w="3591"/><text x="44.4088%" y="575.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::alloc::windows::process_heap_alloc (140 samples, 0.03%)</title><rect x="44.9773%" y="549" width="0.0332%" height="15" fill="rgb(250,205,27)" fg:x="189636" fg:w="140"/><text x="45.2273%" y="559.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::intrinsics::unlikely (103 samples, 0.02%)</title><rect x="44.9861%" y="533" width="0.0244%" height="15" fill="rgb(210,80,43)" fg:x="189673" fg:w="103"/><text x="45.2361%" y="543.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (3,594 samples, 0.85%)</title><rect x="44.1588%" y="661" width="0.8524%" height="15" fill="rgb(247,160,36)" fg:x="186185" fg:w="3594"/><text x="44.4088%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (3,594 samples, 0.85%)</title><rect x="44.1588%" y="645" width="0.8524%" height="15" fill="rgb(234,13,49)" fg:x="186185" fg:w="3594"/><text x="44.4088%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (3,594 samples, 0.85%)</title><rect x="44.1588%" y="629" width="0.8524%" height="15" fill="rgb(234,122,0)" fg:x="186185" fg:w="3594"/><text x="44.4088%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$11::saturating_add (3,711 samples, 0.88%)</title><rect x="44.1486%" y="677" width="0.8802%" height="15" fill="rgb(207,146,38)" fg:x="186142" fg:w="3711"/><text x="44.3986%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (74 samples, 0.02%)</title><rect x="45.0112%" y="661" width="0.0176%" height="15" fill="rgb(207,177,25)" fg:x="189779" fg:w="74"/><text x="45.2612%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (49 samples, 0.01%)</title><rect x="45.0171%" y="645" width="0.0116%" height="15" fill="rgb(211,178,42)" fg:x="189804" fg:w="49"/><text x="45.2671%" y="655.50"></text></g><g><title>`0x7FFC92DA2354 (370 samples, 0.09%)</title><rect x="45.0544%" y="645" width="0.0878%" height="15" fill="rgb(230,69,54)" fg:x="189961" fg:w="370"/><text x="45.3044%" y="655.50"></text></g><g><title>`0x7FFC92DA2359 (101 samples, 0.02%)</title><rect x="45.1421%" y="645" width="0.0240%" height="15" fill="rgb(214,135,41)" fg:x="190331" fg:w="101"/><text x="45.3921%" y="655.50"></text></g><g><title>`0x7FFC92DA235E (182 samples, 0.04%)</title><rect x="45.1661%" y="645" width="0.0432%" height="15" fill="rgb(237,67,25)" fg:x="190432" fg:w="182"/><text x="45.4161%" y="655.50"></text></g><g><title>`0x7FFC92DA2363 (116 samples, 0.03%)</title><rect x="45.2093%" y="645" width="0.0275%" height="15" fill="rgb(222,189,50)" fg:x="190614" fg:w="116"/><text x="45.4593%" y="655.50"></text></g><g><title>`0x7FFC92DA2367 (312 samples, 0.07%)</title><rect x="45.2368%" y="645" width="0.0740%" height="15" fill="rgb(245,148,34)" fg:x="190730" fg:w="312"/><text x="45.4868%" y="655.50"></text></g><g><title>`0x7FFC92DA236C (156 samples, 0.04%)</title><rect x="45.3108%" y="645" width="0.0370%" height="15" fill="rgb(222,29,6)" fg:x="191042" fg:w="156"/><text x="45.5608%" y="655.50"></text></g><g><title>`0x7FFC92DA2371 (224 samples, 0.05%)</title><rect x="45.3478%" y="645" width="0.0531%" height="15" fill="rgb(221,189,43)" fg:x="191198" fg:w="224"/><text x="45.5978%" y="655.50"></text></g><g><title>`0x7FFC92DA2376 (148 samples, 0.04%)</title><rect x="45.4009%" y="645" width="0.0351%" height="15" fill="rgb(207,36,27)" fg:x="191422" fg:w="148"/><text x="45.6509%" y="655.50"></text></g><g><title>`0x7FFC92DA237E (253 samples, 0.06%)</title><rect x="45.4360%" y="645" width="0.0600%" height="15" fill="rgb(217,90,24)" fg:x="191570" fg:w="253"/><text x="45.6860%" y="655.50"></text></g><g><title>`0x7FFC92DA2386 (78 samples, 0.02%)</title><rect x="45.4960%" y="645" width="0.0185%" height="15" fill="rgb(224,66,35)" fg:x="191823" fg:w="78"/><text x="45.7460%" y="655.50"></text></g><g><title>`0x7FFC92DA238E (97 samples, 0.02%)</title><rect x="45.5145%" y="645" width="0.0230%" height="15" fill="rgb(221,13,50)" fg:x="191901" fg:w="97"/><text x="45.7645%" y="655.50"></text></g><g><title>`0x7FFC92DA2396 (81 samples, 0.02%)</title><rect x="45.5375%" y="645" width="0.0192%" height="15" fill="rgb(236,68,49)" fg:x="191998" fg:w="81"/><text x="45.7875%" y="655.50"></text></g><g><title>`0x7FFC92DA239E (379 samples, 0.09%)</title><rect x="45.5567%" y="645" width="0.0899%" height="15" fill="rgb(229,146,28)" fg:x="192079" fg:w="379"/><text x="45.8067%" y="655.50"></text></g><g><title>`0x7FFC92DA23A6 (160 samples, 0.04%)</title><rect x="45.6466%" y="645" width="0.0379%" height="15" fill="rgb(225,31,38)" fg:x="192458" fg:w="160"/><text x="45.8966%" y="655.50"></text></g><g><title>`0x7FFC92DA23AE (206 samples, 0.05%)</title><rect x="45.6846%" y="645" width="0.0489%" height="15" fill="rgb(250,208,3)" fg:x="192618" fg:w="206"/><text x="45.9346%" y="655.50"></text></g><g><title>`0x7FFC92DA23B6 (165 samples, 0.04%)</title><rect x="45.7334%" y="645" width="0.0391%" height="15" fill="rgb(246,54,23)" fg:x="192824" fg:w="165"/><text x="45.9834%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::AtomicUsize::fetch_add (3,517 samples, 0.83%)</title><rect x="45.0349%" y="677" width="0.8342%" height="15" fill="rgb(243,76,11)" fg:x="189879" fg:w="3517"/><text x="45.2849%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::atomic_add (3,517 samples, 0.83%)</title><rect x="45.0349%" y="661" width="0.8342%" height="15" fill="rgb(245,21,50)" fg:x="189879" fg:w="3517"/><text x="45.2849%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFS::read(unsigned long long, alloc::vec::Vec (160,462 samples, 38.06%)</title><rect x="7.8193%" y="709" width="38.0579%" height="15" fill="rgb(228,9,43)" fg:x="32968" fg:w="160462"/><text x="8.0693%" y="719.50">test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemF..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFSFileDescriptor::read_file(alloc::vec::Vec (156,376 samples, 37.09%)</title><rect x="8.7884%" y="693" width="37.0888%" height="15" fill="rgb(208,100,47)" fg:x="37054" fg:w="156376"/><text x="9.0384%" y="703.50">test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::Me..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(dashmap::mapref::one::Ref (4,650 samples, 1.10%)</title><rect x="45.9512%" y="693" width="1.1029%" height="15" fill="rgb(232,26,8)" fg:x="193742" fg:w="4650"/><text x="46.2012%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (4,650 samples, 1.10%)</title><rect x="45.9512%" y="677" width="1.1029%" height="15" fill="rgb(216,166,38)" fg:x="193742" fg:w="4650"/><text x="46.2012%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`lock_api::rwlock::impl$18::drop(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (4,650 samples, 1.10%)</title><rect x="45.9512%" y="661" width="1.1029%" height="15" fill="rgb(251,202,51)" fg:x="193742" fg:w="4650"/><text x="46.2012%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::unlock_shared (4,650 samples, 1.10%)</title><rect x="45.9512%" y="645" width="1.1029%" height="15" fill="rgb(254,216,34)" fg:x="193742" fg:w="4650"/><text x="46.2012%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::impls::impl$5::hash (58 samples, 0.01%)</title><rect x="47.0773%" y="661" width="0.0138%" height="15" fill="rgb(251,32,27)" fg:x="198490" fg:w="58"/><text x="47.3273%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$1::build_hasher (173 samples, 0.04%)</title><rect x="47.0910%" y="661" width="0.0410%" height="15" fill="rgb(208,127,28)" fg:x="198548" fg:w="173"/><text x="47.3410%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::SipHasher13::new_with_keys (141 samples, 0.03%)</title><rect x="47.0986%" y="645" width="0.0334%" height="15" fill="rgb(224,137,22)" fg:x="198580" fg:w="141"/><text x="47.3486%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (141 samples, 0.03%)</title><rect x="47.0986%" y="629" width="0.0334%" height="15" fill="rgb(254,70,32)" fg:x="198580" fg:w="141"/><text x="47.3486%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (141 samples, 0.03%)</title><rect x="47.0986%" y="613" width="0.0334%" height="15" fill="rgb(229,75,37)" fg:x="198580" fg:w="141"/><text x="47.3486%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (48 samples, 0.01%)</title><rect x="47.2087%" y="581" width="0.0114%" height="15" fill="rgb(252,64,23)" fg:x="199044" fg:w="48"/><text x="47.4587%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (69 samples, 0.02%)</title><rect x="47.2051%" y="597" width="0.0164%" height="15" fill="rgb(232,162,48)" fg:x="199029" fg:w="69"/><text x="47.4551%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (284 samples, 0.07%)</title><rect x="47.1631%" y="613" width="0.0674%" height="15" fill="rgb(246,160,12)" fg:x="198852" fg:w="284"/><text x="47.4131%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (60 samples, 0.01%)</title><rect x="47.2305%" y="613" width="0.0142%" height="15" fill="rgb(247,166,0)" fg:x="199136" fg:w="60"/><text x="47.4805%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (92 samples, 0.02%)</title><rect x="47.2525%" y="597" width="0.0218%" height="15" fill="rgb(249,219,21)" fg:x="199229" fg:w="92"/><text x="47.5025%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::DashMap&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState&gt;::hash_u64 (893 samples, 0.21%)</title><rect x="47.0773%" y="677" width="0.2118%" height="15" fill="rgb(205,209,3)" fg:x="198490" fg:w="893"/><text x="47.3273%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$4::finish (662 samples, 0.16%)</title><rect x="47.1321%" y="661" width="0.1570%" height="15" fill="rgb(243,44,1)" fg:x="198721" fg:w="662"/><text x="47.3821%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$4::finish (662 samples, 0.16%)</title><rect x="47.1321%" y="645" width="0.1570%" height="15" fill="rgb(206,159,16)" fg:x="198721" fg:w="662"/><text x="47.3821%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (662 samples, 0.16%)</title><rect x="47.1321%" y="629" width="0.1570%" height="15" fill="rgb(244,77,30)" fg:x="198721" fg:w="662"/><text x="47.3821%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::d_rounds (187 samples, 0.04%)</title><rect x="47.2447%" y="613" width="0.0444%" height="15" fill="rgb(218,69,12)" fg:x="199196" fg:w="187"/><text x="47.4947%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::wrapping_add (62 samples, 0.01%)</title><rect x="47.2744%" y="597" width="0.0147%" height="15" fill="rgb(212,87,7)" fg:x="199321" fg:w="62"/><text x="47.5244%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$11::checked_add (80 samples, 0.02%)</title><rect x="47.3211%" y="613" width="0.0190%" height="15" fill="rgb(245,114,25)" fg:x="199518" fg:w="80"/><text x="47.5711%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::intrinsics::unlikely (79 samples, 0.02%)</title><rect x="47.3213%" y="597" width="0.0187%" height="15" fill="rgb(210,61,42)" fg:x="199519" fg:w="79"/><text x="47.5713%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_yield_read_shard(dashmap::DashMap (219 samples, 0.05%)</title><rect x="47.2891%" y="677" width="0.0519%" height="15" fill="rgb(211,52,33)" fg:x="199383" fg:w="219"/><text x="47.5391%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::slice::impl$0::get_unchecked(ref$&lt;slice2$&lt;crossbeam_utils::cache_padded::CachePadded&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (211 samples, 0.05%)</title><rect x="47.2910%" y="661" width="0.0500%" height="15" fill="rgb(234,58,33)" fg:x="199391" fg:w="211"/><text x="47.5410%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::lock_shared (188 samples, 0.04%)</title><rect x="47.2964%" y="645" width="0.0446%" height="15" fill="rgb(220,115,36)" fg:x="199414" fg:w="188"/><text x="47.5464%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::RawRwLock::try_lock_shared_fast (84 samples, 0.02%)</title><rect x="47.3211%" y="629" width="0.0199%" height="15" fill="rgb(243,153,54)" fg:x="199518" fg:w="84"/><text x="47.5711%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::h2 (189 samples, 0.04%)</title><rect x="47.3666%" y="645" width="0.0448%" height="15" fill="rgb(251,47,18)" fg:x="199710" fg:w="189"/><text x="47.6166%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_get&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState,usize&gt;(dashmap::DashMap (1,582 samples, 0.38%)</title><rect x="47.0540%" y="693" width="0.3752%" height="15" fill="rgb(242,102,42)" fg:x="198392" fg:w="1582"/><text x="47.3040%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue&lt;memfs::memfs::MemFSFileDescriptor&gt; &gt;,hashbrown::raw::inner::alloc::inner::Global&gt;::find(unsigned long long, dashmap::impl$4::_get::closure_env$0 (372 samples, 0.09%)</title><rect x="47.3410%" y="677" width="0.0882%" height="15" fill="rgb(234,31,38)" fg:x="199602" fg:w="372"/><text x="47.5910%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (372 samples, 0.09%)</title><rect x="47.3410%" y="661" width="0.0882%" height="15" fill="rgb(221,117,51)" fg:x="199602" fg:w="372"/><text x="47.5910%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::sse2::Group::match_byte (45 samples, 0.01%)</title><rect x="47.4186%" y="645" width="0.0107%" height="15" fill="rgb(212,20,18)" fg:x="199929" fg:w="45"/><text x="47.6686%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (45 samples, 0.01%)</title><rect x="47.4186%" y="629" width="0.0107%" height="15" fill="rgb(245,133,36)" fg:x="199929" fg:w="45"/><text x="47.6686%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::AtomicUsize::fetch_max (3,361 samples, 0.80%)</title><rect x="47.9975%" y="677" width="0.7972%" height="15" fill="rgb(212,6,19)" fg:x="202370" fg:w="3361"/><text x="48.2475%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::atomic_umax (3,361 samples, 0.80%)</title><rect x="47.9975%" y="661" width="0.7972%" height="15" fill="rgb(218,1,36)" fg:x="202370" fg:w="3361"/><text x="48.2475%" y="671.50"></text></g><g><title>`0x7FFC92DA2301 (44 samples, 0.01%)</title><rect x="48.8310%" y="645" width="0.0104%" height="15" fill="rgb(246,84,54)" fg:x="205884" fg:w="44"/><text x="49.0810%" y="655.50"></text></g><g><title>`0x7FFC92DA2354 (8,658 samples, 2.05%)</title><rect x="48.8499%" y="645" width="2.0535%" height="15" fill="rgb(242,110,6)" fg:x="205964" fg:w="8658"/><text x="49.0999%" y="655.50">`..</text></g><g><title>`0x7FFC92DA2359 (2,958 samples, 0.70%)</title><rect x="50.9034%" y="645" width="0.7016%" height="15" fill="rgb(214,47,5)" fg:x="214622" fg:w="2958"/><text x="51.1534%" y="655.50"></text></g><g><title>`0x7FFC92DA235E (8,220 samples, 1.95%)</title><rect x="51.6050%" y="645" width="1.9496%" height="15" fill="rgb(218,159,25)" fg:x="217580" fg:w="8220"/><text x="51.8550%" y="655.50">`..</text></g><g><title>`0x7FFC92DA2363 (780 samples, 0.18%)</title><rect x="53.5546%" y="645" width="0.1850%" height="15" fill="rgb(215,211,28)" fg:x="225800" fg:w="780"/><text x="53.8046%" y="655.50"></text></g><g><title>`0x7FFC92DA2367 (24,203 samples, 5.74%)</title><rect x="53.7396%" y="645" width="5.7404%" height="15" fill="rgb(238,59,32)" fg:x="226580" fg:w="24203"/><text x="53.9896%" y="655.50">`0x7FFC..</text></g><g><title>`0x7FFC92DA236C (4,787 samples, 1.14%)</title><rect x="59.4800%" y="645" width="1.1354%" height="15" fill="rgb(226,82,3)" fg:x="250783" fg:w="4787"/><text x="59.7300%" y="655.50"></text></g><g><title>`0x7FFC92DA2371 (11,638 samples, 2.76%)</title><rect x="60.6153%" y="645" width="2.7603%" height="15" fill="rgb(240,164,32)" fg:x="255570" fg:w="11638"/><text x="60.8653%" y="655.50">`0..</text></g><g><title>`0x7FFC92DA2376 (3,411 samples, 0.81%)</title><rect x="63.3756%" y="645" width="0.8090%" height="15" fill="rgb(232,46,7)" fg:x="267208" fg:w="3411"/><text x="63.6256%" y="655.50"></text></g><g><title>`0x7FFC92DA237E (9,455 samples, 2.24%)</title><rect x="64.1846%" y="645" width="2.2425%" height="15" fill="rgb(229,129,53)" fg:x="270619" fg:w="9455"/><text x="64.4346%" y="655.50">`..</text></g><g><title>`0x7FFC92DA2386 (3,192 samples, 0.76%)</title><rect x="66.4271%" y="645" width="0.7571%" height="15" fill="rgb(234,188,29)" fg:x="280074" fg:w="3192"/><text x="66.6771%" y="655.50"></text></g><g><title>`0x7FFC92DA238E (8,019 samples, 1.90%)</title><rect x="67.1842%" y="645" width="1.9019%" height="15" fill="rgb(246,141,4)" fg:x="283266" fg:w="8019"/><text x="67.4342%" y="655.50">`..</text></g><g><title>`0x7FFC92DA2396 (745 samples, 0.18%)</title><rect x="69.0861%" y="645" width="0.1767%" height="15" fill="rgb(229,23,39)" fg:x="291285" fg:w="745"/><text x="69.3361%" y="655.50"></text></g><g><title>`0x7FFC92DA239E (23,862 samples, 5.66%)</title><rect x="69.2628%" y="645" width="5.6595%" height="15" fill="rgb(206,12,3)" fg:x="292030" fg:w="23862"/><text x="69.5128%" y="655.50">`0x7FFC..</text></g><g><title>`0x7FFC92DA23A6 (4,822 samples, 1.14%)</title><rect x="74.9223%" y="645" width="1.1437%" height="15" fill="rgb(252,226,20)" fg:x="315892" fg:w="4822"/><text x="75.1723%" y="655.50"></text></g><g><title>`0x7FFC92DA23AE (11,978 samples, 2.84%)</title><rect x="76.0660%" y="645" width="2.8409%" height="15" fill="rgb(216,123,35)" fg:x="320714" fg:w="11978"/><text x="76.3160%" y="655.50">`0..</text></g><g><title>`0x7FFC92DA23B6 (3,542 samples, 0.84%)</title><rect x="78.9069%" y="645" width="0.8401%" height="15" fill="rgb(212,68,40)" fg:x="332692" fg:w="3542"/><text x="79.1569%" y="655.50"></text></g><g><title>`0x7FFC92DA23EF (2,491 samples, 0.59%)</title><rect x="79.7671%" y="645" width="0.5908%" height="15" fill="rgb(254,125,32)" fg:x="336319" fg:w="2491"/><text x="80.0171%" y="655.50"></text></g><g><title>`0x7FFC92DA23F5 (253 samples, 0.06%)</title><rect x="80.3579%" y="645" width="0.0600%" height="15" fill="rgb(253,97,22)" fg:x="338810" fg:w="253"/><text x="80.6079%" y="655.50"></text></g><g><title>`0x7FFC92DA23FF (322 samples, 0.08%)</title><rect x="80.4180%" y="645" width="0.0764%" height="15" fill="rgb(241,101,14)" fg:x="339063" fg:w="322"/><text x="80.6680%" y="655.50"></text></g><g><title>`0x7FFC92DA2409 (542 samples, 0.13%)</title><rect x="80.4943%" y="645" width="0.1285%" height="15" fill="rgb(238,103,29)" fg:x="339385" fg:w="542"/><text x="80.7443%" y="655.50"></text></g><g><title>`0x7FFC92DA2413 (752 samples, 0.18%)</title><rect x="80.6229%" y="645" width="0.1784%" height="15" fill="rgb(233,195,47)" fg:x="339927" fg:w="752"/><text x="80.8729%" y="655.50"></text></g><g><title>`0x7FFC92DA241D (387 samples, 0.09%)</title><rect x="80.8012%" y="645" width="0.0918%" height="15" fill="rgb(246,218,30)" fg:x="340679" fg:w="387"/><text x="81.0512%" y="655.50"></text></g><g><title>`0x7FFC92DA2427 (1,105 samples, 0.26%)</title><rect x="80.8930%" y="645" width="0.2621%" height="15" fill="rgb(219,145,47)" fg:x="341066" fg:w="1105"/><text x="81.1430%" y="655.50"></text></g><g><title>`0x7FFC92DA2431 (438 samples, 0.10%)</title><rect x="81.1551%" y="645" width="0.1039%" height="15" fill="rgb(243,12,26)" fg:x="342171" fg:w="438"/><text x="81.4051%" y="655.50"></text></g><g><title>`0x7FFC92DA243B (1,133 samples, 0.27%)</title><rect x="81.2590%" y="645" width="0.2687%" height="15" fill="rgb(214,87,16)" fg:x="342609" fg:w="1133"/><text x="81.5090%" y="655.50"></text></g><g><title>`0x7FFC92DA2445 (476 samples, 0.11%)</title><rect x="81.5277%" y="645" width="0.1129%" height="15" fill="rgb(208,99,42)" fg:x="343742" fg:w="476"/><text x="81.7777%" y="655.50"></text></g><g><title>`0x7FFC92DA244C (1,241 samples, 0.29%)</title><rect x="81.6406%" y="645" width="0.2943%" height="15" fill="rgb(253,99,2)" fg:x="344218" fg:w="1241"/><text x="81.8906%" y="655.50"></text></g><g><title>`0x7FFC92DA2453 (514 samples, 0.12%)</title><rect x="81.9349%" y="645" width="0.1219%" height="15" fill="rgb(220,168,23)" fg:x="345459" fg:w="514"/><text x="82.1849%" y="655.50"></text></g><g><title>`0x7FFC92DA245A (977 samples, 0.23%)</title><rect x="82.0568%" y="645" width="0.2317%" height="15" fill="rgb(242,38,24)" fg:x="345973" fg:w="977"/><text x="82.3068%" y="655.50"></text></g><g><title>`0x7FFC92DA2461 (611 samples, 0.14%)</title><rect x="82.2886%" y="645" width="0.1449%" height="15" fill="rgb(225,182,9)" fg:x="346950" fg:w="611"/><text x="82.5386%" y="655.50"></text></g><g><title>`0x7FFC92DA2468 (1,306 samples, 0.31%)</title><rect x="82.4335%" y="645" width="0.3098%" height="15" fill="rgb(243,178,37)" fg:x="347561" fg:w="1306"/><text x="82.6835%" y="655.50"></text></g><g><title>`0x7FFC92DA246F (649 samples, 0.15%)</title><rect x="82.7432%" y="645" width="0.1539%" height="15" fill="rgb(232,139,19)" fg:x="348867" fg:w="649"/><text x="82.9932%" y="655.50"></text></g><g><title>`0x7FFC92DA2476 (1,583 samples, 0.38%)</title><rect x="82.8972%" y="645" width="0.3755%" height="15" fill="rgb(225,201,24)" fg:x="349516" fg:w="1583"/><text x="83.1472%" y="655.50"></text></g><g><title>`0x7FFC92DA247A (675 samples, 0.16%)</title><rect x="83.2726%" y="645" width="0.1601%" height="15" fill="rgb(221,47,46)" fg:x="351099" fg:w="675"/><text x="83.5226%" y="655.50"></text></g><g><title>`0x7FFC92DA247D (411 samples, 0.10%)</title><rect x="83.4327%" y="645" width="0.0975%" height="15" fill="rgb(249,23,13)" fg:x="351774" fg:w="411"/><text x="83.6827%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::AtomicUsize::store (146,469 samples, 34.74%)</title><rect x="48.7947%" y="677" width="34.7391%" height="15" fill="rgb(219,9,5)" fg:x="205731" fg:w="146469"/><text x="49.0447%" y="687.50">test_memfs_concurrency-db6c255382716182.exe`core::sync::..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::atomic_store (146,469 samples, 34.74%)</title><rect x="48.7947%" y="661" width="34.7391%" height="15" fill="rgb(254,171,16)" fg:x="205731" fg:w="146469"/><text x="49.0447%" y="671.50">test_memfs_concurrency-db6c255382716182.exe`core::sync::..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::result::Result&lt;usize,memfs::utils::MemFSErr&gt; &gt;::is_ok (319,523 samples, 75.78%)</title><rect x="7.7628%" y="725" width="75.7835%" height="15" fill="rgb(230,171,20)" fg:x="32730" fg:w="319523"/><text x="8.0128%" y="735.50">test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::result::Result&lt;usize,memfs::utils::MemFSErr&gt; &gt;::is_ok</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFS::write(unsigned long long, alloc::vec::Vec (158,823 samples, 37.67%)</title><rect x="45.8772%" y="709" width="37.6692%" height="15" fill="rgb(210,71,41)" fg:x="193430" fg:w="158823"/><text x="46.1272%" y="719.50">test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::Mem..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFSFileDescriptor::write_file(alloc::vec::Vec (152,279 samples, 36.12%)</title><rect x="47.4292%" y="693" width="36.1171%" height="15" fill="rgb(206,173,20)" fg:x="199974" fg:w="152279"/><text x="47.6792%" y="703.50">test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::M..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::utils::OpenFlag::contains (53 samples, 0.01%)</title><rect x="83.5337%" y="677" width="0.0126%" height="15" fill="rgb(233,88,34)" fg:x="352200" fg:w="53"/><text x="83.7837%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::utils::_::InternalBitFlags::contains (53 samples, 0.01%)</title><rect x="83.5337%" y="661" width="0.0126%" height="15" fill="rgb(223,209,46)" fg:x="352200" fg:w="53"/><text x="83.7837%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::utils::_::InternalBitFlags::bits (53 samples, 0.01%)</title><rect x="83.5337%" y="645" width="0.0126%" height="15" fill="rgb(250,43,18)" fg:x="352200" fg:w="53"/><text x="83.7837%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;dashmap::DashMap (2,653 samples, 0.63%)</title><rect x="85.0676%" y="693" width="0.6292%" height="15" fill="rgb(208,13,10)" fg:x="358667" fg:w="2653"/><text x="85.3176%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(dashmap::mapref::one::Ref (362 samples, 0.09%)</title><rect x="85.6968%" y="693" width="0.0859%" height="15" fill="rgb(212,200,36)" fg:x="361320" fg:w="362"/><text x="85.9468%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (362 samples, 0.09%)</title><rect x="85.6968%" y="677" width="0.0859%" height="15" fill="rgb(225,90,30)" fg:x="361320" fg:w="362"/><text x="85.9468%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`lock_api::rwlock::impl$18::drop(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (362 samples, 0.09%)</title><rect x="85.6968%" y="661" width="0.0859%" height="15" fill="rgb(236,182,39)" fg:x="361320" fg:w="362"/><text x="85.9468%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::unlock_shared (362 samples, 0.09%)</title><rect x="85.6968%" y="645" width="0.0859%" height="15" fill="rgb(212,144,35)" fg:x="361320" fg:w="362"/><text x="85.9468%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::DashMap&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState&gt;::determine_shard (79 samples, 0.02%)</title><rect x="86.5184%" y="677" width="0.0187%" height="15" fill="rgb(228,63,44)" fg:x="364784" fg:w="79"/><text x="86.7684%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::impls::impl$5::hash (67 samples, 0.02%)</title><rect x="86.5371%" y="661" width="0.0159%" height="15" fill="rgb(228,109,6)" fg:x="364863" fg:w="67"/><text x="86.7871%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::impls::impl$13::hash (60 samples, 0.01%)</title><rect x="86.5388%" y="645" width="0.0142%" height="15" fill="rgb(238,117,24)" fg:x="364870" fg:w="60"/><text x="86.7888%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::Hasher::write_usize (60 samples, 0.01%)</title><rect x="86.5388%" y="629" width="0.0142%" height="15" fill="rgb(242,26,26)" fg:x="364870" fg:w="60"/><text x="86.7888%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$1::build_hasher (13,169 samples, 3.12%)</title><rect x="86.5530%" y="661" width="3.1234%" height="15" fill="rgb(221,92,48)" fg:x="364930" fg:w="13169"/><text x="86.8030%" y="671.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::SipHasher13::new_with_keys (13,121 samples, 3.11%)</title><rect x="86.5644%" y="645" width="3.1120%" height="15" fill="rgb(209,209,32)" fg:x="364978" fg:w="13121"/><text x="86.8144%" y="655.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (13,121 samples, 3.11%)</title><rect x="86.5644%" y="629" width="3.1120%" height="15" fill="rgb(221,70,22)" fg:x="364978" fg:w="13121"/><text x="86.8144%" y="639.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (13,121 samples, 3.11%)</title><rect x="86.5644%" y="613" width="3.1120%" height="15" fill="rgb(248,145,5)" fg:x="364978" fg:w="13121"/><text x="86.8144%" y="623.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (97 samples, 0.02%)</title><rect x="89.8517%" y="581" width="0.0230%" height="15" fill="rgb(226,116,26)" fg:x="378838" fg:w="97"/><text x="90.1017%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (156 samples, 0.04%)</title><rect x="89.8431%" y="597" width="0.0370%" height="15" fill="rgb(244,5,17)" fg:x="378802" fg:w="156"/><text x="90.0931%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (64 samples, 0.02%)</title><rect x="89.8801%" y="597" width="0.0152%" height="15" fill="rgb(252,159,33)" fg:x="378958" fg:w="64"/><text x="90.1301%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (605 samples, 0.14%)</title><rect x="89.7537%" y="613" width="0.1435%" height="15" fill="rgb(206,71,0)" fg:x="378425" fg:w="605"/><text x="90.0037%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (100 samples, 0.02%)</title><rect x="89.9091%" y="597" width="0.0237%" height="15" fill="rgb(233,118,54)" fg:x="379080" fg:w="100"/><text x="90.1591%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (204 samples, 0.05%)</title><rect x="89.8972%" y="613" width="0.0484%" height="15" fill="rgb(234,83,48)" fg:x="379030" fg:w="204"/><text x="90.1472%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::wrapping_add (54 samples, 0.01%)</title><rect x="89.9328%" y="597" width="0.0128%" height="15" fill="rgb(228,3,54)" fg:x="379180" fg:w="54"/><text x="90.1828%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (275 samples, 0.07%)</title><rect x="89.9714%" y="597" width="0.0652%" height="15" fill="rgb(226,155,13)" fg:x="379343" fg:w="275"/><text x="90.2214%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::DashMap&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState&gt;::hash_u64 (14,897 samples, 3.53%)</title><rect x="86.5371%" y="677" width="3.5332%" height="15" fill="rgb(241,28,37)" fg:x="364863" fg:w="14897"/><text x="86.7871%" y="687.50">tes..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$4::finish (1,661 samples, 0.39%)</title><rect x="89.6764%" y="661" width="0.3940%" height="15" fill="rgb(233,93,10)" fg:x="378099" fg:w="1661"/><text x="89.9264%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$4::finish (1,661 samples, 0.39%)</title><rect x="89.6764%" y="645" width="0.3940%" height="15" fill="rgb(225,113,19)" fg:x="378099" fg:w="1661"/><text x="89.9264%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (1,661 samples, 0.39%)</title><rect x="89.6764%" y="629" width="0.3940%" height="15" fill="rgb(241,2,18)" fg:x="378099" fg:w="1661"/><text x="89.9264%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::d_rounds (526 samples, 0.12%)</title><rect x="89.9456%" y="613" width="0.1248%" height="15" fill="rgb(228,207,21)" fg:x="379234" fg:w="526"/><text x="90.1956%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::wrapping_add (142 samples, 0.03%)</title><rect x="90.0367%" y="597" width="0.0337%" height="15" fill="rgb(213,211,35)" fg:x="379618" fg:w="142"/><text x="90.2867%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::slice::index::impl$2::get_unchecked(unsigned long long, ptr_const$&lt;slice2$&lt;crossbeam_utils::cache_padded::CachePadded&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (55 samples, 0.01%)</title><rect x="90.0758%" y="645" width="0.0130%" height="15" fill="rgb(209,83,10)" fg:x="379783" fg:w="55"/><text x="90.3258%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::slice::index::get_noubcheck(ptr_const$&lt;slice2$&lt;crossbeam_utils::cache_padded::CachePadded&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (55 samples, 0.01%)</title><rect x="90.0758%" y="629" width="0.0130%" height="15" fill="rgb(209,164,1)" fg:x="379783" fg:w="55"/><text x="90.3258%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$11::checked_add (216 samples, 0.05%)</title><rect x="90.1446%" y="613" width="0.0512%" height="15" fill="rgb(213,184,43)" fg:x="380073" fg:w="216"/><text x="90.3946%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::intrinsics::unlikely (201 samples, 0.05%)</title><rect x="90.1481%" y="597" width="0.0477%" height="15" fill="rgb(231,61,34)" fg:x="380088" fg:w="201"/><text x="90.3981%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_yield_read_shard(dashmap::DashMap (537 samples, 0.13%)</title><rect x="90.0703%" y="677" width="0.1274%" height="15" fill="rgb(235,75,3)" fg:x="379760" fg:w="537"/><text x="90.3203%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::slice::impl$0::get_unchecked(ref$&lt;slice2$&lt;crossbeam_utils::cache_padded::CachePadded&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (514 samples, 0.12%)</title><rect x="90.0758%" y="661" width="0.1219%" height="15" fill="rgb(220,106,47)" fg:x="379783" fg:w="514"/><text x="90.3258%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::lock_shared (459 samples, 0.11%)</title><rect x="90.0888%" y="645" width="0.1089%" height="15" fill="rgb(210,196,33)" fg:x="379838" fg:w="459"/><text x="90.3388%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::RawRwLock::try_lock_shared_fast (224 samples, 0.05%)</title><rect x="90.1446%" y="629" width="0.0531%" height="15" fill="rgb(229,154,42)" fg:x="380073" fg:w="224"/><text x="90.3946%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTableInner::probe_seq (43 samples, 0.01%)</title><rect x="90.2710%" y="645" width="0.0102%" height="15" fill="rgb(228,114,26)" fg:x="380606" fg:w="43"/><text x="90.5210%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::h2 (380 samples, 0.09%)</title><rect x="90.2864%" y="645" width="0.0901%" height="15" fill="rgb(208,144,1)" fg:x="380671" fg:w="380"/><text x="90.5364%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::impl$8::find::closure$0(hashbrown::raw::inner::impl$8::find::closure_env$0&lt;tuple$&lt;usize,dashmap::util::SharedValue&lt;memfs::memfs::MemFSFileDescriptor&gt; &gt;,hashbrown::raw::inner::alloc::inner::Global,dashmap::impl$4::_get::closure_env$0 (63 samples, 0.01%)</title><rect x="90.3765%" y="645" width="0.0149%" height="15" fill="rgb(239,112,37)" fg:x="381051" fg:w="63"/><text x="90.6265%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue&lt;memfs::memfs::MemFSFileDescriptor&gt; &gt;,hashbrown::raw::inner::alloc::inner::Global&gt;::bucket (51 samples, 0.01%)</title><rect x="90.3794%" y="629" width="0.0121%" height="15" fill="rgb(210,96,50)" fg:x="381063" fg:w="51"/><text x="90.6294%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_get&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState,usize&gt;(dashmap::DashMap (19,602 samples, 4.65%)</title><rect x="85.7827%" y="693" width="4.6491%" height="15" fill="rgb(222,178,2)" fg:x="361682" fg:w="19602"/><text x="86.0327%" y="703.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue&lt;memfs::memfs::MemFSFileDescriptor&gt; &gt;,hashbrown::raw::inner::alloc::inner::Global&gt;::find(unsigned long long, dashmap::impl$4::_get::closure_env$0 (969 samples, 0.23%)</title><rect x="90.2020%" y="677" width="0.2298%" height="15" fill="rgb(226,74,18)" fg:x="380315" fg:w="969"/><text x="90.4520%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (969 samples, 0.23%)</title><rect x="90.2020%" y="661" width="0.2298%" height="15" fill="rgb(225,67,54)" fg:x="380315" fg:w="969"/><text x="90.4520%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::sse2::Group::match_byte (170 samples, 0.04%)</title><rect x="90.3915%" y="645" width="0.0403%" height="15" fill="rgb(251,92,32)" fg:x="381114" fg:w="170"/><text x="90.6415%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (170 samples, 0.04%)</title><rect x="90.3915%" y="629" width="0.0403%" height="15" fill="rgb(228,149,22)" fg:x="381114" fg:w="170"/><text x="90.6415%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;enum2$ (167 samples, 0.04%)</title><rect x="91.4711%" y="677" width="0.0396%" height="15" fill="rgb(243,54,13)" fg:x="385666" fg:w="167"/><text x="91.7211%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;enum2$&lt;memfs::memfs::MemFSEntry&gt;,alloc::alloc::Global&gt;::inner (167 samples, 0.04%)</title><rect x="91.4711%" y="661" width="0.0396%" height="15" fill="rgb(243,180,28)" fg:x="385666" fg:w="167"/><text x="91.7211%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;enum2$&lt;memfs::memfs::MemFSEntry&gt; &gt; &gt;::as_ref (167 samples, 0.04%)</title><rect x="91.4711%" y="645" width="0.0396%" height="15" fill="rgb(208,167,24)" fg:x="385666" fg:w="167"/><text x="91.7211%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;std::thread::Packet (354,157 samples, 84.00%)</title><rect x="7.5477%" y="805" width="83.9979%" height="15" fill="rgb(245,73,45)" fg:x="31823" fg:w="354157"/><text x="7.7977%" y="815.50">test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;std::thread::Packet</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::inner (354,157 samples, 84.00%)</title><rect x="7.5477%" y="789" width="83.9979%" height="15" fill="rgb(237,203,48)" fg:x="31823" fg:w="354157"/><text x="7.7977%" y="799.50">test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::inner</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;std::thread::Packet&lt;usize&gt; &gt; &gt;::as_ref (354,157 samples, 84.00%)</title><rect x="7.5477%" y="773" width="83.9979%" height="15" fill="rgb(211,197,16)" fg:x="31823" fg:w="354157"/><text x="7.7977%" y="783.50">test_memfs_concurrency-db6c255382716182.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;std::thread::Packet&lt;usize&gt; &gt; &gt;::as_ref</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;test_memfs_concurrency::helper_all_should_succeed_when_read_and_write_from_single_file_through_multiple_file_descriptors::closure_env$0,usize&gt; (354,156 samples, 84.00%)</title><rect x="7.5479%" y="757" width="83.9977%" height="15" fill="rgb(243,99,51)" fg:x="31824" fg:w="354156"/><text x="7.7979%" y="767.50">test_memfs_concurrency-db6c255382716182.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;test_memfs_concurrency::helper_all_should_succ..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::helper_all_should_succeed_when_read_and_write_from_single_file_through_multiple_file_descriptors::closure$0 (354,155 samples, 84.00%)</title><rect x="7.5482%" y="741" width="83.9974%" height="15" fill="rgb(215,123,29)" fg:x="31825" fg:w="354155"/><text x="7.7982%" y="751.50">test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::helper_all_should_succeed_when_read_and_write_from_single_file_through_m..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::result::Result&lt;usize,memfs::utils::MemFSErr&gt; &gt;::unwrap(enum2$&lt;core::result::Result (33,727 samples, 8.00%)</title><rect x="83.5463%" y="725" width="7.9993%" height="15" fill="rgb(239,186,37)" fg:x="352253" fg:w="33727"/><text x="83.7963%" y="735.50">test_memfs_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFS::lseek (33,727 samples, 8.00%)</title><rect x="83.5463%" y="709" width="7.9993%" height="15" fill="rgb(252,136,39)" fg:x="352253" fg:w="33727"/><text x="83.7963%" y="719.50">test_memfs_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFSFileDescriptor::seek_file (4,696 samples, 1.11%)</title><rect x="90.4318%" y="693" width="1.1138%" height="15" fill="rgb(223,213,32)" fg:x="381284" fg:w="4696"/><text x="90.6818%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::AtomicUsize::load (113 samples, 0.03%)</title><rect x="91.5188%" y="677" width="0.0268%" height="15" fill="rgb(233,115,5)" fg:x="385867" fg:w="113"/><text x="91.7688%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::atomic_load (113 samples, 0.03%)</title><rect x="91.5188%" y="661" width="0.0268%" height="15" fill="rgb(207,226,44)" fg:x="385867" fg:w="113"/><text x="91.7688%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;test_memfs_concurrency::helper_all_should_succeed_when_read_and_write_from_single_file_through_multiple_file_descriptors::closure_env$0,usize&gt;,tuple$&lt;&gt; &gt;(std::thread::impl$0::spawn_unchecked_::closure_env$1 (354,222 samples, 84.01%)</title><rect x="7.5465%" y="837" width="84.0133%" height="15" fill="rgb(208,126,0)" fg:x="31818" fg:w="354222"/><text x="7.7965%" y="847.50">test_memfs_concurrency-db6c255382716182.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;test..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1 (354,218 samples, 84.01%)</title><rect x="7.5474%" y="821" width="84.0124%" height="15" fill="rgb(244,66,21)" fg:x="31822" fg:w="354218"/><text x="7.7974%" y="831.50">test_memfs_concurrency-db6c255382716182.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_..</text></g><g><title>`0x7FFCA899478C (54 samples, 0.01%)</title><rect x="91.6952%" y="597" width="0.0128%" height="15" fill="rgb(222,97,12)" fg:x="386611" fg:w="54"/><text x="91.9452%" y="607.50"></text></g><g><title>`0x7FFCA899479E (50 samples, 0.01%)</title><rect x="91.7092%" y="597" width="0.0119%" height="15" fill="rgb(219,213,19)" fg:x="386670" fg:w="50"/><text x="91.9592%" y="607.50"></text></g><g><title>`0x7FFCA8995B11 (52 samples, 0.01%)</title><rect x="91.7681%" y="581" width="0.0123%" height="15" fill="rgb(252,169,30)" fg:x="386918" fg:w="52"/><text x="92.0181%" y="591.50"></text></g><g><title>`0x7FFCA8995BA1 (91 samples, 0.02%)</title><rect x="91.7939%" y="581" width="0.0216%" height="15" fill="rgb(206,32,51)" fg:x="387027" fg:w="91"/><text x="92.0439%" y="591.50"></text></g><g><title>`0x7FFCA8A1743A (80 samples, 0.02%)</title><rect x="91.8478%" y="581" width="0.0190%" height="15" fill="rgb(250,172,42)" fg:x="387254" fg:w="80"/><text x="92.0978%" y="591.50"></text></g><g><title>`0x7FFCA8A1744B (50 samples, 0.01%)</title><rect x="91.8736%" y="581" width="0.0119%" height="15" fill="rgb(209,34,43)" fg:x="387363" fg:w="50"/><text x="92.1236%" y="591.50"></text></g><g><title>`0x7FFCA8A17468 (59 samples, 0.01%)</title><rect x="91.8938%" y="581" width="0.0140%" height="15" fill="rgb(223,11,35)" fg:x="387448" fg:w="59"/><text x="92.1438%" y="591.50"></text></g><g><title>`0x7FFCA8A17473 (68 samples, 0.02%)</title><rect x="91.9092%" y="581" width="0.0161%" height="15" fill="rgb(251,219,26)" fg:x="387513" fg:w="68"/><text x="92.1592%" y="591.50"></text></g><g><title>`0x7FFCA8A17486 (49 samples, 0.01%)</title><rect x="91.9324%" y="581" width="0.0116%" height="15" fill="rgb(231,119,3)" fg:x="387611" fg:w="49"/><text x="92.1824%" y="591.50"></text></g><g><title>`0x7FFCA8A1753A (104 samples, 0.02%)</title><rect x="91.9822%" y="581" width="0.0247%" height="15" fill="rgb(216,97,11)" fg:x="387821" fg:w="104"/><text x="92.2322%" y="591.50"></text></g><g><title>`0x7FFCA8A1757A (94 samples, 0.02%)</title><rect x="92.0161%" y="581" width="0.0223%" height="15" fill="rgb(223,59,9)" fg:x="387964" fg:w="94"/><text x="92.2661%" y="591.50"></text></g><g><title>`0x7FFCA89947B1 (1,380 samples, 0.33%)</title><rect x="91.7225%" y="597" width="0.3273%" height="15" fill="rgb(233,93,31)" fg:x="386726" fg:w="1380"/><text x="91.9725%" y="607.50"></text></g><g><title>`0x7FFCA64AB65D (43 samples, 0.01%)</title><rect x="92.0920%" y="565" width="0.0102%" height="15" fill="rgb(239,81,33)" fg:x="388284" fg:w="43"/><text x="92.3420%" y="575.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(dashmap::mapref::one::Ref (2,093 samples, 0.50%)</title><rect x="91.6158%" y="693" width="0.4964%" height="15" fill="rgb(213,120,34)" fg:x="386276" fg:w="2093"/><text x="91.8658%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (2,093 samples, 0.50%)</title><rect x="91.6158%" y="677" width="0.4964%" height="15" fill="rgb(243,49,53)" fg:x="386276" fg:w="2093"/><text x="91.8658%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`lock_api::rwlock::impl$18::drop(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (2,093 samples, 0.50%)</title><rect x="91.6158%" y="661" width="0.4964%" height="15" fill="rgb(247,216,33)" fg:x="386276" fg:w="2093"/><text x="91.8658%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::unlock_shared (2,093 samples, 0.50%)</title><rect x="91.6158%" y="645" width="0.4964%" height="15" fill="rgb(226,26,14)" fg:x="386276" fg:w="2093"/><text x="91.8658%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::AtomicUsize::fetch_sub (1,812 samples, 0.43%)</title><rect x="91.6824%" y="629" width="0.4298%" height="15" fill="rgb(215,49,53)" fg:x="386557" fg:w="1812"/><text x="91.9324%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::atomic_sub (1,812 samples, 0.43%)</title><rect x="91.6824%" y="613" width="0.4298%" height="15" fill="rgb(245,162,40)" fg:x="386557" fg:w="1812"/><text x="91.9324%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (206 samples, 0.05%)</title><rect x="92.0633%" y="597" width="0.0489%" height="15" fill="rgb(229,68,17)" fg:x="388163" fg:w="206"/><text x="92.3133%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::alloc::windows::impl$0::dealloc (200 samples, 0.05%)</title><rect x="92.0648%" y="581" width="0.0474%" height="15" fill="rgb(213,182,10)" fg:x="388169" fg:w="200"/><text x="92.3148%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::impls::impl$5::hash (54 samples, 0.01%)</title><rect x="92.1317%" y="661" width="0.0128%" height="15" fill="rgb(245,125,30)" fg:x="388451" fg:w="54"/><text x="92.3817%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::impls::impl$13::hash (44 samples, 0.01%)</title><rect x="92.1340%" y="645" width="0.0104%" height="15" fill="rgb(232,202,2)" fg:x="388461" fg:w="44"/><text x="92.3840%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::Hasher::write_usize (44 samples, 0.01%)</title><rect x="92.1340%" y="629" width="0.0104%" height="15" fill="rgb(237,140,51)" fg:x="388461" fg:w="44"/><text x="92.3840%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$1::build_hasher (158 samples, 0.04%)</title><rect x="92.1445%" y="661" width="0.0375%" height="15" fill="rgb(236,157,25)" fg:x="388505" fg:w="158"/><text x="92.3945%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::SipHasher13::new_with_keys (120 samples, 0.03%)</title><rect x="92.1535%" y="645" width="0.0285%" height="15" fill="rgb(219,209,0)" fg:x="388543" fg:w="120"/><text x="92.4035%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (120 samples, 0.03%)</title><rect x="92.1535%" y="629" width="0.0285%" height="15" fill="rgb(240,116,54)" fg:x="388543" fg:w="120"/><text x="92.4035%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (120 samples, 0.03%)</title><rect x="92.1535%" y="613" width="0.0285%" height="15" fill="rgb(216,10,36)" fg:x="388543" fg:w="120"/><text x="92.4035%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (45 samples, 0.01%)</title><rect x="92.2417%" y="597" width="0.0107%" height="15" fill="rgb(222,72,44)" fg:x="388915" fg:w="45"/><text x="92.4917%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (245 samples, 0.06%)</title><rect x="92.2028%" y="613" width="0.0581%" height="15" fill="rgb(232,159,9)" fg:x="388751" fg:w="245"/><text x="92.4528%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (72 samples, 0.02%)</title><rect x="92.2609%" y="613" width="0.0171%" height="15" fill="rgb(210,39,32)" fg:x="388996" fg:w="72"/><text x="92.5109%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (81 samples, 0.02%)</title><rect x="92.2880%" y="597" width="0.0192%" height="15" fill="rgb(216,194,45)" fg:x="389110" fg:w="81"/><text x="92.5380%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::DashMap&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState&gt;::hash_u64 (803 samples, 0.19%)</title><rect x="92.1317%" y="677" width="0.1905%" height="15" fill="rgb(218,18,35)" fg:x="388451" fg:w="803"/><text x="92.3817%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$4::finish (591 samples, 0.14%)</title><rect x="92.1819%" y="661" width="0.1402%" height="15" fill="rgb(207,83,51)" fg:x="388663" fg:w="591"/><text x="92.4319%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$4::finish (591 samples, 0.14%)</title><rect x="92.1819%" y="645" width="0.1402%" height="15" fill="rgb(225,63,43)" fg:x="388663" fg:w="591"/><text x="92.4319%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (591 samples, 0.14%)</title><rect x="92.1819%" y="629" width="0.1402%" height="15" fill="rgb(207,57,36)" fg:x="388663" fg:w="591"/><text x="92.4319%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::d_rounds (186 samples, 0.04%)</title><rect x="92.2780%" y="613" width="0.0441%" height="15" fill="rgb(216,99,33)" fg:x="389068" fg:w="186"/><text x="92.5280%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::wrapping_add (63 samples, 0.01%)</title><rect x="92.3072%" y="597" width="0.0149%" height="15" fill="rgb(225,42,16)" fg:x="389191" fg:w="63"/><text x="92.5572%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$11::checked_add (73 samples, 0.02%)</title><rect x="92.3565%" y="613" width="0.0173%" height="15" fill="rgb(220,201,45)" fg:x="389399" fg:w="73"/><text x="92.6065%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::intrinsics::unlikely (72 samples, 0.02%)</title><rect x="92.3567%" y="597" width="0.0171%" height="15" fill="rgb(225,33,4)" fg:x="389400" fg:w="72"/><text x="92.6067%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_yield_read_shard(dashmap::DashMap (220 samples, 0.05%)</title><rect x="92.3221%" y="677" width="0.0522%" height="15" fill="rgb(224,33,50)" fg:x="389254" fg:w="220"/><text x="92.5721%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::slice::impl$0::get_unchecked(ref$&lt;slice2$&lt;crossbeam_utils::cache_padded::CachePadded&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (209 samples, 0.05%)</title><rect x="92.3247%" y="661" width="0.0496%" height="15" fill="rgb(246,198,51)" fg:x="389265" fg:w="209"/><text x="92.5747%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::lock_shared (186 samples, 0.04%)</title><rect x="92.3302%" y="645" width="0.0441%" height="15" fill="rgb(205,22,4)" fg:x="389288" fg:w="186"/><text x="92.5802%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::RawRwLock::try_lock_shared_fast (75 samples, 0.02%)</title><rect x="92.3565%" y="629" width="0.0178%" height="15" fill="rgb(206,3,8)" fg:x="389399" fg:w="75"/><text x="92.6065%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::h2 (221 samples, 0.05%)</title><rect x="92.4063%" y="645" width="0.0524%" height="15" fill="rgb(251,23,15)" fg:x="389609" fg:w="221"/><text x="92.6563%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_get&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState,usize&gt;(dashmap::DashMap (1,530 samples, 0.36%)</title><rect x="92.1122%" y="693" width="0.3629%" height="15" fill="rgb(252,88,28)" fg:x="388369" fg:w="1530"/><text x="92.3622%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue&lt;memfs::memfs::MemFSFileDescriptor&gt; &gt;,hashbrown::raw::inner::alloc::inner::Global&gt;::find(unsigned long long, dashmap::impl$4::_get::closure_env$0 (423 samples, 0.10%)</title><rect x="92.3748%" y="677" width="0.1003%" height="15" fill="rgb(212,127,14)" fg:x="389476" fg:w="423"/><text x="92.6248%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (423 samples, 0.10%)</title><rect x="92.3748%" y="661" width="0.1003%" height="15" fill="rgb(247,145,37)" fg:x="389476" fg:w="423"/><text x="92.6248%" y="671.50"></text></g><g><title>`0x7FFC92DA2301 (49 samples, 0.01%)</title><rect x="92.6081%" y="677" width="0.0116%" height="15" fill="rgb(209,117,53)" fg:x="390460" fg:w="49"/><text x="92.8581%" y="687.50"></text></g><g><title>`0x7FFC92DA2308 (52 samples, 0.01%)</title><rect x="92.6198%" y="677" width="0.0123%" height="15" fill="rgb(212,90,42)" fg:x="390509" fg:w="52"/><text x="92.8698%" y="687.50"></text></g><g><title>`0x7FFC92DA2354 (414 samples, 0.10%)</title><rect x="92.6392%" y="677" width="0.0982%" height="15" fill="rgb(218,164,37)" fg:x="390591" fg:w="414"/><text x="92.8892%" y="687.50"></text></g><g><title>`0x7FFC92DA2359 (166 samples, 0.04%)</title><rect x="92.7374%" y="677" width="0.0394%" height="15" fill="rgb(246,65,34)" fg:x="391005" fg:w="166"/><text x="92.9874%" y="687.50"></text></g><g><title>`0x7FFC92DA235E (289 samples, 0.07%)</title><rect x="92.7768%" y="677" width="0.0685%" height="15" fill="rgb(231,100,33)" fg:x="391171" fg:w="289"/><text x="93.0268%" y="687.50"></text></g><g><title>`0x7FFC92DA2363 (216 samples, 0.05%)</title><rect x="92.8453%" y="677" width="0.0512%" height="15" fill="rgb(228,126,14)" fg:x="391460" fg:w="216"/><text x="93.0953%" y="687.50"></text></g><g><title>`0x7FFC92DA2367 (223 samples, 0.05%)</title><rect x="92.8965%" y="677" width="0.0529%" height="15" fill="rgb(215,173,21)" fg:x="391676" fg:w="223"/><text x="93.1465%" y="687.50"></text></g><g><title>`0x7FFC92DA236C (193 samples, 0.05%)</title><rect x="92.9494%" y="677" width="0.0458%" height="15" fill="rgb(210,6,40)" fg:x="391899" fg:w="193"/><text x="93.1994%" y="687.50"></text></g><g><title>`0x7FFC92DA2371 (184 samples, 0.04%)</title><rect x="92.9952%" y="677" width="0.0436%" height="15" fill="rgb(212,48,18)" fg:x="392092" fg:w="184"/><text x="93.2452%" y="687.50"></text></g><g><title>`0x7FFC92DA2376 (195 samples, 0.05%)</title><rect x="93.0389%" y="677" width="0.0462%" height="15" fill="rgb(230,214,11)" fg:x="392276" fg:w="195"/><text x="93.2889%" y="687.50"></text></g><g><title>`0x7FFC92DA237E (411 samples, 0.10%)</title><rect x="93.0851%" y="677" width="0.0975%" height="15" fill="rgb(254,105,39)" fg:x="392471" fg:w="411"/><text x="93.3351%" y="687.50"></text></g><g><title>`0x7FFC92DA2386 (179 samples, 0.04%)</title><rect x="93.1826%" y="677" width="0.0425%" height="15" fill="rgb(245,158,5)" fg:x="392882" fg:w="179"/><text x="93.4326%" y="687.50"></text></g><g><title>`0x7FFC92DA238E (251 samples, 0.06%)</title><rect x="93.2250%" y="677" width="0.0595%" height="15" fill="rgb(249,208,11)" fg:x="393061" fg:w="251"/><text x="93.4750%" y="687.50"></text></g><g><title>`0x7FFC92DA2396 (136 samples, 0.03%)</title><rect x="93.2846%" y="677" width="0.0323%" height="15" fill="rgb(210,39,28)" fg:x="393312" fg:w="136"/><text x="93.5346%" y="687.50"></text></g><g><title>`0x7FFC92DA239E (303 samples, 0.07%)</title><rect x="93.3168%" y="677" width="0.0719%" height="15" fill="rgb(211,56,53)" fg:x="393448" fg:w="303"/><text x="93.5668%" y="687.50"></text></g><g><title>`0x7FFC92DA23A6 (190 samples, 0.05%)</title><rect x="93.3887%" y="677" width="0.0451%" height="15" fill="rgb(226,201,30)" fg:x="393751" fg:w="190"/><text x="93.6387%" y="687.50"></text></g><g><title>`0x7FFC92DA23AE (215 samples, 0.05%)</title><rect x="93.4338%" y="677" width="0.0510%" height="15" fill="rgb(239,101,34)" fg:x="393941" fg:w="215"/><text x="93.6838%" y="687.50"></text></g><g><title>`0x7FFC92DA23B6 (186 samples, 0.04%)</title><rect x="93.4847%" y="677" width="0.0441%" height="15" fill="rgb(226,209,5)" fg:x="394156" fg:w="186"/><text x="93.7347%" y="687.50"></text></g><g><title>`0x7FFC92DA23FF (64 samples, 0.02%)</title><rect x="93.5485%" y="677" width="0.0152%" height="15" fill="rgb(250,105,47)" fg:x="394425" fg:w="64"/><text x="93.7985%" y="687.50"></text></g><g><title>`0x7FFC92DA2413 (80 samples, 0.02%)</title><rect x="93.5670%" y="677" width="0.0190%" height="15" fill="rgb(230,72,3)" fg:x="394503" fg:w="80"/><text x="93.8170%" y="687.50"></text></g><g><title>`0x7FFCA899B283 (49 samples, 0.01%)</title><rect x="93.7172%" y="549" width="0.0116%" height="15" fill="rgb(232,218,39)" fg:x="395136" fg:w="49"/><text x="93.9672%" y="559.50"></text></g><g><title>`0x7FFCA899B6C3 (63 samples, 0.01%)</title><rect x="93.8339%" y="533" width="0.0149%" height="15" fill="rgb(248,166,6)" fg:x="395628" fg:w="63"/><text x="94.0839%" y="543.50"></text></g><g><title>`0x7FFCA899B6E3 (48 samples, 0.01%)</title><rect x="93.8533%" y="533" width="0.0114%" height="15" fill="rgb(247,89,20)" fg:x="395710" fg:w="48"/><text x="94.1033%" y="543.50"></text></g><g><title>`0x7FFCA899B73C (59 samples, 0.01%)</title><rect x="93.8777%" y="533" width="0.0140%" height="15" fill="rgb(248,130,54)" fg:x="395813" fg:w="59"/><text x="94.1277%" y="543.50"></text></g><g><title>`0x7FFCA899B748 (58 samples, 0.01%)</title><rect x="93.8920%" y="533" width="0.0138%" height="15" fill="rgb(234,196,4)" fg:x="395873" fg:w="58"/><text x="94.1420%" y="543.50"></text></g><g><title>`0x7FFCA899B7A2 (108 samples, 0.03%)</title><rect x="93.9207%" y="533" width="0.0256%" height="15" fill="rgb(250,143,31)" fg:x="395994" fg:w="108"/><text x="94.1707%" y="543.50"></text></g><g><title>`0x7FFCA899B862 (48 samples, 0.01%)</title><rect x="93.9838%" y="533" width="0.0114%" height="15" fill="rgb(211,110,34)" fg:x="396260" fg:w="48"/><text x="94.2338%" y="543.50"></text></g><g><title>`0x7FFCA8974452 (134 samples, 0.03%)</title><rect x="94.0409%" y="517" width="0.0318%" height="15" fill="rgb(215,124,48)" fg:x="396501" fg:w="134"/><text x="94.2909%" y="527.50"></text></g><g><title>`0x7FFCA897445C (45 samples, 0.01%)</title><rect x="94.0798%" y="517" width="0.0107%" height="15" fill="rgb(216,46,13)" fg:x="396665" fg:w="45"/><text x="94.3298%" y="527.50"></text></g><g><title>`0x7FFCA899B86B (463 samples, 0.11%)</title><rect x="93.9959%" y="533" width="0.1098%" height="15" fill="rgb(205,184,25)" fg:x="396311" fg:w="463"/><text x="94.2459%" y="543.50"></text></g><g><title>`0x7FFCA899B8A4 (196 samples, 0.05%)</title><rect x="94.1386%" y="533" width="0.0465%" height="15" fill="rgb(228,1,10)" fg:x="396913" fg:w="196"/><text x="94.3886%" y="543.50"></text></g><g><title>`0x7FFCA897A4EB (483 samples, 0.11%)</title><rect x="94.2141%" y="517" width="0.1146%" height="15" fill="rgb(213,116,27)" fg:x="397231" fg:w="483"/><text x="94.4641%" y="527.50"></text></g><g><title>`0x7FFCA899BA28 (521 samples, 0.12%)</title><rect x="94.2065%" y="533" width="0.1236%" height="15" fill="rgb(241,95,50)" fg:x="397199" fg:w="521"/><text x="94.4565%" y="543.50"></text></g><g><title>`0x7FFCA899B3C7 (2,249 samples, 0.53%)</title><rect x="93.7985%" y="549" width="0.5334%" height="15" fill="rgb(238,48,32)" fg:x="395479" fg:w="2249"/><text x="94.0485%" y="559.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::intrinsics::unlikely (74 samples, 0.02%)</title><rect x="94.3882%" y="533" width="0.0176%" height="15" fill="rgb(235,113,49)" fg:x="397965" fg:w="74"/><text x="94.6382%" y="543.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (3,136 samples, 0.74%)</title><rect x="93.6622%" y="613" width="0.7438%" height="15" fill="rgb(205,127,43)" fg:x="394904" fg:w="3136"/><text x="93.9122%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (3,136 samples, 0.74%)</title><rect x="93.6622%" y="597" width="0.7438%" height="15" fill="rgb(250,162,2)" fg:x="394904" fg:w="3136"/><text x="93.9122%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (3,136 samples, 0.74%)</title><rect x="93.6622%" y="581" width="0.7438%" height="15" fill="rgb(220,13,41)" fg:x="394904" fg:w="3136"/><text x="93.9122%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (3,136 samples, 0.74%)</title><rect x="93.6622%" y="565" width="0.7438%" height="15" fill="rgb(249,221,25)" fg:x="394904" fg:w="3136"/><text x="93.9122%" y="575.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::alloc::windows::process_heap_alloc (129 samples, 0.03%)</title><rect x="94.3753%" y="549" width="0.0306%" height="15" fill="rgb(215,208,19)" fg:x="397911" fg:w="129"/><text x="94.6253%" y="559.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (3,138 samples, 0.74%)</title><rect x="93.6622%" y="661" width="0.7443%" height="15" fill="rgb(236,175,2)" fg:x="394904" fg:w="3138"/><text x="93.9122%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (3,138 samples, 0.74%)</title><rect x="93.6622%" y="645" width="0.7443%" height="15" fill="rgb(241,52,2)" fg:x="394904" fg:w="3138"/><text x="93.9122%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (3,138 samples, 0.74%)</title><rect x="93.6622%" y="629" width="0.7443%" height="15" fill="rgb(248,140,14)" fg:x="394904" fg:w="3138"/><text x="93.9122%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$11::saturating_add (3,265 samples, 0.77%)</title><rect x="93.6508%" y="677" width="0.7744%" height="15" fill="rgb(253,22,42)" fg:x="394856" fg:w="3265"/><text x="93.9008%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (79 samples, 0.02%)</title><rect x="94.4064%" y="661" width="0.0187%" height="15" fill="rgb(234,61,47)" fg:x="398042" fg:w="79"/><text x="94.6564%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (56 samples, 0.01%)</title><rect x="94.4119%" y="645" width="0.0133%" height="15" fill="rgb(208,226,15)" fg:x="398065" fg:w="56"/><text x="94.6619%" y="655.50"></text></g><g><title>`0x7FFC92DA2354 (378 samples, 0.09%)</title><rect x="94.4754%" y="645" width="0.0897%" height="15" fill="rgb(217,221,4)" fg:x="398333" fg:w="378"/><text x="94.7254%" y="655.50"></text></g><g><title>`0x7FFC92DA2359 (80 samples, 0.02%)</title><rect x="94.5651%" y="645" width="0.0190%" height="15" fill="rgb(212,174,34)" fg:x="398711" fg:w="80"/><text x="94.8151%" y="655.50"></text></g><g><title>`0x7FFC92DA235E (155 samples, 0.04%)</title><rect x="94.5841%" y="645" width="0.0368%" height="15" fill="rgb(253,83,4)" fg:x="398791" fg:w="155"/><text x="94.8341%" y="655.50"></text></g><g><title>`0x7FFC92DA2363 (139 samples, 0.03%)</title><rect x="94.6208%" y="645" width="0.0330%" height="15" fill="rgb(250,195,49)" fg:x="398946" fg:w="139"/><text x="94.8708%" y="655.50"></text></g><g><title>`0x7FFC92DA2367 (316 samples, 0.07%)</title><rect x="94.6538%" y="645" width="0.0749%" height="15" fill="rgb(241,192,25)" fg:x="399085" fg:w="316"/><text x="94.9038%" y="655.50"></text></g><g><title>`0x7FFC92DA236C (204 samples, 0.05%)</title><rect x="94.7287%" y="645" width="0.0484%" height="15" fill="rgb(208,124,10)" fg:x="399401" fg:w="204"/><text x="94.9787%" y="655.50"></text></g><g><title>`0x7FFC92DA2371 (227 samples, 0.05%)</title><rect x="94.7771%" y="645" width="0.0538%" height="15" fill="rgb(222,33,0)" fg:x="399605" fg:w="227"/><text x="95.0271%" y="655.50"></text></g><g><title>`0x7FFC92DA2376 (178 samples, 0.04%)</title><rect x="94.8310%" y="645" width="0.0422%" height="15" fill="rgb(234,209,28)" fg:x="399832" fg:w="178"/><text x="95.0810%" y="655.50"></text></g><g><title>`0x7FFC92DA237E (293 samples, 0.07%)</title><rect x="94.8732%" y="645" width="0.0695%" height="15" fill="rgb(224,11,23)" fg:x="400010" fg:w="293"/><text x="95.1232%" y="655.50"></text></g><g><title>`0x7FFC92DA2386 (66 samples, 0.02%)</title><rect x="94.9427%" y="645" width="0.0157%" height="15" fill="rgb(232,99,1)" fg:x="400303" fg:w="66"/><text x="95.1927%" y="655.50"></text></g><g><title>`0x7FFC92DA238E (94 samples, 0.02%)</title><rect x="94.9583%" y="645" width="0.0223%" height="15" fill="rgb(237,95,45)" fg:x="400369" fg:w="94"/><text x="95.2083%" y="655.50"></text></g><g><title>`0x7FFC92DA2396 (47 samples, 0.01%)</title><rect x="94.9806%" y="645" width="0.0111%" height="15" fill="rgb(208,109,11)" fg:x="400463" fg:w="47"/><text x="95.2306%" y="655.50"></text></g><g><title>`0x7FFC92DA239E (362 samples, 0.09%)</title><rect x="94.9918%" y="645" width="0.0859%" height="15" fill="rgb(216,190,48)" fg:x="400510" fg:w="362"/><text x="95.2418%" y="655.50"></text></g><g><title>`0x7FFC92DA23A6 (199 samples, 0.05%)</title><rect x="95.0776%" y="645" width="0.0472%" height="15" fill="rgb(251,171,36)" fg:x="400872" fg:w="199"/><text x="95.3276%" y="655.50"></text></g><g><title>`0x7FFC92DA23AE (256 samples, 0.06%)</title><rect x="95.1248%" y="645" width="0.0607%" height="15" fill="rgb(230,62,22)" fg:x="401071" fg:w="256"/><text x="95.3748%" y="655.50"></text></g><g><title>`0x7FFC92DA23B6 (170 samples, 0.04%)</title><rect x="95.1855%" y="645" width="0.0403%" height="15" fill="rgb(225,114,35)" fg:x="401327" fg:w="170"/><text x="95.4355%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::AtomicUsize::fetch_add (3,692 samples, 0.88%)</title><rect x="94.4323%" y="677" width="0.8757%" height="15" fill="rgb(215,118,42)" fg:x="398151" fg:w="3692"/><text x="94.6823%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::atomic_add (3,692 samples, 0.88%)</title><rect x="94.4323%" y="661" width="0.8757%" height="15" fill="rgb(243,119,21)" fg:x="398151" fg:w="3692"/><text x="94.6823%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::result::Result&lt;usize,memfs::utils::MemFSErr&gt; &gt;::is_ok (15,740 samples, 3.73%)</title><rect x="91.5821%" y="725" width="3.7332%" height="15" fill="rgb(252,177,53)" fg:x="386134" fg:w="15740"/><text x="91.8321%" y="735.50">test..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFS::read(unsigned long long, alloc::vec::Vec (15,699 samples, 3.72%)</title><rect x="91.5918%" y="709" width="3.7234%" height="15" fill="rgb(237,209,29)" fg:x="386175" fg:w="15699"/><text x="91.8418%" y="719.50">test..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFSFileDescriptor::read_file(alloc::vec::Vec (11,975 samples, 2.84%)</title><rect x="92.4751%" y="693" width="2.8402%" height="15" fill="rgb(212,65,23)" fg:x="389899" fg:w="11975"/><text x="92.7251%" y="703.50">te..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(dashmap::mapref::one::Ref (222 samples, 0.05%)</title><rect x="95.3416%" y="693" width="0.0527%" height="15" fill="rgb(230,222,46)" fg:x="401985" fg:w="222"/><text x="95.5916%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (222 samples, 0.05%)</title><rect x="95.3416%" y="677" width="0.0527%" height="15" fill="rgb(215,135,32)" fg:x="401985" fg:w="222"/><text x="95.5916%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`lock_api::rwlock::impl$18::drop(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (222 samples, 0.05%)</title><rect x="95.3416%" y="661" width="0.0527%" height="15" fill="rgb(246,101,22)" fg:x="401985" fg:w="222"/><text x="95.5916%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::unlock_shared (222 samples, 0.05%)</title><rect x="95.3416%" y="645" width="0.0527%" height="15" fill="rgb(206,107,13)" fg:x="401985" fg:w="222"/><text x="95.5916%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$1::build_hasher (119 samples, 0.03%)</title><rect x="95.4289%" y="661" width="0.0282%" height="15" fill="rgb(250,100,44)" fg:x="402353" fg:w="119"/><text x="95.6789%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::SipHasher13::new_with_keys (81 samples, 0.02%)</title><rect x="95.4379%" y="645" width="0.0192%" height="15" fill="rgb(231,147,38)" fg:x="402391" fg:w="81"/><text x="95.6879%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (81 samples, 0.02%)</title><rect x="95.4379%" y="629" width="0.0192%" height="15" fill="rgb(229,8,40)" fg:x="402391" fg:w="81"/><text x="95.6879%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (81 samples, 0.02%)</title><rect x="95.4379%" y="613" width="0.0192%" height="15" fill="rgb(221,135,30)" fg:x="402391" fg:w="81"/><text x="95.6879%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (52 samples, 0.01%)</title><rect x="95.5581%" y="581" width="0.0123%" height="15" fill="rgb(249,193,18)" fg:x="402898" fg:w="52"/><text x="95.8081%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (86 samples, 0.02%)</title><rect x="95.5532%" y="597" width="0.0204%" height="15" fill="rgb(209,133,39)" fg:x="402877" fg:w="86"/><text x="95.8032%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (344 samples, 0.08%)</title><rect x="95.4996%" y="613" width="0.0816%" height="15" fill="rgb(232,100,14)" fg:x="402651" fg:w="344"/><text x="95.7496%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (69 samples, 0.02%)</title><rect x="95.5876%" y="597" width="0.0164%" height="15" fill="rgb(224,185,1)" fg:x="403022" fg:w="69"/><text x="95.8376%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (117 samples, 0.03%)</title><rect x="95.5812%" y="613" width="0.0277%" height="15" fill="rgb(223,139,8)" fg:x="402995" fg:w="117"/><text x="95.8312%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (142 samples, 0.03%)</title><rect x="95.6241%" y="597" width="0.0337%" height="15" fill="rgb(232,213,38)" fg:x="403176" fg:w="142"/><text x="95.8741%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::DashMap&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState&gt;::hash_u64 (1,071 samples, 0.25%)</title><rect x="95.4230%" y="677" width="0.2540%" height="15" fill="rgb(207,94,22)" fg:x="402328" fg:w="1071"/><text x="95.6730%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$4::finish (927 samples, 0.22%)</title><rect x="95.4571%" y="661" width="0.2199%" height="15" fill="rgb(219,183,54)" fg:x="402472" fg:w="927"/><text x="95.7071%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$4::finish (927 samples, 0.22%)</title><rect x="95.4571%" y="645" width="0.2199%" height="15" fill="rgb(216,185,54)" fg:x="402472" fg:w="927"/><text x="95.7071%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (927 samples, 0.22%)</title><rect x="95.4571%" y="629" width="0.2199%" height="15" fill="rgb(254,217,39)" fg:x="402472" fg:w="927"/><text x="95.7071%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::d_rounds (287 samples, 0.07%)</title><rect x="95.6089%" y="613" width="0.0681%" height="15" fill="rgb(240,178,23)" fg:x="403112" fg:w="287"/><text x="95.8589%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::wrapping_add (81 samples, 0.02%)</title><rect x="95.6578%" y="597" width="0.0192%" height="15" fill="rgb(218,11,47)" fg:x="403318" fg:w="81"/><text x="95.9078%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$11::checked_add (138 samples, 0.03%)</title><rect x="95.7135%" y="613" width="0.0327%" height="15" fill="rgb(218,51,51)" fg:x="403553" fg:w="138"/><text x="95.9635%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::intrinsics::unlikely (121 samples, 0.03%)</title><rect x="95.7175%" y="597" width="0.0287%" height="15" fill="rgb(238,126,27)" fg:x="403570" fg:w="121"/><text x="95.9675%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_yield_read_shard(dashmap::DashMap (304 samples, 0.07%)</title><rect x="95.6770%" y="677" width="0.0721%" height="15" fill="rgb(249,202,22)" fg:x="403399" fg:w="304"/><text x="95.9270%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::slice::impl$0::get_unchecked(ref$&lt;slice2$&lt;crossbeam_utils::cache_padded::CachePadded&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (283 samples, 0.07%)</title><rect x="95.6820%" y="661" width="0.0671%" height="15" fill="rgb(254,195,49)" fg:x="403420" fg:w="283"/><text x="95.9320%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::lock_shared (265 samples, 0.06%)</title><rect x="95.6862%" y="645" width="0.0629%" height="15" fill="rgb(208,123,14)" fg:x="403438" fg:w="265"/><text x="95.9362%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::RawRwLock::try_lock_shared_fast (150 samples, 0.04%)</title><rect x="95.7135%" y="629" width="0.0356%" height="15" fill="rgb(224,200,8)" fg:x="403553" fg:w="150"/><text x="95.9635%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::h2 (194 samples, 0.05%)</title><rect x="95.7970%" y="645" width="0.0460%" height="15" fill="rgb(217,61,36)" fg:x="403905" fg:w="194"/><text x="96.0470%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::impl$8::find::closure$0(hashbrown::raw::inner::impl$8::find::closure_env$0&lt;tuple$&lt;usize,dashmap::util::SharedValue&lt;memfs::memfs::MemFSFileDescriptor&gt; &gt;,hashbrown::raw::inner::alloc::inner::Global,dashmap::impl$4::_get::closure_env$0 (44 samples, 0.01%)</title><rect x="95.8430%" y="645" width="0.0104%" height="15" fill="rgb(206,35,45)" fg:x="404099" fg:w="44"/><text x="96.0930%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_get&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState,usize&gt;(dashmap::DashMap (2,008 samples, 0.48%)</title><rect x="95.3943%" y="693" width="0.4763%" height="15" fill="rgb(217,65,33)" fg:x="402207" fg:w="2008"/><text x="95.6443%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue&lt;memfs::memfs::MemFSFileDescriptor&gt; &gt;,hashbrown::raw::inner::alloc::inner::Global&gt;::find(unsigned long long, dashmap::impl$4::_get::closure_env$0 (497 samples, 0.12%)</title><rect x="95.7526%" y="677" width="0.1179%" height="15" fill="rgb(222,158,48)" fg:x="403718" fg:w="497"/><text x="96.0026%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (497 samples, 0.12%)</title><rect x="95.7526%" y="661" width="0.1179%" height="15" fill="rgb(254,2,54)" fg:x="403718" fg:w="497"/><text x="96.0026%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::sse2::Group::match_byte (72 samples, 0.02%)</title><rect x="95.8534%" y="645" width="0.0171%" height="15" fill="rgb(250,143,38)" fg:x="404143" fg:w="72"/><text x="96.1034%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (72 samples, 0.02%)</title><rect x="95.8534%" y="629" width="0.0171%" height="15" fill="rgb(248,25,0)" fg:x="404143" fg:w="72"/><text x="96.1034%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;enum2$ (106 samples, 0.03%)</title><rect x="95.9059%" y="677" width="0.0251%" height="15" fill="rgb(206,152,27)" fg:x="404364" fg:w="106"/><text x="96.1559%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;enum2$&lt;memfs::memfs::MemFSEntry&gt;,alloc::alloc::Global&gt;::inner (106 samples, 0.03%)</title><rect x="95.9059%" y="661" width="0.0251%" height="15" fill="rgb(240,77,30)" fg:x="404364" fg:w="106"/><text x="96.1559%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;enum2$&lt;memfs::memfs::MemFSEntry&gt; &gt; &gt;::as_ref (106 samples, 0.03%)</title><rect x="95.9059%" y="645" width="0.0251%" height="15" fill="rgb(231,5,3)" fg:x="404364" fg:w="106"/><text x="96.1559%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;std::thread::Packet (18,499 samples, 4.39%)</title><rect x="91.5610%" y="805" width="4.3875%" height="15" fill="rgb(207,226,32)" fg:x="386045" fg:w="18499"/><text x="91.8110%" y="815.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::inner (18,499 samples, 4.39%)</title><rect x="91.5610%" y="789" width="4.3875%" height="15" fill="rgb(222,207,47)" fg:x="386045" fg:w="18499"/><text x="91.8110%" y="799.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;std::thread::Packet&lt;usize&gt; &gt; &gt;::as_ref (18,499 samples, 4.39%)</title><rect x="91.5610%" y="773" width="4.3875%" height="15" fill="rgb(229,115,45)" fg:x="386045" fg:w="18499"/><text x="91.8110%" y="783.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;test_memfs_concurrency::helper_all_should_succeed_when_reading_from_single_file_through_multiple_file_descriptors::closure_env$0,usize&gt; (18,499 samples, 4.39%)</title><rect x="91.5610%" y="757" width="4.3875%" height="15" fill="rgb(224,191,6)" fg:x="386045" fg:w="18499"/><text x="91.8110%" y="767.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::helper_all_should_succeed_when_reading_from_single_file_through_multiple_file_descriptors::closure$0 (18,499 samples, 4.39%)</title><rect x="91.5610%" y="741" width="4.3875%" height="15" fill="rgb(230,227,24)" fg:x="386045" fg:w="18499"/><text x="91.8110%" y="751.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::result::Result&lt;usize,memfs::utils::MemFSErr&gt; &gt;::unwrap(enum2$&lt;core::result::Result (2,670 samples, 0.63%)</title><rect x="95.3153%" y="725" width="0.6333%" height="15" fill="rgb(228,80,19)" fg:x="401874" fg:w="2670"/><text x="95.5653%" y="735.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFS::lseek (2,670 samples, 0.63%)</title><rect x="95.3153%" y="709" width="0.6333%" height="15" fill="rgb(247,229,0)" fg:x="401874" fg:w="2670"/><text x="95.5653%" y="719.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFSFileDescriptor::seek_file (329 samples, 0.08%)</title><rect x="95.8705%" y="693" width="0.0780%" height="15" fill="rgb(237,194,15)" fg:x="404215" fg:w="329"/><text x="96.1205%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::AtomicUsize::load (55 samples, 0.01%)</title><rect x="95.9355%" y="677" width="0.0130%" height="15" fill="rgb(219,203,20)" fg:x="404489" fg:w="55"/><text x="96.1855%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::atomic_load (55 samples, 0.01%)</title><rect x="95.9355%" y="661" width="0.0130%" height="15" fill="rgb(234,128,8)" fg:x="404489" fg:w="55"/><text x="96.1855%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;test_memfs_concurrency::helper_all_should_succeed_when_reading_from_single_file_through_multiple_file_descriptors::closure_env$0,usize&gt;,tuple$&lt;&gt; &gt;(std::thread::impl$0::spawn_unchecked_::closure_env$1 (18,562 samples, 4.40%)</title><rect x="91.5598%" y="837" width="4.4025%" height="15" fill="rgb(248,202,8)" fg:x="386040" fg:w="18562"/><text x="91.8098%" y="847.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1 (18,558 samples, 4.40%)</title><rect x="91.5608%" y="821" width="4.4015%" height="15" fill="rgb(206,104,37)" fg:x="386044" fg:w="18558"/><text x="91.8108%" y="831.50">test_..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::from_elem (47 samples, 0.01%)</title><rect x="95.9723%" y="725" width="0.0111%" height="15" fill="rgb(223,8,27)" fg:x="404644" fg:w="47"/><text x="96.2223%" y="735.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::spec_from_elem::impl$3::from_elem (47 samples, 0.01%)</title><rect x="95.9723%" y="709" width="0.0111%" height="15" fill="rgb(216,217,28)" fg:x="404644" fg:w="47"/><text x="96.2223%" y="719.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;dashmap::DashMap (202 samples, 0.05%)</title><rect x="96.0221%" y="693" width="0.0479%" height="15" fill="rgb(249,199,1)" fg:x="404854" fg:w="202"/><text x="96.2721%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(dashmap::mapref::one::Ref (401 samples, 0.10%)</title><rect x="96.0700%" y="693" width="0.0951%" height="15" fill="rgb(240,85,17)" fg:x="405056" fg:w="401"/><text x="96.3200%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (401 samples, 0.10%)</title><rect x="96.0700%" y="677" width="0.0951%" height="15" fill="rgb(206,108,45)" fg:x="405056" fg:w="401"/><text x="96.3200%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`lock_api::rwlock::impl$18::drop(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (401 samples, 0.10%)</title><rect x="96.0700%" y="661" width="0.0951%" height="15" fill="rgb(245,210,41)" fg:x="405056" fg:w="401"/><text x="96.3200%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::unlock_shared (401 samples, 0.10%)</title><rect x="96.0700%" y="645" width="0.0951%" height="15" fill="rgb(206,13,37)" fg:x="405056" fg:w="401"/><text x="96.3200%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::DashMap&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState&gt;::determine_shard (57 samples, 0.01%)</title><rect x="96.1800%" y="677" width="0.0135%" height="15" fill="rgb(250,61,18)" fg:x="405520" fg:w="57"/><text x="96.4300%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::impls::impl$5::hash (50 samples, 0.01%)</title><rect x="96.1935%" y="661" width="0.0119%" height="15" fill="rgb(235,172,48)" fg:x="405577" fg:w="50"/><text x="96.4435%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$1::build_hasher (233 samples, 0.06%)</title><rect x="96.2054%" y="661" width="0.0553%" height="15" fill="rgb(249,201,17)" fg:x="405627" fg:w="233"/><text x="96.4554%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::SipHasher13::new_with_keys (190 samples, 0.05%)</title><rect x="96.2156%" y="645" width="0.0451%" height="15" fill="rgb(219,208,6)" fg:x="405670" fg:w="190"/><text x="96.4656%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (190 samples, 0.05%)</title><rect x="96.2156%" y="629" width="0.0451%" height="15" fill="rgb(248,31,23)" fg:x="405670" fg:w="190"/><text x="96.4656%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (190 samples, 0.05%)</title><rect x="96.2156%" y="613" width="0.0451%" height="15" fill="rgb(245,15,42)" fg:x="405670" fg:w="190"/><text x="96.4656%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (43 samples, 0.01%)</title><rect x="96.3280%" y="581" width="0.0102%" height="15" fill="rgb(222,217,39)" fg:x="406144" fg:w="43"/><text x="96.5780%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (59 samples, 0.01%)</title><rect x="96.3252%" y="597" width="0.0140%" height="15" fill="rgb(210,219,27)" fg:x="406132" fg:w="59"/><text x="96.5752%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (249 samples, 0.06%)</title><rect x="96.2877%" y="613" width="0.0591%" height="15" fill="rgb(252,166,36)" fg:x="405974" fg:w="249"/><text x="96.5377%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (70 samples, 0.02%)</title><rect x="96.3468%" y="613" width="0.0166%" height="15" fill="rgb(245,132,34)" fg:x="406223" fg:w="70"/><text x="96.5968%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (82 samples, 0.02%)</title><rect x="96.3738%" y="597" width="0.0194%" height="15" fill="rgb(236,54,3)" fg:x="406337" fg:w="82"/><text x="96.6238%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::DashMap&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState&gt;::hash_u64 (894 samples, 0.21%)</title><rect x="96.1935%" y="677" width="0.2120%" height="15" fill="rgb(241,173,43)" fg:x="405577" fg:w="894"/><text x="96.4435%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$4::finish (611 samples, 0.14%)</title><rect x="96.2607%" y="661" width="0.1449%" height="15" fill="rgb(215,190,9)" fg:x="405860" fg:w="611"/><text x="96.5107%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$4::finish (611 samples, 0.14%)</title><rect x="96.2607%" y="645" width="0.1449%" height="15" fill="rgb(242,101,16)" fg:x="405860" fg:w="611"/><text x="96.5107%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (611 samples, 0.14%)</title><rect x="96.2607%" y="629" width="0.1449%" height="15" fill="rgb(223,190,21)" fg:x="405860" fg:w="611"/><text x="96.5107%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::d_rounds (178 samples, 0.04%)</title><rect x="96.3634%" y="613" width="0.0422%" height="15" fill="rgb(215,228,25)" fg:x="406293" fg:w="178"/><text x="96.6134%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::wrapping_add (52 samples, 0.01%)</title><rect x="96.3932%" y="597" width="0.0123%" height="15" fill="rgb(225,36,22)" fg:x="406419" fg:w="52"/><text x="96.6432%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_yield_read_shard(dashmap::DashMap (268 samples, 0.06%)</title><rect x="96.4056%" y="677" width="0.0636%" height="15" fill="rgb(251,106,46)" fg:x="406471" fg:w="268"/><text x="96.6556%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::slice::impl$0::get_unchecked(ref$&lt;slice2$&lt;crossbeam_utils::cache_padded::CachePadded&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (256 samples, 0.06%)</title><rect x="96.4084%" y="661" width="0.0607%" height="15" fill="rgb(208,90,1)" fg:x="406483" fg:w="256"/><text x="96.6584%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::lock_shared (225 samples, 0.05%)</title><rect x="96.4158%" y="645" width="0.0534%" height="15" fill="rgb(243,10,4)" fg:x="406514" fg:w="225"/><text x="96.6658%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::RawRwLock::try_lock_shared_fast (122 samples, 0.03%)</title><rect x="96.4402%" y="629" width="0.0289%" height="15" fill="rgb(212,137,27)" fg:x="406617" fg:w="122"/><text x="96.6902%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$11::checked_add (122 samples, 0.03%)</title><rect x="96.4402%" y="613" width="0.0289%" height="15" fill="rgb(231,220,49)" fg:x="406617" fg:w="122"/><text x="96.6902%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::intrinsics::unlikely (121 samples, 0.03%)</title><rect x="96.4404%" y="597" width="0.0287%" height="15" fill="rgb(237,96,20)" fg:x="406618" fg:w="121"/><text x="96.6904%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::h2 (199 samples, 0.05%)</title><rect x="96.5019%" y="645" width="0.0472%" height="15" fill="rgb(239,229,30)" fg:x="406877" fg:w="199"/><text x="96.7519%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_get&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState,usize&gt;(dashmap::DashMap (1,724 samples, 0.41%)</title><rect x="96.1651%" y="693" width="0.4089%" height="15" fill="rgb(219,65,33)" fg:x="405457" fg:w="1724"/><text x="96.4151%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue&lt;memfs::memfs::MemFSFileDescriptor&gt; &gt;,hashbrown::raw::inner::alloc::inner::Global&gt;::find(unsigned long long, dashmap::impl$4::_get::closure_env$0 (442 samples, 0.10%)</title><rect x="96.4691%" y="677" width="0.1048%" height="15" fill="rgb(243,134,7)" fg:x="406739" fg:w="442"/><text x="96.7191%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (442 samples, 0.10%)</title><rect x="96.4691%" y="661" width="0.1048%" height="15" fill="rgb(216,177,54)" fg:x="406739" fg:w="442"/><text x="96.7191%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::sse2::Group::match_byte (70 samples, 0.02%)</title><rect x="96.5574%" y="645" width="0.0166%" height="15" fill="rgb(211,160,20)" fg:x="407111" fg:w="70"/><text x="96.8074%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (70 samples, 0.02%)</title><rect x="96.5574%" y="629" width="0.0166%" height="15" fill="rgb(239,85,39)" fg:x="407111" fg:w="70"/><text x="96.8074%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::ops::range::Range (190 samples, 0.05%)</title><rect x="96.6335%" y="677" width="0.0451%" height="15" fill="rgb(232,125,22)" fg:x="407432" fg:w="190"/><text x="96.8835%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::vec::impl$9::deref_mut(alloc::vec::Vec (190 samples, 0.05%)</title><rect x="96.6335%" y="661" width="0.0451%" height="15" fill="rgb(244,57,34)" fg:x="407432" fg:w="190"/><text x="96.8835%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::slice::index::impl$4::index_mut(core::ops::range::Range&lt;usize&gt;, ref_mut$&lt;slice2$ (188 samples, 0.04%)</title><rect x="96.6340%" y="645" width="0.0446%" height="15" fill="rgb(214,203,32)" fg:x="407434" fg:w="188"/><text x="96.8840%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::AtomicUsize::fetch_max (717 samples, 0.17%)</title><rect x="96.6819%" y="677" width="0.1701%" height="15" fill="rgb(207,58,43)" fg:x="407636" fg:w="717"/><text x="96.9319%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::atomic_umax (717 samples, 0.17%)</title><rect x="96.6819%" y="661" width="0.1701%" height="15" fill="rgb(215,193,15)" fg:x="407636" fg:w="717"/><text x="96.9319%" y="671.50"></text></g><g><title>`0x7FFC92DA2301 (150 samples, 0.04%)</title><rect x="96.8603%" y="645" width="0.0356%" height="15" fill="rgb(232,15,44)" fg:x="408388" fg:w="150"/><text x="97.1103%" y="655.50"></text></g><g><title>`0x7FFC92DA2354 (123 samples, 0.03%)</title><rect x="96.9003%" y="645" width="0.0292%" height="15" fill="rgb(212,3,48)" fg:x="408557" fg:w="123"/><text x="97.1503%" y="655.50"></text></g><g><title>`0x7FFC92DA2359 (58 samples, 0.01%)</title><rect x="96.9295%" y="645" width="0.0138%" height="15" fill="rgb(218,128,7)" fg:x="408680" fg:w="58"/><text x="97.1795%" y="655.50"></text></g><g><title>`0x7FFC92DA235E (104 samples, 0.02%)</title><rect x="96.9433%" y="645" width="0.0247%" height="15" fill="rgb(226,216,39)" fg:x="408738" fg:w="104"/><text x="97.1933%" y="655.50"></text></g><g><title>`0x7FFC92DA2363 (187 samples, 0.04%)</title><rect x="96.9679%" y="645" width="0.0444%" height="15" fill="rgb(243,47,51)" fg:x="408842" fg:w="187"/><text x="97.2179%" y="655.50"></text></g><g><title>`0x7FFC92DA2367 (193 samples, 0.05%)</title><rect x="97.0123%" y="645" width="0.0458%" height="15" fill="rgb(241,183,40)" fg:x="409029" fg:w="193"/><text x="97.2623%" y="655.50"></text></g><g><title>`0x7FFC92DA236C (177 samples, 0.04%)</title><rect x="97.0581%" y="645" width="0.0420%" height="15" fill="rgb(231,217,32)" fg:x="409222" fg:w="177"/><text x="97.3081%" y="655.50"></text></g><g><title>`0x7FFC92DA2371 (232 samples, 0.06%)</title><rect x="97.1000%" y="645" width="0.0550%" height="15" fill="rgb(229,61,38)" fg:x="409399" fg:w="232"/><text x="97.3500%" y="655.50"></text></g><g><title>`0x7FFC92DA2376 (216 samples, 0.05%)</title><rect x="97.1551%" y="645" width="0.0512%" height="15" fill="rgb(225,210,5)" fg:x="409631" fg:w="216"/><text x="97.4051%" y="655.50"></text></g><g><title>`0x7FFC92DA237E (108 samples, 0.03%)</title><rect x="97.2063%" y="645" width="0.0256%" height="15" fill="rgb(231,79,45)" fg:x="409847" fg:w="108"/><text x="97.4563%" y="655.50"></text></g><g><title>`0x7FFC92DA238E (68 samples, 0.02%)</title><rect x="97.2378%" y="645" width="0.0161%" height="15" fill="rgb(224,100,7)" fg:x="409980" fg:w="68"/><text x="97.4878%" y="655.50"></text></g><g><title>`0x7FFC92DA2396 (58 samples, 0.01%)</title><rect x="97.2540%" y="645" width="0.0138%" height="15" fill="rgb(241,198,18)" fg:x="410048" fg:w="58"/><text x="97.5040%" y="655.50"></text></g><g><title>`0x7FFC92DA239E (363 samples, 0.09%)</title><rect x="97.2677%" y="645" width="0.0861%" height="15" fill="rgb(252,97,53)" fg:x="410106" fg:w="363"/><text x="97.5177%" y="655.50"></text></g><g><title>`0x7FFC92DA23A6 (192 samples, 0.05%)</title><rect x="97.3538%" y="645" width="0.0455%" height="15" fill="rgb(220,88,7)" fg:x="410469" fg:w="192"/><text x="97.6038%" y="655.50"></text></g><g><title>`0x7FFC92DA23AE (234 samples, 0.06%)</title><rect x="97.3994%" y="645" width="0.0555%" height="15" fill="rgb(213,176,14)" fg:x="410661" fg:w="234"/><text x="97.6494%" y="655.50"></text></g><g><title>`0x7FFC92DA23B6 (166 samples, 0.04%)</title><rect x="97.4549%" y="645" width="0.0394%" height="15" fill="rgb(246,73,7)" fg:x="410895" fg:w="166"/><text x="97.7049%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::AtomicUsize::store (2,968 samples, 0.70%)</title><rect x="96.8519%" y="677" width="0.7039%" height="15" fill="rgb(245,64,36)" fg:x="408353" fg:w="2968"/><text x="97.1019%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::atomic_store (2,968 samples, 0.70%)</title><rect x="96.8519%" y="661" width="0.7039%" height="15" fill="rgb(245,80,10)" fg:x="408353" fg:w="2968"/><text x="97.1019%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::result::Result&lt;usize,memfs::utils::MemFSErr&gt; &gt;::is_ok (6,636 samples, 1.57%)</title><rect x="95.9936%" y="725" width="1.5739%" height="15" fill="rgb(232,107,50)" fg:x="404734" fg:w="6636"/><text x="96.2436%" y="735.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFS::write(unsigned long long, alloc::vec::Vec (6,607 samples, 1.57%)</title><rect x="96.0005%" y="709" width="1.5670%" height="15" fill="rgb(253,3,0)" fg:x="404763" fg:w="6607"/><text x="96.2505%" y="719.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFSFileDescriptor::write_file(alloc::vec::Vec (4,189 samples, 0.99%)</title><rect x="96.5740%" y="693" width="0.9935%" height="15" fill="rgb(212,99,53)" fg:x="407181" fg:w="4189"/><text x="96.8240%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::utils::OpenFlag::contains (49 samples, 0.01%)</title><rect x="97.5559%" y="677" width="0.0116%" height="15" fill="rgb(249,111,54)" fg:x="411321" fg:w="49"/><text x="97.8059%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::utils::_::InternalBitFlags::contains (49 samples, 0.01%)</title><rect x="97.5559%" y="661" width="0.0116%" height="15" fill="rgb(249,55,30)" fg:x="411321" fg:w="49"/><text x="97.8059%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::utils::_::InternalBitFlags::bits (49 samples, 0.01%)</title><rect x="97.5559%" y="645" width="0.0116%" height="15" fill="rgb(237,47,42)" fg:x="411321" fg:w="49"/><text x="97.8059%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;dashmap::DashMap (404 samples, 0.10%)</title><rect x="97.5886%" y="693" width="0.0958%" height="15" fill="rgb(211,20,18)" fg:x="411459" fg:w="404"/><text x="97.8386%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(dashmap::mapref::one::Ref (275 samples, 0.07%)</title><rect x="97.6844%" y="693" width="0.0652%" height="15" fill="rgb(231,203,46)" fg:x="411863" fg:w="275"/><text x="97.9344%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::drop_in_place(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (275 samples, 0.07%)</title><rect x="97.6844%" y="677" width="0.0652%" height="15" fill="rgb(237,142,3)" fg:x="411863" fg:w="275"/><text x="97.9344%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`lock_api::rwlock::impl$18::drop(lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (275 samples, 0.07%)</title><rect x="97.6844%" y="661" width="0.0652%" height="15" fill="rgb(241,107,1)" fg:x="411863" fg:w="275"/><text x="97.9344%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::unlock_shared (275 samples, 0.07%)</title><rect x="97.6844%" y="645" width="0.0652%" height="15" fill="rgb(229,83,13)" fg:x="411863" fg:w="275"/><text x="97.9344%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::DashMap&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState&gt;::determine_shard (67 samples, 0.02%)</title><rect x="97.7665%" y="677" width="0.0159%" height="15" fill="rgb(241,91,40)" fg:x="412209" fg:w="67"/><text x="98.0165%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$1::build_hasher (973 samples, 0.23%)</title><rect x="97.7871%" y="661" width="0.2308%" height="15" fill="rgb(225,3,45)" fg:x="412296" fg:w="973"/><text x="98.0371%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::SipHasher13::new_with_keys (925 samples, 0.22%)</title><rect x="97.7985%" y="645" width="0.2194%" height="15" fill="rgb(244,223,14)" fg:x="412344" fg:w="925"/><text x="98.0485%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (925 samples, 0.22%)</title><rect x="97.7985%" y="629" width="0.2194%" height="15" fill="rgb(224,124,37)" fg:x="412344" fg:w="925"/><text x="98.0485%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (925 samples, 0.22%)</title><rect x="97.7985%" y="613" width="0.2194%" height="15" fill="rgb(251,171,30)" fg:x="412344" fg:w="925"/><text x="98.0485%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (44 samples, 0.01%)</title><rect x="98.0860%" y="581" width="0.0104%" height="15" fill="rgb(236,46,54)" fg:x="413556" fg:w="44"/><text x="98.3360%" y="591.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (66 samples, 0.02%)</title><rect x="98.0819%" y="597" width="0.0157%" height="15" fill="rgb(245,213,5)" fg:x="413539" fg:w="66"/><text x="98.3319%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (236 samples, 0.06%)</title><rect x="98.0483%" y="613" width="0.0560%" height="15" fill="rgb(230,144,27)" fg:x="413397" fg:w="236"/><text x="98.2983%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::c_rounds (73 samples, 0.02%)</title><rect x="98.1042%" y="613" width="0.0173%" height="15" fill="rgb(220,86,6)" fg:x="413633" fg:w="73"/><text x="98.3542%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::rotate_left (171 samples, 0.04%)</title><rect x="98.1365%" y="597" width="0.0406%" height="15" fill="rgb(240,20,13)" fg:x="413769" fg:w="171"/><text x="98.3865%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::DashMap&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState&gt;::hash_u64 (1,735 samples, 0.41%)</title><rect x="97.7824%" y="677" width="0.4115%" height="15" fill="rgb(217,89,34)" fg:x="412276" fg:w="1735"/><text x="98.0324%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::hash::random::impl$4::finish (742 samples, 0.18%)</title><rect x="98.0179%" y="661" width="0.1760%" height="15" fill="rgb(229,13,5)" fg:x="413269" fg:w="742"/><text x="98.2679%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$4::finish (742 samples, 0.18%)</title><rect x="98.0179%" y="645" width="0.1760%" height="15" fill="rgb(244,67,35)" fg:x="413269" fg:w="742"/><text x="98.2679%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (742 samples, 0.18%)</title><rect x="98.0179%" y="629" width="0.1760%" height="15" fill="rgb(221,40,2)" fg:x="413269" fg:w="742"/><text x="98.2679%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::hash::sip::impl$8::d_rounds (305 samples, 0.07%)</title><rect x="98.1216%" y="613" width="0.0723%" height="15" fill="rgb(237,157,21)" fg:x="413706" fg:w="305"/><text x="98.3716%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$9::wrapping_add (71 samples, 0.02%)</title><rect x="98.1771%" y="597" width="0.0168%" height="15" fill="rgb(222,94,11)" fg:x="413940" fg:w="71"/><text x="98.4271%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::num::impl$11::checked_add (119 samples, 0.03%)</title><rect x="98.2328%" y="613" width="0.0282%" height="15" fill="rgb(249,113,6)" fg:x="414175" fg:w="119"/><text x="98.4828%" y="623.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::intrinsics::unlikely (119 samples, 0.03%)</title><rect x="98.2328%" y="597" width="0.0282%" height="15" fill="rgb(238,137,36)" fg:x="414175" fg:w="119"/><text x="98.4828%" y="607.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_yield_read_shard(dashmap::DashMap (285 samples, 0.07%)</title><rect x="98.1939%" y="677" width="0.0676%" height="15" fill="rgb(210,102,26)" fg:x="414011" fg:w="285"/><text x="98.4439%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::slice::impl$0::get_unchecked(ref$&lt;slice2$&lt;crossbeam_utils::cache_padded::CachePadded&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue (268 samples, 0.06%)</title><rect x="98.1979%" y="661" width="0.0636%" height="15" fill="rgb(218,30,30)" fg:x="414028" fg:w="268"/><text x="98.4479%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::impl$0::lock_shared (253 samples, 0.06%)</title><rect x="98.2015%" y="645" width="0.0600%" height="15" fill="rgb(214,67,26)" fg:x="414043" fg:w="253"/><text x="98.4515%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::lock::RawRwLock::try_lock_shared_fast (121 samples, 0.03%)</title><rect x="98.2328%" y="629" width="0.0287%" height="15" fill="rgb(251,9,53)" fg:x="414175" fg:w="121"/><text x="98.4828%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::h2 (205 samples, 0.05%)</title><rect x="98.3035%" y="645" width="0.0486%" height="15" fill="rgb(228,204,25)" fg:x="414473" fg:w="205"/><text x="98.5535%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`dashmap::impl$4::_get&lt;usize,memfs::memfs::MemFSFileDescriptor,std::hash::random::RandomState,usize&gt;(dashmap::DashMap (2,656 samples, 0.63%)</title><rect x="97.7497%" y="693" width="0.6299%" height="15" fill="rgb(207,153,8)" fg:x="412138" fg:w="2656"/><text x="97.9997%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,dashmap::util::SharedValue&lt;memfs::memfs::MemFSFileDescriptor&gt; &gt;,hashbrown::raw::inner::alloc::inner::Global&gt;::find(unsigned long long, dashmap::impl$4::_get::closure_env$0 (498 samples, 0.12%)</title><rect x="98.2615%" y="677" width="0.1181%" height="15" fill="rgb(242,9,16)" fg:x="414296" fg:w="498"/><text x="98.5115%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (498 samples, 0.12%)</title><rect x="98.2615%" y="661" width="0.1181%" height="15" fill="rgb(217,211,10)" fg:x="414296" fg:w="498"/><text x="98.5115%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`hashbrown::raw::inner::sse2::Group::match_byte (90 samples, 0.02%)</title><rect x="98.3583%" y="645" width="0.0213%" height="15" fill="rgb(219,228,52)" fg:x="414704" fg:w="90"/><text x="98.6083%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (90 samples, 0.02%)</title><rect x="98.3583%" y="629" width="0.0213%" height="15" fill="rgb(231,92,29)" fg:x="414704" fg:w="90"/><text x="98.6083%" y="639.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;enum2$ (92 samples, 0.02%)</title><rect x="98.4598%" y="677" width="0.0218%" height="15" fill="rgb(232,8,23)" fg:x="415132" fg:w="92"/><text x="98.7098%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;enum2$&lt;memfs::memfs::MemFSEntry&gt;,alloc::alloc::Global&gt;::inner (92 samples, 0.02%)</title><rect x="98.4598%" y="661" width="0.0218%" height="15" fill="rgb(216,211,34)" fg:x="415132" fg:w="92"/><text x="98.7098%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;enum2$&lt;memfs::memfs::MemFSEntry&gt; &gt; &gt;::as_ref (92 samples, 0.02%)</title><rect x="98.4598%" y="645" width="0.0218%" height="15" fill="rgb(236,151,0)" fg:x="415132" fg:w="92"/><text x="98.7098%" y="655.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;std::thread::Packet (10,701 samples, 2.54%)</title><rect x="95.9628%" y="805" width="2.5380%" height="15" fill="rgb(209,168,3)" fg:x="404604" fg:w="10701"/><text x="96.2128%" y="815.50">te..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;usize&gt;,alloc::alloc::Global&gt;::inner (10,701 samples, 2.54%)</title><rect x="95.9628%" y="789" width="2.5380%" height="15" fill="rgb(208,129,28)" fg:x="404604" fg:w="10701"/><text x="96.2128%" y="799.50">te..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;std::thread::Packet&lt;usize&gt; &gt; &gt;::as_ref (10,701 samples, 2.54%)</title><rect x="95.9628%" y="773" width="2.5380%" height="15" fill="rgb(229,78,22)" fg:x="404604" fg:w="10701"/><text x="96.2128%" y="783.50">te..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;test_memfs_concurrency::helper_all_should_succeed_when_writing_on_multiple_files_without_o_append::closure_env$0,usize&gt; (10,700 samples, 2.54%)</title><rect x="95.9630%" y="757" width="2.5378%" height="15" fill="rgb(228,187,13)" fg:x="404605" fg:w="10700"/><text x="96.2130%" y="767.50">te..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`test_memfs_concurrency::helper_all_should_succeed_when_writing_on_multiple_files_without_o_append::closure$0 (10,700 samples, 2.54%)</title><rect x="95.9630%" y="741" width="2.5378%" height="15" fill="rgb(240,119,24)" fg:x="404605" fg:w="10700"/><text x="96.2130%" y="751.50">te..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`enum2$&lt;core::result::Result&lt;usize,memfs::utils::MemFSErr&gt; &gt;::unwrap(enum2$&lt;core::result::Result (3,935 samples, 0.93%)</title><rect x="97.5675%" y="725" width="0.9333%" height="15" fill="rgb(209,194,42)" fg:x="411370" fg:w="3935"/><text x="97.8175%" y="735.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFS::lseek (3,932 samples, 0.93%)</title><rect x="97.5682%" y="709" width="0.9326%" height="15" fill="rgb(247,200,46)" fg:x="411373" fg:w="3932"/><text x="97.8182%" y="719.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`memfs::memfs::MemFSFileDescriptor::seek_file (511 samples, 0.12%)</title><rect x="98.3796%" y="693" width="0.1212%" height="15" fill="rgb(218,76,16)" fg:x="414794" fg:w="511"/><text x="98.6296%" y="703.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::AtomicUsize::load (63 samples, 0.01%)</title><rect x="98.4859%" y="677" width="0.0149%" height="15" fill="rgb(225,21,48)" fg:x="415242" fg:w="63"/><text x="98.7359%" y="687.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::sync::atomic::atomic_load (63 samples, 0.01%)</title><rect x="98.4859%" y="661" width="0.0149%" height="15" fill="rgb(239,223,50)" fg:x="415242" fg:w="63"/><text x="98.7359%" y="671.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;test_memfs_concurrency::helper_all_should_succeed_when_writing_on_multiple_files_without_o_append::closure_env$0,usize&gt;,tuple$&lt;&gt; &gt;(std::thread::impl$0::spawn_unchecked_::closure_env$1 (10,734 samples, 2.55%)</title><rect x="95.9623%" y="837" width="2.5459%" height="15" fill="rgb(244,45,21)" fg:x="404602" fg:w="10734"/><text x="96.2123%" y="847.50">te..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1 (10,732 samples, 2.55%)</title><rect x="95.9628%" y="821" width="2.5454%" height="15" fill="rgb(232,33,43)" fg:x="404604" fg:w="10732"/><text x="96.2128%" y="831.50">te..</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::boxed::impl$28::call_once (414,186 samples, 98.24%)</title><rect x="0.2749%" y="901" width="98.2354%" height="15" fill="rgb(209,8,3)" fg:x="1159" fg:w="414186"/><text x="0.5249%" y="911.50">test_memfs_concurrency-db6c255382716182.exe`alloc::boxed::impl$28::call_once</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::boxed::impl$8::drop (414,186 samples, 98.24%)</title><rect x="0.2749%" y="885" width="98.2354%" height="15" fill="rgb(214,25,53)" fg:x="1159" fg:w="414186"/><text x="0.5249%" y="895.50">test_memfs_concurrency-db6c255382716182.exe`alloc::boxed::impl$8::drop</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::alloc::layout::Layout::for_value_raw (414,183 samples, 98.23%)</title><rect x="0.2756%" y="869" width="98.2347%" height="15" fill="rgb(254,186,54)" fg:x="1162" fg:w="414183"/><text x="0.5256%" y="879.50">test_memfs_concurrency-db6c255382716182.exe`core::alloc::layout::Layout::for_value_raw</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::mem::size_of_val_raw (414,183 samples, 98.23%)</title><rect x="0.2756%" y="853" width="98.2347%" height="15" fill="rgb(208,174,49)" fg:x="1162" fg:w="414183"/><text x="0.5256%" y="863.50">test_memfs_concurrency-db6c255382716182.exe`core::mem::size_of_val_raw</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`alloc::boxed::impl$28::call_once (414,899 samples, 98.40%)</title><rect x="0.1141%" y="917" width="98.4045%" height="15" fill="rgb(233,191,51)" fg:x="481" fg:w="414899"/><text x="0.3641%" y="927.50">test_memfs_concurrency-db6c255382716182.exe`alloc::boxed::impl$28::call_once</text></g><g><title>`0x7FFCA7F17374 (414,978 samples, 98.42%)</title><rect x="0.0956%" y="949" width="98.4232%" height="15" fill="rgb(222,134,10)" fg:x="403" fg:w="414978"/><text x="0.3456%" y="959.50">`0x7FFCA7F17374</text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::pal::windows::thread::impl$0::new::thread_start (414,929 samples, 98.41%)</title><rect x="0.1072%" y="933" width="98.4116%" height="15" fill="rgb(230,226,20)" fg:x="452" fg:w="414929"/><text x="0.3572%" y="943.50">test_memfs_concurrency-db6c255382716182.exe`std::sys::pal::windows::thread::impl$0::new::thread_start</text></g><g><title>`0x7FFCA60DF957 (92 samples, 0.02%)</title><rect x="98.5485%" y="885" width="0.0218%" height="15" fill="rgb(251,111,25)" fg:x="415506" fg:w="92"/><text x="98.7985%" y="895.50"></text></g><g><title>`0x7FFCA89CF3A5 (165 samples, 0.04%)</title><rect x="98.5406%" y="901" width="0.0391%" height="15" fill="rgb(224,40,46)" fg:x="415473" fg:w="165"/><text x="98.7906%" y="911.50"></text></g><g><title>`0x7FFCA8987498 (207 samples, 0.05%)</title><rect x="98.5309%" y="917" width="0.0491%" height="15" fill="rgb(236,108,47)" fg:x="415432" fg:w="207"/><text x="98.7809%" y="927.50"></text></g><g><title>`0x7FFCA89874ED (139 samples, 0.03%)</title><rect x="98.5800%" y="917" width="0.0330%" height="15" fill="rgb(234,93,0)" fg:x="415639" fg:w="139"/><text x="98.8300%" y="927.50"></text></g><g><title>`0x7FFCA89D0022 (110 samples, 0.03%)</title><rect x="98.5869%" y="901" width="0.0261%" height="15" fill="rgb(224,213,32)" fg:x="415668" fg:w="110"/><text x="98.8369%" y="911.50"></text></g><g><title>`0x7FFCA8A0D574 (94 samples, 0.02%)</title><rect x="98.5907%" y="885" width="0.0223%" height="15" fill="rgb(251,11,48)" fg:x="415684" fg:w="94"/><text x="98.8407%" y="895.50"></text></g><g><title>`0x7FFCA64A08CD (43 samples, 0.01%)</title><rect x="98.6403%" y="885" width="0.0102%" height="15" fill="rgb(236,173,5)" fg:x="415893" fg:w="43"/><text x="98.8903%" y="895.50"></text></g><g><title>`0x7FFCA8989A1D (142 samples, 0.03%)</title><rect x="98.6270%" y="901" width="0.0337%" height="15" fill="rgb(230,95,12)" fg:x="415837" fg:w="142"/><text x="98.8770%" y="911.50"></text></g><g><title>`0x7FFCA89875B6 (145 samples, 0.03%)</title><rect x="98.6265%" y="917" width="0.0344%" height="15" fill="rgb(232,209,1)" fg:x="415835" fg:w="145"/><text x="98.8765%" y="927.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::cell::RefCell::borrow_mut (46 samples, 0.01%)</title><rect x="98.6671%" y="837" width="0.0109%" height="15" fill="rgb(232,6,1)" fg:x="416006" fg:w="46"/><text x="98.9171%" y="847.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::cell::RefCell::try_borrow_mut (46 samples, 0.01%)</title><rect x="98.6671%" y="821" width="0.0109%" height="15" fill="rgb(210,224,50)" fg:x="416006" fg:w="46"/><text x="98.9171%" y="831.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`core::cell::BorrowRefMut::new (46 samples, 0.01%)</title><rect x="98.6671%" y="805" width="0.0109%" height="15" fill="rgb(228,127,35)" fg:x="416006" fg:w="46"/><text x="98.9171%" y="815.50"></text></g><g><title>`0x7FFCA8989A1D (89 samples, 0.02%)</title><rect x="98.6652%" y="885" width="0.0211%" height="15" fill="rgb(245,102,45)" fg:x="415998" fg:w="89"/><text x="98.9152%" y="895.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::thread_local::guard::windows::tls_callback (89 samples, 0.02%)</title><rect x="98.6652%" y="869" width="0.0211%" height="15" fill="rgb(214,1,49)" fg:x="415998" fg:w="89"/><text x="98.9152%" y="879.50"></text></g><g><title>test_memfs_concurrency-db6c255382716182.exe`std::sys::thread_local::destructors::list::run (88 samples, 0.02%)</title><rect x="98.6654%" y="853" width="0.0209%" height="15" fill="rgb(226,163,40)" fg:x="415999" fg:w="88"/><text x="98.9154%" y="863.50"></text></g><g><title>`0x7FFCA8989AFF (90 samples, 0.02%)</title><rect x="98.6652%" y="901" width="0.0213%" height="15" fill="rgb(239,212,28)" fg:x="415998" fg:w="90"/><text x="98.9152%" y="911.50"></text></g><g><title>`0x7FFCA898763B (98 samples, 0.02%)</title><rect x="98.6635%" y="917" width="0.0232%" height="15" fill="rgb(220,20,13)" fg:x="415991" fg:w="98"/><text x="98.9135%" y="927.50"></text></g><g><title>`0x7FFCA8987660 (247 samples, 0.06%)</title><rect x="98.6877%" y="917" width="0.0586%" height="15" fill="rgb(210,164,35)" fg:x="416093" fg:w="247"/><text x="98.9377%" y="927.50"></text></g><g><title>`0x7FFCA8A0D6B4 (237 samples, 0.06%)</title><rect x="98.6901%" y="901" width="0.0562%" height="15" fill="rgb(248,109,41)" fg:x="416103" fg:w="237"/><text x="98.9401%" y="911.50"></text></g><g><title>`0x7FFCA89E153C (52 samples, 0.01%)</title><rect x="98.7534%" y="901" width="0.0123%" height="15" fill="rgb(238,23,50)" fg:x="416370" fg:w="52"/><text x="99.0034%" y="911.50"></text></g><g><title>`0x7FFCA89947B1 (52 samples, 0.01%)</title><rect x="98.7534%" y="885" width="0.0123%" height="15" fill="rgb(211,48,49)" fg:x="416370" fg:w="52"/><text x="99.0034%" y="895.50"></text></g><g><title>`0x7FFCA8987665 (113 samples, 0.03%)</title><rect x="98.7463%" y="917" width="0.0268%" height="15" fill="rgb(223,36,21)" fg:x="416340" fg:w="113"/><text x="98.9963%" y="927.50"></text></g><g><title>`0x7FFCA898767F (46 samples, 0.01%)</title><rect x="98.7731%" y="917" width="0.0109%" height="15" fill="rgb(207,123,46)" fg:x="416453" fg:w="46"/><text x="99.0231%" y="927.50"></text></g><g><title>`0x7FFCA89BEC6E (1,079 samples, 0.26%)</title><rect x="98.5300%" y="933" width="0.2559%" height="15" fill="rgb(240,218,32)" fg:x="415428" fg:w="1079"/><text x="98.7800%" y="943.50"></text></g><g><title>`0x7FFCA89BCC91 (416,136 samples, 98.70%)</title><rect x="0.0932%" y="965" width="98.6979%" height="15" fill="rgb(252,5,43)" fg:x="393" fg:w="416136"/><text x="0.3432%" y="975.50">`0x7FFCA89BCC91</text></g><g><title>`0x7FFCA7F1737D (1,145 samples, 0.27%)</title><rect x="98.5195%" y="949" width="0.2716%" height="15" fill="rgb(252,84,19)" fg:x="415384" fg:w="1145"/><text x="98.7695%" y="959.50"></text></g><g><title>`0x7FFCA89E5C10 (868 samples, 0.21%)</title><rect x="98.7911%" y="965" width="0.2059%" height="15" fill="rgb(243,152,39)" fg:x="416529" fg:w="868"/><text x="99.0411%" y="975.50"></text></g><g><title>`0x7FFCA899B27B (76 samples, 0.02%)</title><rect x="99.0352%" y="869" width="0.0180%" height="15" fill="rgb(234,160,15)" fg:x="417558" fg:w="76"/><text x="99.2852%" y="879.50"></text></g><g><title>`0x7FFCA897A4EB (226 samples, 0.05%)</title><rect x="99.0897%" y="837" width="0.0536%" height="15" fill="rgb(237,34,20)" fg:x="417788" fg:w="226"/><text x="99.3397%" y="847.50"></text></g><g><title>`0x7FFCA899BA28 (277 samples, 0.07%)</title><rect x="99.0781%" y="853" width="0.0657%" height="15" fill="rgb(229,97,13)" fg:x="417739" fg:w="277"/><text x="99.3281%" y="863.50"></text></g><g><title>`0x7FFCA899B3C7 (419 samples, 0.10%)</title><rect x="99.0613%" y="869" width="0.0994%" height="15" fill="rgb(234,71,50)" fg:x="417668" fg:w="419"/><text x="99.3113%" y="879.50"></text></g><g><title>`0x7FFCA89C4CDF (567 samples, 0.13%)</title><rect x="99.0264%" y="885" width="0.1345%" height="15" fill="rgb(253,155,4)" fg:x="417521" fg:w="567"/><text x="99.2764%" y="895.50"></text></g><g><title>`0x7FFCA89C4B2D (592 samples, 0.14%)</title><rect x="99.0221%" y="901" width="0.1404%" height="15" fill="rgb(222,185,37)" fg:x="417503" fg:w="592"/><text x="99.2721%" y="911.50"></text></g><g><title>`0x7FFCA89C4BD5 (85 samples, 0.02%)</title><rect x="99.1644%" y="901" width="0.0202%" height="15" fill="rgb(251,177,13)" fg:x="418103" fg:w="85"/><text x="99.4144%" y="911.50"></text></g><g><title>`0x7FFCA899B3C7 (81 samples, 0.02%)</title><rect x="99.1654%" y="885" width="0.0192%" height="15" fill="rgb(250,179,40)" fg:x="418107" fg:w="81"/><text x="99.4154%" y="895.50"></text></g><g><title>`0x7FFCA89877A7 (721 samples, 0.17%)</title><rect x="99.0186%" y="917" width="0.1710%" height="15" fill="rgb(242,44,2)" fg:x="417488" fg:w="721"/><text x="99.2686%" y="927.50"></text></g><g><title>`0x7FFCA89877C3 (304 samples, 0.07%)</title><rect x="99.1896%" y="917" width="0.0721%" height="15" fill="rgb(216,177,13)" fg:x="418209" fg:w="304"/><text x="99.4396%" y="927.50"></text></g><g><title>`0x7FFCA89D0022 (262 samples, 0.06%)</title><rect x="99.1995%" y="901" width="0.0621%" height="15" fill="rgb(216,106,43)" fg:x="418251" fg:w="262"/><text x="99.4495%" y="911.50"></text></g><g><title>`0x7FFCA8A0D574 (226 samples, 0.05%)</title><rect x="99.2081%" y="885" width="0.0536%" height="15" fill="rgb(216,183,2)" fg:x="418287" fg:w="226"/><text x="99.4581%" y="895.50"></text></g><g><title>`0x7FFC92DA0407 (58 samples, 0.01%)</title><rect x="99.2790%" y="885" width="0.0138%" height="15" fill="rgb(249,75,3)" fg:x="418586" fg:w="58"/><text x="99.5290%" y="895.50"></text></g><g><title>`0x7FFC92D95439 (55 samples, 0.01%)</title><rect x="99.2797%" y="869" width="0.0130%" height="15" fill="rgb(219,67,39)" fg:x="418589" fg:w="55"/><text x="99.5297%" y="879.50"></text></g><g><title>`0x7FFCA60D618B (49 samples, 0.01%)</title><rect x="99.2996%" y="885" width="0.0116%" height="15" fill="rgb(253,228,2)" fg:x="418673" fg:w="49"/><text x="99.5496%" y="895.50"></text></g><g><title>`0x7FFCA60D3A81 (48 samples, 0.01%)</title><rect x="99.2999%" y="869" width="0.0114%" height="15" fill="rgb(235,138,27)" fg:x="418674" fg:w="48"/><text x="99.5499%" y="879.50"></text></g><g><title>`0x7FFCA89BFBEF (46 samples, 0.01%)</title><rect x="99.3179%" y="837" width="0.0109%" height="15" fill="rgb(236,97,51)" fg:x="418750" fg:w="46"/><text x="99.5679%" y="847.50"></text></g><g><title>`0x7FFCA89BFCE4 (46 samples, 0.01%)</title><rect x="99.3179%" y="821" width="0.0109%" height="15" fill="rgb(240,80,30)" fg:x="418750" fg:w="46"/><text x="99.5679%" y="831.50"></text></g><g><title>`0x7FFCA899B3C7 (45 samples, 0.01%)</title><rect x="99.3181%" y="805" width="0.0107%" height="15" fill="rgb(230,178,19)" fg:x="418751" fg:w="45"/><text x="99.5681%" y="815.50"></text></g><g><title>`0x7FFCA89BFC14 (51 samples, 0.01%)</title><rect x="99.3290%" y="837" width="0.0121%" height="15" fill="rgb(210,190,27)" fg:x="418797" fg:w="51"/><text x="99.5790%" y="847.50"></text></g><g><title>`0x7FFCA60D6223 (140 samples, 0.03%)</title><rect x="99.3136%" y="885" width="0.0332%" height="15" fill="rgb(222,107,31)" fg:x="418732" fg:w="140"/><text x="99.5636%" y="895.50"></text></g><g><title>`0x7FFCA60D631F (140 samples, 0.03%)</title><rect x="99.3136%" y="869" width="0.0332%" height="15" fill="rgb(216,127,34)" fg:x="418732" fg:w="140"/><text x="99.5636%" y="879.50"></text></g><g><title>`0x7FFCA649D6FB (130 samples, 0.03%)</title><rect x="99.3160%" y="853" width="0.0308%" height="15" fill="rgb(234,116,52)" fg:x="418742" fg:w="130"/><text x="99.5660%" y="863.50"></text></g><g><title>`0x7FFCA60D623A (137 samples, 0.03%)</title><rect x="99.3468%" y="885" width="0.0325%" height="15" fill="rgb(222,124,15)" fg:x="418872" fg:w="137"/><text x="99.5968%" y="895.50"></text></g><g><title>`0x7FFCA60CDD3E (132 samples, 0.03%)</title><rect x="99.3480%" y="869" width="0.0313%" height="15" fill="rgb(231,179,28)" fg:x="418877" fg:w="132"/><text x="99.5980%" y="879.50"></text></g><g><title>`0x7FFCA899B3C7 (128 samples, 0.03%)</title><rect x="99.3489%" y="853" width="0.0304%" height="15" fill="rgb(226,93,45)" fg:x="418881" fg:w="128"/><text x="99.5989%" y="863.50"></text></g><g><title>`0x7FFCA64A1423 (44 samples, 0.01%)</title><rect x="99.3952%" y="853" width="0.0104%" height="15" fill="rgb(215,8,51)" fg:x="419076" fg:w="44"/><text x="99.6452%" y="863.50"></text></g><g><title>`0x7FFCA64A18DE (112 samples, 0.03%)</title><rect x="99.4322%" y="821" width="0.0266%" height="15" fill="rgb(223,106,5)" fg:x="419232" fg:w="112"/><text x="99.6822%" y="831.50"></text></g><g><title>`0x7FFCA64A1971 (1,707 samples, 0.40%)</title><rect x="99.4792%" y="821" width="0.4049%" height="15" fill="rgb(250,191,5)" fg:x="419430" fg:w="1707"/><text x="99.7292%" y="831.50"></text></g><g><title>`0x7FFCA8A0D5D4 (1,694 samples, 0.40%)</title><rect x="99.4822%" y="805" width="0.4018%" height="15" fill="rgb(242,132,44)" fg:x="419443" fg:w="1694"/><text x="99.7322%" y="815.50"></text></g><g><title>`0x7FFCA64A1428 (2,032 samples, 0.48%)</title><rect x="99.4056%" y="853" width="0.4819%" height="15" fill="rgb(251,152,29)" fg:x="419120" fg:w="2032"/><text x="99.6556%" y="863.50"></text></g><g><title>`0x7FFCA64A1640 (1,965 samples, 0.47%)</title><rect x="99.4215%" y="837" width="0.4661%" height="15" fill="rgb(218,179,5)" fg:x="419187" fg:w="1965"/><text x="99.6715%" y="847.50"></text></g><g><title>`0x7FFCA64A08CD (2,124 samples, 0.50%)</title><rect x="99.3897%" y="885" width="0.5038%" height="15" fill="rgb(227,67,19)" fg:x="419053" fg:w="2124"/><text x="99.6397%" y="895.50"></text></g><g><title>`0x7FFCA64A0B34 (2,104 samples, 0.50%)</title><rect x="99.3945%" y="869" width="0.4990%" height="15" fill="rgb(233,119,31)" fg:x="419073" fg:w="2104"/><text x="99.6445%" y="879.50"></text></g><g><title>`0x7FFCA8989A1D (2,610 samples, 0.62%)</title><rect x="99.2785%" y="901" width="0.6190%" height="15" fill="rgb(241,120,22)" fg:x="418584" fg:w="2610"/><text x="99.5285%" y="911.50"></text></g><g><title>`0x7FFCA898789F (2,632 samples, 0.62%)</title><rect x="99.2780%" y="917" width="0.6242%" height="15" fill="rgb(224,102,30)" fg:x="418582" fg:w="2632"/><text x="99.5280%" y="927.50"></text></g><g><title>`0x7FFCA8987955 (287 samples, 0.07%)</title><rect x="99.9151%" y="917" width="0.0681%" height="15" fill="rgb(210,164,37)" fg:x="421268" fg:w="287"/><text x="100.1651%" y="927.50"></text></g><g><title>`0x7FFCA8A0D6B4 (276 samples, 0.07%)</title><rect x="99.9177%" y="901" width="0.0655%" height="15" fill="rgb(226,191,16)" fg:x="421279" fg:w="276"/><text x="100.1677%" y="911.50"></text></g><g><title>`0x7FFCA89E6094 (4,083 samples, 0.97%)</title><rect x="99.0150%" y="933" width="0.9684%" height="15" fill="rgb(214,40,45)" fg:x="417473" fg:w="4083"/><text x="99.2650%" y="943.50"></text></g><g><title>`0x7FFCA89E5C73 (4,158 samples, 0.99%)</title><rect x="99.0077%" y="949" width="0.9862%" height="15" fill="rgb(244,29,26)" fg:x="417442" fg:w="4158"/><text x="99.2577%" y="959.50"></text></g><g><title>`0x7FFCA89E5C1E (4,195 samples, 0.99%)</title><rect x="99.0012%" y="965" width="0.9950%" height="15" fill="rgb(216,16,5)" fg:x="417415" fg:w="4195"/><text x="99.2512%" y="975.50"></text></g><g><title>all (421,626 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(249,76,35)" fg:x="0" fg:w="421626"/><text x="0.2500%" y="991.50"></text></g></svg></svg>